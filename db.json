{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"d0e1bdc900823f42af63bde4f229728dd2f52bca","modified":1570646106049},{"_id":"source/.DS_Store","hash":"fbaa8154c2fd3a8f1b1e5c7c14b155a4f55a9f66","modified":1558717502000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1558717502000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558717502000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1558717502000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558717502000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1558717502000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1558717502000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1558717502000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1558717502000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558717502000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1558717502000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1558717503000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1558717503000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1558717503000},{"_id":"themes/next/_config.yml","hash":"fdffbdaf6ea9dde226826112afbe2ab7e16e123a","modified":1570647021142},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1558717502000},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1558717502000},{"_id":"themes/next/http:::comment-portal.vip.vip.com:data:excelFiles:","hash":"31c74612ecdc779a0ef8d57c5e4375e85c3858a3","modified":1558717502000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1558717503000},{"_id":"source/about/index.md","hash":"27496e6bdfcca0f3e29397292886e78441628372","modified":1570645532259},{"_id":"source/_posts/Base64.md","hash":"ddafa470db39425490442cdcd2b69c9582d70f3e","modified":1558717502000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1558717502000},{"_id":"source/_posts/HouseRent.md","hash":"778d4b12d3ed8a5f369b47a9f49807efbb19508d","modified":1570647469984},{"_id":"source/_posts/Java——线程池.md","hash":"8cd53c6ac9e3a55fa56fe97ac5e9b5567601cc4e","modified":1558717502000},{"_id":"source/_posts/Java多线程——生产者和消费者模式.md","hash":"d0ab7505f4e002c8c3fd856e07deca2f89350689","modified":1558717502000},{"_id":"source/_posts/Nginx的 http_image_filter_module 模块使用说明.md","hash":"59f3d899c5b3700d97ddfac8481c0d6f5f6bff71","modified":1558717502000},{"_id":"source/_posts/hexo 写blog.md","hash":"fd7428571ae43f82ec22523654962ec1a00edd45","modified":1558717502000},{"_id":"source/_posts/sql重复插入问题.md","hash":"d43d828ea4407bda5e28b7b047b413beb7a8d1e0","modified":1558717502000},{"_id":"source/_posts/hello-world.md","hash":"c782629a08a74e84f4061bed9cb80380e6c1f79a","modified":1558717502000},{"_id":"source/_posts/使用 Grapicmagick 和 Im4java 处理图片.md","hash":"e192064931b03afcc998de0affba1302441592b0","modified":1558717502000},{"_id":"source/_posts/悲观锁和乐观锁.md","hash":"ae27ce8862956e084f761c51790cc7d795cbb450","modified":1558717502000},{"_id":"source/_posts/线程执行顺序——CountDownLatch、CyclicBarrier、join()、线程池.md","hash":"545c0c8412e7e35619d91ac9627b2f90bff81416","modified":1558717502000},{"_id":"source/_posts/线程间协作——wait、notify、notifyAll.md","hash":"4511dfa1941bc1691036e5b642186f1723bf12fb","modified":1558717502000},{"_id":"source/_posts/设计模式——代理模式.md","hash":"0c112bbc719c8fea12b2accd5eab2bbe665b021b","modified":1558717502000},{"_id":"source/categories/index.md","hash":"e98b1f2cee320b9d3dc051d3485c80c712a90a85","modified":1558717502000},{"_id":"source/tags/index.md","hash":"d5f0d5829d2302b6ed3a543dfecfa7545371777e","modified":1558717502000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1558717502000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1558717502000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1558717502000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1558717502000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1558717502000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1558717502000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1558717502000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1558717502000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1558717502000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1558717502000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1558717502000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1558717502000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1558717502000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1558717502000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1558717502000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1558717502000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1558717503000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1558717503000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1558717503000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1558717503000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1558717503000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1558717503000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1558717503000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1558717503000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558717503000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558717504000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558717504000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558717504000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558717502000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558717502000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1558717502000},{"_id":"themes/next/layout/_macro/post.swig","hash":"4a191a612383bb04a4705b4044c033f765060207","modified":1558717502000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1558717502000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1558717502000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1558717502000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1558717503000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1558717503000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1558717503000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1558717503000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1558717502000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1558717502000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1558717502000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1558717502000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1558717502000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1558717502000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1558717502000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1558717502000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1558717503000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1558717503000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1558717503000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1558717503000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1558717503000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1558717503000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1558717503000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1558717503000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558717503000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558717503000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558717503000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558717503000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558717503000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558717503000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558717503000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558717503000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558717503000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558717503000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558717503000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558717503000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558717503000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558717503000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1558717502000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558717502000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1558717503000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1558717503000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558717502000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1558717502000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1558717502000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1558717502000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1558717502000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1558717502000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1558717502000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1558717502000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1558717502000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1558717503000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1558717503000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1558717503000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1558717503000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1558717503000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1558717503000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558717503000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558717503000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558717504000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1558717503000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1558717504000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1558717504000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558717504000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1558717504000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1558717504000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1558717504000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558717504000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558717504000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558717504000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558717504000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1558717503000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1558717503000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1558717503000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1558717503000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1558717503000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1558717503000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1558717503000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1558717503000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1558717504000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558717504000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558717504000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558717504000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558717504000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1558717503000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558717503000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558717503000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558717504000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558717504000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1558717504000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1558717504000},{"_id":"public/search.xml","hash":"e037ba55b81940fe7b0a1b81e434448b8d0e9fc9","modified":1570649006617},{"_id":"public/README.html","hash":"2df830e6283f2a264495a9687e8d2f281fc58543","modified":1570649006648},{"_id":"public/about/index.html","hash":"8555004c0c426241eb05ea250009263d516a0fa0","modified":1570649006648},{"_id":"public/categories/index.html","hash":"8e4338a38e8887098cf229079d13502a20de9db2","modified":1570649006649},{"_id":"public/tags/index.html","hash":"9b983f092342c8b7126b23c7c6478bbb73103b70","modified":1570649006649},{"_id":"public/2019/10/10/HouseRent/index.html","hash":"a4c9ebf3a10b22083a8f526af2dfad88ce80d07b","modified":1570649006649},{"_id":"public/2017/04/15/设计模式——代理模式/index.html","hash":"65cce1ee4e85da970f0b18c9c694848069cbdf06","modified":1570649006649},{"_id":"public/2017/03/11/悲观锁和乐观锁/index.html","hash":"20f3a6207565bae0979273d1e1c631d00becdc7a","modified":1570649006649},{"_id":"public/2017/01/25/线程执行顺序——CountDownLatch、CyclicBarrier、join()、线程池/index.html","hash":"e58783aec181c8c90a79383e47f75e87bca78145","modified":1570649006649},{"_id":"public/2017/01/13/sql重复插入问题/index.html","hash":"e46803d02dcb7d1a46100887cbded635233a357d","modified":1570649006649},{"_id":"public/2016/11/22/Nginx的 http_image_filter_module 模块使用说明/index.html","hash":"6a159e9c3192ba23623fcdeb64a5f9f2a8e21e48","modified":1570649006649},{"_id":"public/2016/11/12/Java——线程池/index.html","hash":"c94905e40d8f08b52e59b792631aebd1dab168af","modified":1570649006649},{"_id":"public/2016/09/18/使用 Grapicmagick 和 Im4java 处理图片/index.html","hash":"70e8e5b4d05a3af68b7ffce7a279bc8f2b4697ac","modified":1570649006649},{"_id":"public/2016/09/10/Base64/index.html","hash":"fe16f679d731cd3a61b3277bc836e7564f8e4747","modified":1570649006649},{"_id":"public/2016/08/15/Java多线程——生产者和消费者模式/index.html","hash":"81bbcd46d94a3fa449de68563c046011100f1c46","modified":1570649006649},{"_id":"public/2016/07/08/线程间协作——wait、notify、notifyAll/index.html","hash":"326e8b69b85d740267eb1687ea4f315b44468d12","modified":1570649006649},{"_id":"public/2016/05/12/hexo 写blog/index.html","hash":"d62fe8d14479dfecca772dda9ee56f09bad29fef","modified":1570649006649},{"_id":"public/2016/05/11/hello-world/index.html","hash":"1c1c4864b173089974e9c63af4aa606c9ef13e63","modified":1570649006650},{"_id":"public/index.html","hash":"cdfccde89b5a3f8785794f3ed049faa4b79bf4c8","modified":1570649006650},{"_id":"public/page/2/index.html","hash":"9545b06c03ce6f1d87c4885079a8c6db0817c509","modified":1570649006650},{"_id":"public/categories/Java/index.html","hash":"b98718d4999c8309aba19d31009b63ad8edd0367","modified":1570649006650},{"_id":"public/categories/Life/index.html","hash":"d1d78607ce8c7d20e27db8a97089c71a7530ab79","modified":1570649006650},{"_id":"public/categories/Nginx/index.html","hash":"7a61ed87c0b3745fca28a9a0853c50545cf03b09","modified":1570649006650},{"_id":"public/categories/hexo/index.html","hash":"554ff683f4cd0fb0db489cda43ff6ce48a5a2e9d","modified":1570649006650},{"_id":"public/categories/mysql/index.html","hash":"29927a2a9b27d17c2b0924421487d291d3f4cb44","modified":1570649006650},{"_id":"public/categories/Database/index.html","hash":"3f81bf0ecb6573612d0220b14c102bcb39f4d2b5","modified":1570649006650},{"_id":"public/categories/Design-pattern/index.html","hash":"bdcb9d1c1f022d8bde9e1c346661c05303cc20a1","modified":1570649006650},{"_id":"public/tags/Java/index.html","hash":"e4d96de47292550f215e06c61359dd3abcb5d09c","modified":1570649006650},{"_id":"public/tags/Life/index.html","hash":"d5ee8bb89e2bc7ca7d733a20772258ec9549db74","modified":1570649006650},{"_id":"public/tags/Java多线程/index.html","hash":"3b8e9d1d334992d1c6b645e2744e9c0328abb2f5","modified":1570649006650},{"_id":"public/tags/Nginx/index.html","hash":"ff1ae09080ab5a1667d8b9e6371b8a19a718607e","modified":1570649006650},{"_id":"public/tags/hexo/index.html","hash":"a65bf0af31ae597f3701937598982750ccddb634","modified":1570649006650},{"_id":"public/tags/mysql/index.html","hash":"13764d7f93ec4d1148c7d9be3d21329b51d39fed","modified":1570649006650},{"_id":"public/tags/悲观锁-乐观锁/index.html","hash":"0d97c273578b8e2abea87685f0185d7bdf109560","modified":1570649006650},{"_id":"public/tags/Design-pattern/index.html","hash":"6d582d57f3534e6c641bb4e9a927b3f4a2a70a88","modified":1570649006651},{"_id":"public/archives/index.html","hash":"6e3003763a460cf7e9475c7e4854768e4dede0ed","modified":1570649006651},{"_id":"public/archives/page/2/index.html","hash":"75f10e76529db4e9e8b260357ba43521a852be79","modified":1570649006651},{"_id":"public/archives/2016/index.html","hash":"8cc642ad418dc24729c065b2178643ea4782e23e","modified":1570649006651},{"_id":"public/archives/2016/05/index.html","hash":"adfc54657b07ebd16cdb6411c4a779529edaaf7c","modified":1570649006651},{"_id":"public/archives/2016/07/index.html","hash":"6d5ac1ae95651e09d61c1995b8065efef2f5bf98","modified":1570649006652},{"_id":"public/archives/2016/08/index.html","hash":"f6748e218cb45105955cb90efafa5b70169a3e45","modified":1570649006652},{"_id":"public/archives/2016/09/index.html","hash":"f3baba3e723d4fc59a423e158a2c14045322890f","modified":1570649006652},{"_id":"public/archives/2016/11/index.html","hash":"3356d14e11ddc26a3b078980075bd5e488943bc3","modified":1570649006652},{"_id":"public/archives/2017/index.html","hash":"2b69b13f9d1c40d44fb0f52a6523034eb72ee14d","modified":1570649006652},{"_id":"public/archives/2017/01/index.html","hash":"e4dccba0b4da3560024c9d4ba97e08b35d980920","modified":1570649006652},{"_id":"public/archives/2017/03/index.html","hash":"06db0adc11f99cf5c91a5dbc9a0daebb54c8fd11","modified":1570649006652},{"_id":"public/archives/2017/04/index.html","hash":"38ff0b49374e068c071a922b8a1d31b7c101b517","modified":1570649006652},{"_id":"public/archives/2019/index.html","hash":"9c6d30a475494f5f83d209e92452d1133853fec8","modified":1570649006652},{"_id":"public/archives/2019/10/index.html","hash":"be6d2a0feda3a659cec433eaa8f4d99e69021f85","modified":1570649006652}],"Category":[{"name":"Java","_id":"ck1jnu26y00056c9kh77wivcz"},{"name":"Life","_id":"ck1jnu27b000b6c9ksja1i1si"},{"name":"Nginx","_id":"ck1jnu27k000o6c9kdcu09rp0"},{"name":"hexo","_id":"ck1jnu27q000u6c9koyk1yow7"},{"name":"mysql","_id":"ck1jnu27v00136c9kqdvpur9x"},{"name":"Database","_id":"ck1jnu27y00196c9knwayg56t"},{"name":"Design pattern","_id":"ck1jnu282001e6c9kgz4cyta7"}],"Data":[],"Page":[{"_content":"# lzx2011.github.io\nMy static blog by the use of hexo\n\nblog address: <a href=\"http://lzx2011.github.io\" target=\"_blank\">Gray-生活录</a>\n\nblog 中的代码在 https://github.com/lzx2011/java-scaffold\n","source":"README.md","raw":"# lzx2011.github.io\nMy static blog by the use of hexo\n\nblog address: <a href=\"http://lzx2011.github.io\" target=\"_blank\">Gray-生活录</a>\n\nblog 中的代码在 https://github.com/lzx2011/java-scaffold\n","date":"2019-10-09T19:10:13.946Z","updated":"2019-10-09T18:35:06.049Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ck1jnu20q00006c9kdq9nbtly","content":"<h1 id=\"lzx2011-github-io\"><a href=\"#lzx2011-github-io\" class=\"headerlink\" title=\"lzx2011.github.io\"></a>lzx2011.github.io</h1><p>My static blog by the use of hexo</p>\n<p>blog address: <a href=\"http://lzx2011.github.io\" target=\"_blank\">Gray-生活录</a></p>\n<p>blog 中的代码在 <a href=\"https://github.com/lzx2011/java-scaffold\" target=\"_blank\" rel=\"external\">https://github.com/lzx2011/java-scaffold</a></p>\n","excerpt":"","more":"<h1 id=\"lzx2011-github-io\"><a href=\"#lzx2011-github-io\" class=\"headerlink\" title=\"lzx2011.github.io\"></a>lzx2011.github.io</h1><p>My static blog by the use of hexo</p>\n<p>blog address: <a href=\"http://lzx2011.github.io\" target=\"_blank\">Gray-生活录</a></p>\n<p>blog 中的代码在 <a href=\"https://github.com/lzx2011/java-scaffold\">https://github.com/lzx2011/java-scaffold</a></p>\n"},{"title":"about","date":"2017-03-20T17:00:53.000Z","type":"about","_content":"I am Gary，喜欢在自己的空间中记录下生活和学习的点滴。我以前的博客在CSDN <a href=\"http://blog.csdn.net/revitalizing\" target=\"_blank\">学习印记</a> ，两个blog都会更新。\n\n\n# 内推\n目前就职阿里，部门招人中~\n如果感兴趣，欢迎简历投递: lzx20110@163.com\n\n<br>\n<img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" width=\"350\" height=\"350\">\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-21 01:00:53\ntype: \"about\"\n---\nI am Gary，喜欢在自己的空间中记录下生活和学习的点滴。我以前的博客在CSDN <a href=\"http://blog.csdn.net/revitalizing\" target=\"_blank\">学习印记</a> ，两个blog都会更新。\n\n\n# 内推\n目前就职阿里，部门招人中~\n如果感兴趣，欢迎简历投递: lzx20110@163.com\n\n<br>\n<img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" width=\"350\" height=\"350\">\n","updated":"2019-10-09T18:25:32.259Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1jnu26m00016c9kpeet6zgb","content":"<p>I am Gary，喜欢在自己的空间中记录下生活和学习的点滴。我以前的博客在CSDN <a href=\"http://blog.csdn.net/revitalizing\" target=\"_blank\">学习印记</a> ，两个blog都会更新。</p>\n<h1 id=\"内推\"><a href=\"#内推\" class=\"headerlink\" title=\"内推\"></a>内推</h1><p>目前就职阿里，部门招人中~<br>如果感兴趣，欢迎简历投递: lzx20110@163.com</p>\n<p><br><br><img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" width=\"350\" height=\"350\"></p>\n","excerpt":"","more":"<p>I am Gary，喜欢在自己的空间中记录下生活和学习的点滴。我以前的博客在CSDN <a href=\"http://blog.csdn.net/revitalizing\" target=\"_blank\">学习印记</a> ，两个blog都会更新。</p>\n<h1 id=\"内推\"><a href=\"#内推\" class=\"headerlink\" title=\"内推\"></a>内推</h1><p>目前就职阿里，部门招人中~<br>如果感兴趣，欢迎简历投递: lzx20110@163.com</p>\n<p><br><br><img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" width=\"350\" height=\"350\"></p>\n"},{"title":"categories","date":"2017-03-20T16:59:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-21 00:59:03\ntype: \"categories\"\n---\n","updated":"2019-05-24T17:05:02.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck1jnu26u00036c9k0l0a7bm8","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-03-20T16:55:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-21 00:55:33\ntype: \"tags\"\n---\n","updated":"2019-05-24T17:05:02.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck1jnu27100076c9ka5go80ul","content":"","excerpt":"","more":""}],"Post":[{"title":"Base64简介","date":"2016-09-10T10:33:14.000Z","_content":"# Base64编码介绍\n\nBase64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。\n\n比如三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。所以当原有数据不是3字节的倍数时，会将二进制数据后补0，凑够三个字节，转换为4个Base64单元，都是补位的则用个=替代一个Base64单元。当原数据长度不是3的整数倍时，如果最后剩下一个输入数据，在编码结果后加2个“=”；如果最后剩下两个输入数据，编码结果后加1个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证数据还原的正确性。（见下面的编码过程）\n\nBase64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n　　\n# 为什么使用 Base64\n\n* base64不是安全领域下的加密解密算法。能起到安全作用的效果很差，而且很容易破解，他核心作用应该是传输数据的正确性，有些网关或系统只能使用ASCII字符。Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，而且base64特别适合在http，mime协议下快速传输数据。\n\n* Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，Base64编码可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。\n\n* 在前端应用：将图片转换为Base64编码，可以让你很方便地在没有上传文件的条件下将图片插入其它的网页、编辑器中。 这对于一些小的图片是极为方便的，因为你不需要再去寻找一个保存图片的地方。\n\n* 在电子邮件传输中的应用，见下文。\n\n# base64编码过程\n\nBase64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用'='，因此编码后输出的文本末尾可能会出现1或2个'='。\n\n> 具体参见文中的图：http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html\n文中的图清晰明了。\n\n# url base64\n\n为解决在base64后的字符在url中正常使用，可采用一种用于URL的改进Base64编码，它不在末尾填充'='号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。\n\n# MIME base64\n\njdk8中提供了Base64类，实现了基本的base64，url Base64 和 mime Base64\nmime Base64 用在邮件传输中，在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。需要注意的是在电子邮件中，根据RFC 822规定，每76个字符，还需要加上一个回车换行。\n\n# 思考\nbase64 怎么编码中文的，utf-8中，一个汉字占3个字节\n\n# 参考资料\n<a href=\"https://zh.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 wikipedia</a>\n<a href=\"http://www.importnew.com/14961.html\" target=\"_blank\">Java 8新特性探究（十一）Base64详解</a>\n\n  \n\n\n\n\n\n\n\n\n\n","source":"_posts/Base64.md","raw":"---\ntitle: Base64简介\ndate: 2016-09-10 18:33:14\ncategories: Java\ntags: Java\n---\n# Base64编码介绍\n\nBase64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。\n\n比如三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。所以当原有数据不是3字节的倍数时，会将二进制数据后补0，凑够三个字节，转换为4个Base64单元，都是补位的则用个=替代一个Base64单元。当原数据长度不是3的整数倍时，如果最后剩下一个输入数据，在编码结果后加2个“=”；如果最后剩下两个输入数据，编码结果后加1个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证数据还原的正确性。（见下面的编码过程）\n\nBase64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n　　\n# 为什么使用 Base64\n\n* base64不是安全领域下的加密解密算法。能起到安全作用的效果很差，而且很容易破解，他核心作用应该是传输数据的正确性，有些网关或系统只能使用ASCII字符。Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，而且base64特别适合在http，mime协议下快速传输数据。\n\n* Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，Base64编码可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。\n\n* 在前端应用：将图片转换为Base64编码，可以让你很方便地在没有上传文件的条件下将图片插入其它的网页、编辑器中。 这对于一些小的图片是极为方便的，因为你不需要再去寻找一个保存图片的地方。\n\n* 在电子邮件传输中的应用，见下文。\n\n# base64编码过程\n\nBase64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用'='，因此编码后输出的文本末尾可能会出现1或2个'='。\n\n> 具体参见文中的图：http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html\n文中的图清晰明了。\n\n# url base64\n\n为解决在base64后的字符在url中正常使用，可采用一种用于URL的改进Base64编码，它不在末尾填充'='号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。\n\n# MIME base64\n\njdk8中提供了Base64类，实现了基本的base64，url Base64 和 mime Base64\nmime Base64 用在邮件传输中，在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。需要注意的是在电子邮件中，根据RFC 822规定，每76个字符，还需要加上一个回车换行。\n\n# 思考\nbase64 怎么编码中文的，utf-8中，一个汉字占3个字节\n\n# 参考资料\n<a href=\"https://zh.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 wikipedia</a>\n<a href=\"http://www.importnew.com/14961.html\" target=\"_blank\">Java 8新特性探究（十一）Base64详解</a>\n\n  \n\n\n\n\n\n\n\n\n\n","slug":"Base64","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu26p00026c9kakjz3ygy","content":"<h1 id=\"Base64编码介绍\"><a href=\"#Base64编码介绍\" class=\"headerlink\" title=\"Base64编码介绍\"></a>Base64编码介绍</h1><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。</p>\n<p>比如三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。所以当原有数据不是3字节的倍数时，会将二进制数据后补0，凑够三个字节，转换为4个Base64单元，都是补位的则用个=替代一个Base64单元。当原数据长度不是3的整数倍时，如果最后剩下一个输入数据，在编码结果后加2个“=”；如果最后剩下两个输入数据，编码结果后加1个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证数据还原的正确性。（见下面的编码过程）</p>\n<p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n　　</p>\n<h1 id=\"为什么使用-Base64\"><a href=\"#为什么使用-Base64\" class=\"headerlink\" title=\"为什么使用 Base64\"></a>为什么使用 Base64</h1><ul>\n<li><p>base64不是安全领域下的加密解密算法。能起到安全作用的效果很差，而且很容易破解，他核心作用应该是传输数据的正确性，有些网关或系统只能使用ASCII字符。Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，而且base64特别适合在http，mime协议下快速传输数据。</p>\n</li>\n<li><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，Base64编码可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。</p>\n</li>\n<li><p>在前端应用：将图片转换为Base64编码，可以让你很方便地在没有上传文件的条件下将图片插入其它的网页、编辑器中。 这对于一些小的图片是极为方便的，因为你不需要再去寻找一个保存图片的地方。</p>\n</li>\n<li><p>在电子邮件传输中的应用，见下文。</p>\n</li>\n</ul>\n<h1 id=\"base64编码过程\"><a href=\"#base64编码过程\" class=\"headerlink\" title=\"base64编码过程\"></a>base64编码过程</h1><p>Base64编码要求把3个8位字节（3<em>8=24）转化为4个6位的字节（4</em>6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现1或2个’=’。</p>\n<blockquote>\n<p>具体参见文中的图：<a href=\"http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html</a><br>文中的图清晰明了。</p>\n</blockquote>\n<h1 id=\"url-base64\"><a href=\"#url-base64\" class=\"headerlink\" title=\"url base64\"></a>url base64</h1><p>为解决在base64后的字符在url中正常使用，可采用一种用于URL的改进Base64编码，它不在末尾填充’=’号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>\n<h1 id=\"MIME-base64\"><a href=\"#MIME-base64\" class=\"headerlink\" title=\"MIME base64\"></a>MIME base64</h1><p>jdk8中提供了Base64类，实现了基本的base64，url Base64 和 mime Base64<br>mime Base64 用在邮件传输中，在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。需要注意的是在电子邮件中，根据RFC 822规定，每76个字符，还需要加上一个回车换行。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>base64 怎么编码中文的，utf-8中，一个汉字占3个字节</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://zh.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 wikipedia</a><br><a href=\"http://www.importnew.com/14961.html\" target=\"_blank\">Java 8新特性探究（十一）Base64详解</a></p>\n","excerpt":"","more":"<h1 id=\"Base64编码介绍\"><a href=\"#Base64编码介绍\" class=\"headerlink\" title=\"Base64编码介绍\"></a>Base64编码介绍</h1><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。</p>\n<p>比如三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。所以当原有数据不是3字节的倍数时，会将二进制数据后补0，凑够三个字节，转换为4个Base64单元，都是补位的则用个=替代一个Base64单元。当原数据长度不是3的整数倍时，如果最后剩下一个输入数据，在编码结果后加2个“=”；如果最后剩下两个输入数据，编码结果后加1个“=”；如果没有剩下任何数据，就什么都不要加，这样才可以保证数据还原的正确性。（见下面的编码过程）</p>\n<p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n　　</p>\n<h1 id=\"为什么使用-Base64\"><a href=\"#为什么使用-Base64\" class=\"headerlink\" title=\"为什么使用 Base64\"></a>为什么使用 Base64</h1><ul>\n<li><p>base64不是安全领域下的加密解密算法。能起到安全作用的效果很差，而且很容易破解，他核心作用应该是传输数据的正确性，有些网关或系统只能使用ASCII字符。Base64就是用来将非ASCII字符的数据转换成ASCII字符的一种方法，而且base64特别适合在http，mime协议下快速传输数据。</p>\n</li>\n<li><p>Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，Base64编码可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，即所编码的数据不会被人用肉眼所直接看到。</p>\n</li>\n<li><p>在前端应用：将图片转换为Base64编码，可以让你很方便地在没有上传文件的条件下将图片插入其它的网页、编辑器中。 这对于一些小的图片是极为方便的，因为你不需要再去寻找一个保存图片的地方。</p>\n</li>\n<li><p>在电子邮件传输中的应用，见下文。</p>\n</li>\n</ul>\n<h1 id=\"base64编码过程\"><a href=\"#base64编码过程\" class=\"headerlink\" title=\"base64编码过程\"></a>base64编码过程</h1><p>Base64编码要求把3个8位字节（3<em>8=24）转化为4个6位的字节（4</em>6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现1或2个’=’。</p>\n<blockquote>\n<p>具体参见文中的图：<a href=\"http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html\">http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html</a><br>文中的图清晰明了。</p>\n</blockquote>\n<h1 id=\"url-base64\"><a href=\"#url-base64\" class=\"headerlink\" title=\"url base64\"></a>url base64</h1><p>为解决在base64后的字符在url中正常使用，可采用一种用于URL的改进Base64编码，它不在末尾填充’=’号，并将标准Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</p>\n<h1 id=\"MIME-base64\"><a href=\"#MIME-base64\" class=\"headerlink\" title=\"MIME base64\"></a>MIME base64</h1><p>jdk8中提供了Base64类，实现了基本的base64，url Base64 和 mime Base64<br>mime Base64 用在邮件传输中，在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。需要注意的是在电子邮件中，根据RFC 822规定，每76个字符，还需要加上一个回车换行。</p>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>base64 怎么编码中文的，utf-8中，一个汉字占3个字节</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://zh.wikipedia.org/wiki/Base64\" target=\"_blank\">Base64 wikipedia</a><br><a href=\"http://www.importnew.com/14961.html\" target=\"_blank\">Java 8新特性探究（十一）Base64详解</a></p>\n"},{"title":"房屋出租","date":"2019-10-09T16:21:14.000Z","_content":"# 【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\n## 房源情况\n### 地址\n杭州西溪园区附近，文一西路1500号优家青年创业社区杭州科创社区，3层，35-40平左右，一室一厅一卫，具体看下面的图片\n\n### 费用\n每月2280，在社区的APP上缴纳\n\n### 交通\n离阿里园区大概4.5公里，公交 311、353均可，共享单车，打车都可以\n\n### 入住时间\n10月23号左右\n\n### 社区\n小米投资的青年创业社区，一楼有社区大厅，可以看电影、打台球、做饭、玩桌游等等。整个社区住的都是一些年轻人，社区交友活动app with，每月都有线下活动 ，还可以加入社区兴趣社团。在app上还可以报修缴费等，前台也都是年轻人，所以沟通办事效率很高，住着还是挺舒服省心的，官网：https://www.youplus.cc/\n\n### 联系方式\n有兴趣私聊微信、电话： 18719256278\n\n### 图片\n![avatar1](https://s2.ax1x.com/2019/10/10/uoV0eJ.md.png)\n\n![avatar2](https://s2.ax1x.com/2019/10/10/uoEoxU.md.jpg)\n\n![avatar3](https://s2.ax1x.com/2019/10/10/uoVBw9.md.jpg)\n\n![avatar4](https://s2.ax1x.com/2019/10/10/uoVyJx.md.jpg)\n\n![avatar5](https://s2.ax1x.com/2019/10/10/uoV6W6.md.jpg)\n\n![avatar6](https://s2.ax1x.com/2019/10/10/uoVdL4.jpg)\n","source":"_posts/HouseRent.md","raw":"---\ntitle: 房屋出租\ndate: 2019-10-10 00:21:14\ncategories: Life\ntags: Life\n---\n# 【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\n## 房源情况\n### 地址\n杭州西溪园区附近，文一西路1500号优家青年创业社区杭州科创社区，3层，35-40平左右，一室一厅一卫，具体看下面的图片\n\n### 费用\n每月2280，在社区的APP上缴纳\n\n### 交通\n离阿里园区大概4.5公里，公交 311、353均可，共享单车，打车都可以\n\n### 入住时间\n10月23号左右\n\n### 社区\n小米投资的青年创业社区，一楼有社区大厅，可以看电影、打台球、做饭、玩桌游等等。整个社区住的都是一些年轻人，社区交友活动app with，每月都有线下活动 ，还可以加入社区兴趣社团。在app上还可以报修缴费等，前台也都是年轻人，所以沟通办事效率很高，住着还是挺舒服省心的，官网：https://www.youplus.cc/\n\n### 联系方式\n有兴趣私聊微信、电话： 18719256278\n\n### 图片\n![avatar1](https://s2.ax1x.com/2019/10/10/uoV0eJ.md.png)\n\n![avatar2](https://s2.ax1x.com/2019/10/10/uoEoxU.md.jpg)\n\n![avatar3](https://s2.ax1x.com/2019/10/10/uoVBw9.md.jpg)\n\n![avatar4](https://s2.ax1x.com/2019/10/10/uoVyJx.md.jpg)\n\n![avatar5](https://s2.ax1x.com/2019/10/10/uoV6W6.md.jpg)\n\n![avatar6](https://s2.ax1x.com/2019/10/10/uoVdL4.jpg)\n","slug":"HouseRent","published":1,"updated":"2019-10-09T18:57:49.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu26u00046c9kat6vc6ab","content":"<h1 id=\"【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\"><a href=\"#【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\" class=\"headerlink\" title=\"【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\"></a>【房屋出租】优家青年创业社区酒店式公寓一室一厅出租</h1><h2 id=\"房源情况\"><a href=\"#房源情况\" class=\"headerlink\" title=\"房源情况\"></a>房源情况</h2><h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><p>杭州西溪园区附近，文一西路1500号优家青年创业社区杭州科创社区，3层，35-40平左右，一室一厅一卫，具体看下面的图片</p>\n<h3 id=\"费用\"><a href=\"#费用\" class=\"headerlink\" title=\"费用\"></a>费用</h3><p>每月2280，在社区的APP上缴纳</p>\n<h3 id=\"交通\"><a href=\"#交通\" class=\"headerlink\" title=\"交通\"></a>交通</h3><p>离阿里园区大概4.5公里，公交 311、353均可，共享单车，打车都可以</p>\n<h3 id=\"入住时间\"><a href=\"#入住时间\" class=\"headerlink\" title=\"入住时间\"></a>入住时间</h3><p>10月23号左右</p>\n<h3 id=\"社区\"><a href=\"#社区\" class=\"headerlink\" title=\"社区\"></a>社区</h3><p>小米投资的青年创业社区，一楼有社区大厅，可以看电影、打台球、做饭、玩桌游等等。整个社区住的都是一些年轻人，社区交友活动app with，每月都有线下活动 ，还可以加入社区兴趣社团。在app上还可以报修缴费等，前台也都是年轻人，所以沟通办事效率很高，住着还是挺舒服省心的，官网：<a href=\"https://www.youplus.cc/\" target=\"_blank\" rel=\"external\">https://www.youplus.cc/</a></p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>有兴趣私聊微信、电话： 18719256278</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"https://s2.ax1x.com/2019/10/10/uoV0eJ.md.png\" alt=\"avatar1\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoEoxU.md.jpg\" alt=\"avatar2\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVBw9.md.jpg\" alt=\"avatar3\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVyJx.md.jpg\" alt=\"avatar4\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoV6W6.md.jpg\" alt=\"avatar5\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" alt=\"avatar6\"></p>\n","excerpt":"","more":"<h1 id=\"【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\"><a href=\"#【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\" class=\"headerlink\" title=\"【房屋出租】优家青年创业社区酒店式公寓一室一厅出租\"></a>【房屋出租】优家青年创业社区酒店式公寓一室一厅出租</h1><h2 id=\"房源情况\"><a href=\"#房源情况\" class=\"headerlink\" title=\"房源情况\"></a>房源情况</h2><h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><p>杭州西溪园区附近，文一西路1500号优家青年创业社区杭州科创社区，3层，35-40平左右，一室一厅一卫，具体看下面的图片</p>\n<h3 id=\"费用\"><a href=\"#费用\" class=\"headerlink\" title=\"费用\"></a>费用</h3><p>每月2280，在社区的APP上缴纳</p>\n<h3 id=\"交通\"><a href=\"#交通\" class=\"headerlink\" title=\"交通\"></a>交通</h3><p>离阿里园区大概4.5公里，公交 311、353均可，共享单车，打车都可以</p>\n<h3 id=\"入住时间\"><a href=\"#入住时间\" class=\"headerlink\" title=\"入住时间\"></a>入住时间</h3><p>10月23号左右</p>\n<h3 id=\"社区\"><a href=\"#社区\" class=\"headerlink\" title=\"社区\"></a>社区</h3><p>小米投资的青年创业社区，一楼有社区大厅，可以看电影、打台球、做饭、玩桌游等等。整个社区住的都是一些年轻人，社区交友活动app with，每月都有线下活动 ，还可以加入社区兴趣社团。在app上还可以报修缴费等，前台也都是年轻人，所以沟通办事效率很高，住着还是挺舒服省心的，官网：<a href=\"https://www.youplus.cc/\">https://www.youplus.cc/</a></p>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><p>有兴趣私聊微信、电话： 18719256278</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><img src=\"https://s2.ax1x.com/2019/10/10/uoV0eJ.md.png\" alt=\"avatar1\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoEoxU.md.jpg\" alt=\"avatar2\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVBw9.md.jpg\" alt=\"avatar3\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVyJx.md.jpg\" alt=\"avatar4\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoV6W6.md.jpg\" alt=\"avatar5\"></p>\n<p><img src=\"https://s2.ax1x.com/2019/10/10/uoVdL4.jpg\" alt=\"avatar6\"></p>\n"},{"title":"Java——线程池","date":"2016-11-12T11:20:14.000Z","_content":"# Java 线程池\n# 线程池\n线程池负责管理工作线程，包含一个等待执行的任务队列。\n线程池的任务队列是一个 Runnable集合，工作线程负责从任务队列中取出并执行Runnable对象。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，Executor 框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable 等。\n# 单线程的弊端\n\n* 每次new Thread新建对象性能差。\n* 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或 oom。\n* 缺乏更多功能，如定时执行、定期执行、线程中断。\n\n> 不控制线程数量，不断创建新线程，很快会导致oom，线程还是很占用资源的，线程栈的大小，JDK5.0以后每个线程堆栈大小默认为1M,以前每个线程堆栈大小为256K；可以通过jvm参数-Xss来设置；注意-Xss是jvm的非标准参数，不强制所有平台的jvm都支持。\n\n# 线程池的优点\n\n1. 降低资源消耗。使用线程池的好处是重用存在的线程，减少在创建和销毁线程上所花的时间以及系统资源的开销，如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。 \n\n2. 提高响应速度。重用存在的线程，任务可以不需要等到线程创建就能立即执行。\n\n3. 提高线程的可管理性。提供定时执行、定期执行、单线程、并发数控制等功能，线程池可以进行统一的分配，调优和监控。\n\n# 线程池分类\n\nExecutors 提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 ExecutorService 接口。\n\n* newCachedThreadPool:创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。缓存型池子通常用于执行一些生存期很短的异步型任务 因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。不限制线程数，可能会导致oom。\n \n* newFixedThreadPool: 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n \n* newScheduledThreadPool: 创建一个定长线程池，支持定时及周期性任务执行，多数情况下可用来替代Timer类。\n\n* newSingleThreadExecutor: 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n# 核心类ThreadPoolExecutor\n\n`java.uitl.concurrent.ThreadPoolExecutor`类是线程池中最核心的一个类，有四个构造方法，拿一个构造方法举例。\n\n```java\n public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n    ...\n```\n\n* corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；\n\n* keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；\n\n* workQueue：一个阻塞队列，用来存储等待执行的任务。ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。\n\n* threadFactory：线程工厂，主要用来创建线程；\n\n* handler：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。有以下四种取值：\n \n```java\nThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常(默认采取的策略)。 \nThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 \nThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\nThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 \n```\n\n# 线程池执行任务方法\n\n## execute()\n方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。但是execute方法没有返回值，所以无法判断任务是否被线程池执行成功。\n\n## submit()\n方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，submit()执行 Callable 任务，会发现它实际上还是调用的execute()方法，利用了Future来获取任务执行结果。（代码示例参见：http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）\n\n# 线程池关闭\n\n我们可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池，它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。\n\n只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。\n\nshutdown()方法使线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；\n\nshutdownNow()方法使线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；\n\n当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。\n\n> 通过类ThreadPoolExecutor线程执行的源码分析可以参考文章：http://www.cnblogs.com/dolphin0520/p/3932921.html\n\n\n# 线程池监控\n\nThreadPoolExecutor 提供了一些方法，可以查看执行状态、线程池大小、活动线程数和任务数。\n\n```java\n getPoolSize()  线程池的线程数量。\n getCorePoolSize() 线程池基本线程数。\n getActiveCount() 活跃线程数\n getCompletedTaskCount() 获取完成任务数\n getTaskCount()   计划要执行任务数，不一定准确\n isShutdown()  线程池的状态是否是shutdown\n isTerminated()  所有任务是否都执行完毕\n```\n\n通过扩展线程池进行监控。通过继承线程池并重写线程池的beforeExecute，afterExecute和terminated方法，我们可以在任务执行前，执行后和线程池关闭前干一些事情。如监控任务的平均执行时间，最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。\n\n# 线程池执行任务流程\n\n* 如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；\n\n* 如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；\n \n* 如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；\n \n* 如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。\n\n# 如何合理配置线程池的大小\n\n获取cpu核数：`Runtime.getRuntime().availableProcessors()`;\n\n一般需要根据任务的类型来配置线程池大小：\n\n如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1\n如果是IO密集型任务，参考值可以设置为2*NCPU\n\n当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。\n\n# 可能出现的问题\n\n下面这段引用来自阿里的java开发规范\n\n> 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。Executors 返回的线程池对象的弊端如下,FixedThreadPool和SingleThreadPool允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。CachedThreadPool和ScheduledThreadPool允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。\n\n建议使用有界队列，有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。有一次我们组使用的后台任务线程池的队列和线程池全满了，不断的抛出抛弃任务的异常，通过排查发现是数据库出现了问题，导致执行SQL变得非常缓慢，因为后台任务线程池里的任务全是需要向数据库查询和插入数据的，所以导致线程池里的工作线程全部阻塞住，任务积压在线程池里。如果当时我们设置成无界队列，线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。当然我们的系统所有的任务是用的单独的服务器部署的，而我们使用不同规模的线程池跑不同类型的任务，但是出现这样问题时也会影响到其他任务。\n\n# 参考资料\n<a href=\"http://stormzhang.com/java/2013/11/08/java-thread-pool/\" target=\"_blank\">JAVA THREAD POOL</a>\n<a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\" target=\"_blank\">Java并发编程：线程池的使用（很细致的好文章）</a>\n<a href=\"http://www.infoq.com/cn/articles/java-threadPool\" target=\"_blank\">聊聊并发（三）——JAVA线程池的分析和使用</a>\n\n\n\n\n\n","source":"_posts/Java——线程池.md","raw":"---\ntitle: Java——线程池\ndate: 2016-11-12 19:20:14\ncategories: Java\ntags: Java\n---\n# Java 线程池\n# 线程池\n线程池负责管理工作线程，包含一个等待执行的任务队列。\n线程池的任务队列是一个 Runnable集合，工作线程负责从任务队列中取出并执行Runnable对象。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，Executor 框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable 等。\n# 单线程的弊端\n\n* 每次new Thread新建对象性能差。\n* 线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或 oom。\n* 缺乏更多功能，如定时执行、定期执行、线程中断。\n\n> 不控制线程数量，不断创建新线程，很快会导致oom，线程还是很占用资源的，线程栈的大小，JDK5.0以后每个线程堆栈大小默认为1M,以前每个线程堆栈大小为256K；可以通过jvm参数-Xss来设置；注意-Xss是jvm的非标准参数，不强制所有平台的jvm都支持。\n\n# 线程池的优点\n\n1. 降低资源消耗。使用线程池的好处是重用存在的线程，减少在创建和销毁线程上所花的时间以及系统资源的开销，如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。 \n\n2. 提高响应速度。重用存在的线程，任务可以不需要等到线程创建就能立即执行。\n\n3. 提高线程的可管理性。提供定时执行、定期执行、单线程、并发数控制等功能，线程池可以进行统一的分配，调优和监控。\n\n# 线程池分类\n\nExecutors 提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 ExecutorService 接口。\n\n* newCachedThreadPool:创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。缓存型池子通常用于执行一些生存期很短的异步型任务 因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。不限制线程数，可能会导致oom。\n \n* newFixedThreadPool: 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。\n \n* newScheduledThreadPool: 创建一个定长线程池，支持定时及周期性任务执行，多数情况下可用来替代Timer类。\n\n* newSingleThreadExecutor: 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。\n\n# 核心类ThreadPoolExecutor\n\n`java.uitl.concurrent.ThreadPoolExecutor`类是线程池中最核心的一个类，有四个构造方法，拿一个构造方法举例。\n\n```java\n public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n    ...\n```\n\n* corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；\n\n* keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；\n\n* workQueue：一个阻塞队列，用来存储等待执行的任务。ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。\n\n* threadFactory：线程工厂，主要用来创建线程；\n\n* handler：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。有以下四种取值：\n \n```java\nThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常(默认采取的策略)。 \nThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 \nThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\nThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 \n```\n\n# 线程池执行任务方法\n\n## execute()\n方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。但是execute方法没有返回值，所以无法判断任务是否被线程池执行成功。\n\n## submit()\n方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，submit()执行 Callable 任务，会发现它实际上还是调用的execute()方法，利用了Future来获取任务执行结果。（代码示例参见：http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）\n\n# 线程池关闭\n\n我们可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池，它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。\n\n只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。\n\nshutdown()方法使线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；\n\nshutdownNow()方法使线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；\n\n当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。\n\n> 通过类ThreadPoolExecutor线程执行的源码分析可以参考文章：http://www.cnblogs.com/dolphin0520/p/3932921.html\n\n\n# 线程池监控\n\nThreadPoolExecutor 提供了一些方法，可以查看执行状态、线程池大小、活动线程数和任务数。\n\n```java\n getPoolSize()  线程池的线程数量。\n getCorePoolSize() 线程池基本线程数。\n getActiveCount() 活跃线程数\n getCompletedTaskCount() 获取完成任务数\n getTaskCount()   计划要执行任务数，不一定准确\n isShutdown()  线程池的状态是否是shutdown\n isTerminated()  所有任务是否都执行完毕\n```\n\n通过扩展线程池进行监控。通过继承线程池并重写线程池的beforeExecute，afterExecute和terminated方法，我们可以在任务执行前，执行后和线程池关闭前干一些事情。如监控任务的平均执行时间，最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。\n\n# 线程池执行任务流程\n\n* 如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；\n\n* 如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；\n \n* 如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；\n \n* 如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。\n\n# 如何合理配置线程池的大小\n\n获取cpu核数：`Runtime.getRuntime().availableProcessors()`;\n\n一般需要根据任务的类型来配置线程池大小：\n\n如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1\n如果是IO密集型任务，参考值可以设置为2*NCPU\n\n当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。\n\n# 可能出现的问题\n\n下面这段引用来自阿里的java开发规范\n\n> 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。Executors 返回的线程池对象的弊端如下,FixedThreadPool和SingleThreadPool允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。CachedThreadPool和ScheduledThreadPool允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。\n\n建议使用有界队列，有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。有一次我们组使用的后台任务线程池的队列和线程池全满了，不断的抛出抛弃任务的异常，通过排查发现是数据库出现了问题，导致执行SQL变得非常缓慢，因为后台任务线程池里的任务全是需要向数据库查询和插入数据的，所以导致线程池里的工作线程全部阻塞住，任务积压在线程池里。如果当时我们设置成无界队列，线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。当然我们的系统所有的任务是用的单独的服务器部署的，而我们使用不同规模的线程池跑不同类型的任务，但是出现这样问题时也会影响到其他任务。\n\n# 参考资料\n<a href=\"http://stormzhang.com/java/2013/11/08/java-thread-pool/\" target=\"_blank\">JAVA THREAD POOL</a>\n<a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\" target=\"_blank\">Java并发编程：线程池的使用（很细致的好文章）</a>\n<a href=\"http://www.infoq.com/cn/articles/java-threadPool\" target=\"_blank\">聊聊并发（三）——JAVA线程池的分析和使用</a>\n\n\n\n\n\n","slug":"Java——线程池","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27200086c9kf64xnwcq","content":"<h1 id=\"Java-线程池\"><a href=\"#Java-线程池\" class=\"headerlink\" title=\"Java 线程池\"></a>Java 线程池</h1><h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p>线程池负责管理工作线程，包含一个等待执行的任务队列。<br>线程池的任务队列是一个 Runnable集合，工作线程负责从任务队列中取出并执行Runnable对象。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，Executor 框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable 等。</p>\n<h1 id=\"单线程的弊端\"><a href=\"#单线程的弊端\" class=\"headerlink\" title=\"单线程的弊端\"></a>单线程的弊端</h1><ul>\n<li>每次new Thread新建对象性能差。</li>\n<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或 oom。</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ul>\n<blockquote>\n<p>不控制线程数量，不断创建新线程，很快会导致oom，线程还是很占用资源的，线程栈的大小，JDK5.0以后每个线程堆栈大小默认为1M,以前每个线程堆栈大小为256K；可以通过jvm参数-Xss来设置；注意-Xss是jvm的非标准参数，不强制所有平台的jvm都支持。</p>\n</blockquote>\n<h1 id=\"线程池的优点\"><a href=\"#线程池的优点\" class=\"headerlink\" title=\"线程池的优点\"></a>线程池的优点</h1><ol>\n<li><p>降低资源消耗。使用线程池的好处是重用存在的线程，减少在创建和销毁线程上所花的时间以及系统资源的开销，如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。 </p>\n</li>\n<li><p>提高响应速度。重用存在的线程，任务可以不需要等到线程创建就能立即执行。</p>\n</li>\n<li><p>提高线程的可管理性。提供定时执行、定期执行、单线程、并发数控制等功能，线程池可以进行统一的分配，调优和监控。</p>\n</li>\n</ol>\n<h1 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h1><p>Executors 提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 ExecutorService 接口。</p>\n<ul>\n<li><p>newCachedThreadPool:创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。缓存型池子通常用于执行一些生存期很短的异步型任务 因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。不限制线程数，可能会导致oom。</p>\n</li>\n<li><p>newFixedThreadPool: 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>\n</li>\n<li><p>newScheduledThreadPool: 创建一个定长线程池，支持定时及周期性任务执行，多数情况下可用来替代Timer类。</p>\n</li>\n<li><p>newSingleThreadExecutor: 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>\n</li>\n</ul>\n<h1 id=\"核心类ThreadPoolExecutor\"><a href=\"#核心类ThreadPoolExecutor\" class=\"headerlink\" title=\"核心类ThreadPoolExecutor\"></a>核心类ThreadPoolExecutor</h1><p><code>java.uitl.concurrent.ThreadPoolExecutor</code>类是线程池中最核心的一个类，有四个构造方法，拿一个构造方法举例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></div><div class=\"line\">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</p>\n</li>\n<li><p>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</p>\n</li>\n<li><p>workQueue：一个阻塞队列，用来存储等待执行的任务。ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。</p>\n</li>\n<li><p>threadFactory：线程工厂，主要用来创建线程；</p>\n</li>\n<li><p>handler：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。有以下四种取值：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常(默认采取的策略)。 </div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure>\n<h1 id=\"线程池执行任务方法\"><a href=\"#线程池执行任务方法\" class=\"headerlink\" title=\"线程池执行任务方法\"></a>线程池执行任务方法</h1><h2 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute()\"></a>execute()</h2><p>方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。但是execute方法没有返回值，所以无法判断任务是否被线程池执行成功。</p>\n<h2 id=\"submit\"><a href=\"#submit\" class=\"headerlink\" title=\"submit()\"></a>submit()</h2><p>方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，submit()执行 Callable 任务，会发现它实际上还是调用的execute()方法，利用了Future来获取任务执行结果。（代码示例参见：<a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）\" target=\"_blank\" rel=\"external\">http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）</a></p>\n<h1 id=\"线程池关闭\"><a href=\"#线程池关闭\" class=\"headerlink\" title=\"线程池关闭\"></a>线程池关闭</h1><p>我们可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池，它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</p>\n<p>shutdown()方法使线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p>\n<p>shutdownNow()方法使线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p>\n<p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p>\n<blockquote>\n<p>通过类ThreadPoolExecutor线程执行的源码分析可以参考文章：<a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dolphin0520/p/3932921.html</a></p>\n</blockquote>\n<h1 id=\"线程池监控\"><a href=\"#线程池监控\" class=\"headerlink\" title=\"线程池监控\"></a>线程池监控</h1><p>ThreadPoolExecutor 提供了一些方法，可以查看执行状态、线程池大小、活动线程数和任务数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> getPoolSize()  线程池的线程数量。</div><div class=\"line\"> getCorePoolSize() 线程池基本线程数。</div><div class=\"line\"> getActiveCount() 活跃线程数</div><div class=\"line\"> getCompletedTaskCount() 获取完成任务数</div><div class=\"line\"> getTaskCount()   计划要执行任务数，不一定准确</div><div class=\"line\"> isShutdown()  线程池的状态是否是<span class=\"function\">shutdown</span></div><div class=\"line\"> <span class=\"title\">isTerminated</span><span class=\"params\">()</span>  所有任务是否都执行完毕</div></pre></td></tr></table></figure>\n<p>通过扩展线程池进行监控。通过继承线程池并重写线程池的beforeExecute，afterExecute和terminated方法，我们可以在任务执行前，执行后和线程池关闭前干一些事情。如监控任务的平均执行时间，最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。</p>\n<h1 id=\"线程池执行任务流程\"><a href=\"#线程池执行任务流程\" class=\"headerlink\" title=\"线程池执行任务流程\"></a>线程池执行任务流程</h1><ul>\n<li><p>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</p>\n</li>\n<li><p>如果当前线程池中的线程数目&gt;=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；</p>\n</li>\n<li><p>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</p>\n</li>\n<li><p>如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</p>\n</li>\n</ul>\n<h1 id=\"如何合理配置线程池的大小\"><a href=\"#如何合理配置线程池的大小\" class=\"headerlink\" title=\"如何合理配置线程池的大小\"></a>如何合理配置线程池的大小</h1><p>获取cpu核数：<code>Runtime.getRuntime().availableProcessors()</code>;</p>\n<p>一般需要根据任务的类型来配置线程池大小：</p>\n<p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1<br>如果是IO密集型任务，参考值可以设置为2*NCPU</p>\n<p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>\n<h1 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h1><p>下面这段引用来自阿里的java开发规范</p>\n<blockquote>\n<p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。Executors 返回的线程池对象的弊端如下,FixedThreadPool和SingleThreadPool允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。CachedThreadPool和ScheduledThreadPool允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p>\n</blockquote>\n<p>建议使用有界队列，有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。有一次我们组使用的后台任务线程池的队列和线程池全满了，不断的抛出抛弃任务的异常，通过排查发现是数据库出现了问题，导致执行SQL变得非常缓慢，因为后台任务线程池里的任务全是需要向数据库查询和插入数据的，所以导致线程池里的工作线程全部阻塞住，任务积压在线程池里。如果当时我们设置成无界队列，线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。当然我们的系统所有的任务是用的单独的服务器部署的，而我们使用不同规模的线程池跑不同类型的任务，但是出现这样问题时也会影响到其他任务。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://stormzhang.com/java/2013/11/08/java-thread-pool/\" target=\"_blank\">JAVA THREAD POOL</a><br><a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\" target=\"_blank\">Java并发编程：线程池的使用（很细致的好文章）</a><br><a href=\"http://www.infoq.com/cn/articles/java-threadPool\" target=\"_blank\">聊聊并发（三）——JAVA线程池的分析和使用</a></p>\n","excerpt":"","more":"<h1 id=\"Java-线程池\"><a href=\"#Java-线程池\" class=\"headerlink\" title=\"Java 线程池\"></a>Java 线程池</h1><h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p>线程池负责管理工作线程，包含一个等待执行的任务队列。<br>线程池的任务队列是一个 Runnable集合，工作线程负责从任务队列中取出并执行Runnable对象。Executor 框架便是 Java 5 中引入的，其内部使用了线程池机制，Executor 框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable 等。</p>\n<h1 id=\"单线程的弊端\"><a href=\"#单线程的弊端\" class=\"headerlink\" title=\"单线程的弊端\"></a>单线程的弊端</h1><ul>\n<li>每次new Thread新建对象性能差。</li>\n<li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或 oom。</li>\n<li>缺乏更多功能，如定时执行、定期执行、线程中断。</li>\n</ul>\n<blockquote>\n<p>不控制线程数量，不断创建新线程，很快会导致oom，线程还是很占用资源的，线程栈的大小，JDK5.0以后每个线程堆栈大小默认为1M,以前每个线程堆栈大小为256K；可以通过jvm参数-Xss来设置；注意-Xss是jvm的非标准参数，不强制所有平台的jvm都支持。</p>\n</blockquote>\n<h1 id=\"线程池的优点\"><a href=\"#线程池的优点\" class=\"headerlink\" title=\"线程池的优点\"></a>线程池的优点</h1><ol>\n<li><p>降低资源消耗。使用线程池的好处是重用存在的线程，减少在创建和销毁线程上所花的时间以及系统资源的开销，如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。 </p>\n</li>\n<li><p>提高响应速度。重用存在的线程，任务可以不需要等到线程创建就能立即执行。</p>\n</li>\n<li><p>提高线程的可管理性。提供定时执行、定期执行、单线程、并发数控制等功能，线程池可以进行统一的分配，调优和监控。</p>\n</li>\n</ol>\n<h1 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h1><p>Executors 提供了一系列工厂方法用于创先线程池，返回的线程池都实现了 ExecutorService 接口。</p>\n<ul>\n<li><p>newCachedThreadPool:创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。缓存型池子通常用于执行一些生存期很短的异步型任务 因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。不限制线程数，可能会导致oom。</p>\n</li>\n<li><p>newFixedThreadPool: 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>\n</li>\n<li><p>newScheduledThreadPool: 创建一个定长线程池，支持定时及周期性任务执行，多数情况下可用来替代Timer类。</p>\n</li>\n<li><p>newSingleThreadExecutor: 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p>\n</li>\n</ul>\n<h1 id=\"核心类ThreadPoolExecutor\"><a href=\"#核心类ThreadPoolExecutor\" class=\"headerlink\" title=\"核心类ThreadPoolExecutor\"></a>核心类ThreadPoolExecutor</h1><p><code>java.uitl.concurrent.ThreadPoolExecutor</code>类是线程池中最核心的一个类，有四个构造方法，拿一个构造方法举例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</div><div class=\"line\">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>;</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n<ul>\n<li><p>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</p>\n</li>\n<li><p>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</p>\n</li>\n<li><p>workQueue：一个阻塞队列，用来存储等待执行的任务。ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。</p>\n</li>\n<li><p>threadFactory：线程工厂，主要用来创建线程；</p>\n</li>\n<li><p>handler：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。有以下四种取值：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常(默认采取的策略)。 </div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure>\n<h1 id=\"线程池执行任务方法\"><a href=\"#线程池执行任务方法\" class=\"headerlink\" title=\"线程池执行任务方法\"></a>线程池执行任务方法</h1><h2 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute()\"></a>execute()</h2><p>方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。但是execute方法没有返回值，所以无法判断任务是否被线程池执行成功。</p>\n<h2 id=\"submit\"><a href=\"#submit\" class=\"headerlink\" title=\"submit()\"></a>submit()</h2><p>方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，submit()执行 Callable 任务，会发现它实际上还是调用的execute()方法，利用了Future来获取任务执行结果。（代码示例参见：<a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）\">http://wiki.jikexueyuan.com/project/java-concurrency/executor.html）</a></p>\n<h1 id=\"线程池关闭\"><a href=\"#线程池关闭\" class=\"headerlink\" title=\"线程池关闭\"></a>线程池关闭</h1><p>我们可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池，它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</p>\n<p>shutdown()方法使线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p>\n<p>shutdownNow()方法使线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p>\n<p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p>\n<blockquote>\n<p>通过类ThreadPoolExecutor线程执行的源码分析可以参考文章：<a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\">http://www.cnblogs.com/dolphin0520/p/3932921.html</a></p>\n</blockquote>\n<h1 id=\"线程池监控\"><a href=\"#线程池监控\" class=\"headerlink\" title=\"线程池监控\"></a>线程池监控</h1><p>ThreadPoolExecutor 提供了一些方法，可以查看执行状态、线程池大小、活动线程数和任务数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> getPoolSize()  线程池的线程数量。</div><div class=\"line\"> getCorePoolSize() 线程池基本线程数。</div><div class=\"line\"> getActiveCount() 活跃线程数</div><div class=\"line\"> getCompletedTaskCount() 获取完成任务数</div><div class=\"line\"> getTaskCount()   计划要执行任务数，不一定准确</div><div class=\"line\"> isShutdown()  线程池的状态是否是<span class=\"function\">shutdown</div><div class=\"line\"> <span class=\"title\">isTerminated</span><span class=\"params\">()</span>  所有任务是否都执行完毕</span></div></pre></td></tr></table></figure>\n<p>通过扩展线程池进行监控。通过继承线程池并重写线程池的beforeExecute，afterExecute和terminated方法，我们可以在任务执行前，执行后和线程池关闭前干一些事情。如监控任务的平均执行时间，最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。</p>\n<h1 id=\"线程池执行任务流程\"><a href=\"#线程池执行任务流程\" class=\"headerlink\" title=\"线程池执行任务流程\"></a>线程池执行任务流程</h1><ul>\n<li><p>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</p>\n</li>\n<li><p>如果当前线程池中的线程数目&gt;=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；</p>\n</li>\n<li><p>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</p>\n</li>\n<li><p>如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</p>\n</li>\n</ul>\n<h1 id=\"如何合理配置线程池的大小\"><a href=\"#如何合理配置线程池的大小\" class=\"headerlink\" title=\"如何合理配置线程池的大小\"></a>如何合理配置线程池的大小</h1><p>获取cpu核数：<code>Runtime.getRuntime().availableProcessors()</code>;</p>\n<p>一般需要根据任务的类型来配置线程池大小：</p>\n<p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1<br>如果是IO密集型任务，参考值可以设置为2*NCPU</p>\n<p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>\n<h1 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h1><p>下面这段引用来自阿里的java开发规范</p>\n<blockquote>\n<p>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。Executors 返回的线程池对象的弊端如下,FixedThreadPool和SingleThreadPool允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。CachedThreadPool和ScheduledThreadPool允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</p>\n</blockquote>\n<p>建议使用有界队列，有界队列能增加系统的稳定性和预警能力，可以根据需要设大一点，比如几千。有一次我们组使用的后台任务线程池的队列和线程池全满了，不断的抛出抛弃任务的异常，通过排查发现是数据库出现了问题，导致执行SQL变得非常缓慢，因为后台任务线程池里的任务全是需要向数据库查询和插入数据的，所以导致线程池里的工作线程全部阻塞住，任务积压在线程池里。如果当时我们设置成无界队列，线程池的队列就会越来越多，有可能会撑满内存，导致整个系统不可用，而不只是后台任务出现问题。当然我们的系统所有的任务是用的单独的服务器部署的，而我们使用不同规模的线程池跑不同类型的任务，但是出现这样问题时也会影响到其他任务。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://stormzhang.com/java/2013/11/08/java-thread-pool/\" target=\"_blank\">JAVA THREAD POOL</a><br><a href=\"http://www.cnblogs.com/dolphin0520/p/3932921.html\" target=\"_blank\">Java并发编程：线程池的使用（很细致的好文章）</a><br><a href=\"http://www.infoq.com/cn/articles/java-threadPool\" target=\"_blank\">聊聊并发（三）——JAVA线程池的分析和使用</a></p>\n"},{"title":"Java多线程——生产者和消费者模式","date":"2016-08-15T14:23:14.000Z","_content":"生产者和消费者模式是一种并发设计模式，生产者消费者模式解决的是两者速率不一致而产生的阻抗不匹配，该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。\n\n# 生产者消费者模式\n\n生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。\n\n# 为什么要使用生产者和消费者模式\n\n在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。\n\n\n# 优点\n\n* 可以独立地同时编码生产者和消费者，他们只需要知道共享对象即可。\n\n* 生产者不需要知道谁是消费者或有多少消费者，消费者也是如此。\n\n* 生产者和消费者可以以不同的速度工作，消费者没有消费半成品的风险。\n\n* 分离生产者和消费者的功能导致更干净，可读和易于管理的代码。\n\n\n# 应用\n\nExecutor框架本身也实现了生产者和消费者模式，在线程池中，如果任务数多于基本线程数时，会将任务放到阻塞队列中来平衡生产者和消费者的处理能力，关于线程池的介绍可以看我的另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61671858\" target=\"_blank\">java——线程池</a>\n\n# 示例代码\n\n## 用阻塞队列实现\n\n先用阻塞队列来实现，BlockingQueue 是个继承Queue接口的接口，该接口有不同的实现，比如ArrayBlockingQueue 和 LinkedBlockingQueue，他们都实现了 FIFO。\n\n用LinkedBlockingQueue实现生产者和消费者模式如下。\n\n```java\npublic class ProducerConsumerPractice {\n\n    public static void main(String[] args){\n\n        LinkedBlockingDeque<Integer> linkedBlockingDeque = new LinkedBlockingDeque<>(5);\n        new Thread(new Producer(linkedBlockingDeque)).start();\n        new Thread(new Consumer(linkedBlockingDeque)).start();\n    }\n}\n\nclass Producer implements Runnable{\n\n    private LinkedBlockingDeque<Integer> linkedBlockingDeque;\n\n    public Producer(LinkedBlockingDeque<Integer> linkedBlockingDeque){\n        this.linkedBlockingDeque = linkedBlockingDeque;\n    }\n\n    public void run(){\n        for(int i = 0; i < 10; i++){\n            try {\n                //Thread.sleep(500);\n                linkedBlockingDeque.put(i);\n                System.out.println(\"Producer: \" + i);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\nclass Consumer implements Runnable{\n\n    private LinkedBlockingDeque<Integer> linkedBlockingDeque;\n\n    public Consumer(LinkedBlockingDeque<Integer> linkedBlockingDeque){\n        this.linkedBlockingDeque = linkedBlockingDeque;\n    }\n\n    public void run(){\n        while(true){\n            try{\n                Thread.sleep(500);\n                System.out.println(\"consumer: \" + linkedBlockingDeque.take());\n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n运行结果：\n\n```java\nProducer: 0\nProducer: 1\nProducer: 2\nProducer: 3\nProducer: 4\nconsumer: 0\nProducer: 5\nconsumer: 1\nProducer: 6\nconsumer: 2\nProducer: 7\nconsumer: 3\nProducer: 8\nconsumer: 4\nProducer: 9\nconsumer: 5\nconsumer: 6\nconsumer: 7\nconsumer: 8\nconsumer: 9\n```\n我设置了阻塞队列的初始长度为5，然后用sleep（500）调慢了消费速度，所以我们在运行结果中可以看到生产0-4后，队列满了，生产者被阻塞了，然后消费者根据FIFO原则先消费了0，所以生产者又可以继续生产了。在ide中运行看的会更清楚些，第二种方式实现打印的结果会更明白。\n\n## 用wait(), notify() 实现\n\n之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61963579\" target=\"_blank\">线程间协作——wait、notify、notifyAll</a> 讲了 wait(), notify（），notifyAll()的用法，现在用他们来实现生产者和消费者模式，当做补充例子吧。这里用 Vector 模拟队列，因为这个队列没有阻塞功能，所以要用wait()和 notify（）模拟队列满时生产者和队列为空时消费者的阻塞，以及正常情况下互相通知对方的效果。\n\n代码中同样调慢了消费速度，为了看的更清晰。\n\n```java\npublic class ProducerConsumerPractice {\n\n    public static void main(String[] args){\n\n        Vector<Integer> vector = new Vector<>(5);\n        new Thread(new Producer(vector)).start();\n        new Thread(new Consumer(vector)).start();\n    }\n}\n\n\nclass Producer implements Runnable{\n\n    private Vector<Integer> vector;\n\n    public Producer(Vector vector){\n        this.vector = vector;\n    }\n\n    public void run(){\n        for(int i = 0; i < 10; i++){\n            while(vector.size() == vector.capacity()){\n                synchronized (vector){\n                    System.out.println(\"Queue is full, Producer  is waiting , size: \" + vector.size());\n                    try {\n                        vector.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            synchronized (vector){\n                vector.add(i);\n                System.out.println(\"Producer: \" + i);\n                vector.notifyAll();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable{\n\n    private Vector<Integer> vector;\n\n    public Consumer(Vector vector){\n        this.vector = vector;\n    }\n\n    public void run(){\n        while(true){\n            while(vector.isEmpty()){\n                synchronized (vector){\n                    System.out.println(\"Queue is empty, Consumer is waiting , size: \" + vector.size());\n                    try {\n                        vector.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n            }\n            //调慢消费速度\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            synchronized (vector){\n                System.out.println(\"Consumer: \" + vector.remove(0));\n                vector.notifyAll();\n            }\n        }\n    }\n\n}\n\n```\n\n运行结果：\n\n```java\nProducer: 0\nProducer: 1\nProducer: 2\nProducer: 3\nProducer: 4\nQueue is full, Producer  is waiting , size: 5\nConsumer: 0\nProducer: 5\nQueue is full, Producer  is waiting , size: 5\nConsumer: 1\nProducer: 6\nQueue is full, Producer  is waiting , size: 5\nConsumer: 2\nProducer: 7\nQueue is full, Producer  is waiting , size: 5\nConsumer: 3\nProducer: 8\nQueue is full, Producer  is waiting , size: 5\nConsumer: 4\nProducer: 9\nConsumer: 5\nConsumer: 6\nConsumer: 7\nConsumer: 8\nConsumer: 9\nQueue is empty, Consumer is waiting , size: 0\n```\n\n# 参考资料\n<a href=\"http://www.infoq.com/cn/articles/producers-and-consumers-mode\" target=\"_blank\">聊聊并发——生产者消费者模式</a>\n<a href=\"http://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html#ixzz4bbane200\" target=\"_blank\">Producer Consumer Problem with Wait and Notify Example</a>\n\n\n","source":"_posts/Java多线程——生产者和消费者模式.md","raw":"---\ntitle: Java多线程——生产者和消费者模式\ndate: 2016-08-15 22:23:14\ncategories: Java\ntags: Java多线程\n---\n生产者和消费者模式是一种并发设计模式，生产者消费者模式解决的是两者速率不一致而产生的阻抗不匹配，该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。\n\n# 生产者消费者模式\n\n生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。\n\n# 为什么要使用生产者和消费者模式\n\n在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。\n\n\n# 优点\n\n* 可以独立地同时编码生产者和消费者，他们只需要知道共享对象即可。\n\n* 生产者不需要知道谁是消费者或有多少消费者，消费者也是如此。\n\n* 生产者和消费者可以以不同的速度工作，消费者没有消费半成品的风险。\n\n* 分离生产者和消费者的功能导致更干净，可读和易于管理的代码。\n\n\n# 应用\n\nExecutor框架本身也实现了生产者和消费者模式，在线程池中，如果任务数多于基本线程数时，会将任务放到阻塞队列中来平衡生产者和消费者的处理能力，关于线程池的介绍可以看我的另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61671858\" target=\"_blank\">java——线程池</a>\n\n# 示例代码\n\n## 用阻塞队列实现\n\n先用阻塞队列来实现，BlockingQueue 是个继承Queue接口的接口，该接口有不同的实现，比如ArrayBlockingQueue 和 LinkedBlockingQueue，他们都实现了 FIFO。\n\n用LinkedBlockingQueue实现生产者和消费者模式如下。\n\n```java\npublic class ProducerConsumerPractice {\n\n    public static void main(String[] args){\n\n        LinkedBlockingDeque<Integer> linkedBlockingDeque = new LinkedBlockingDeque<>(5);\n        new Thread(new Producer(linkedBlockingDeque)).start();\n        new Thread(new Consumer(linkedBlockingDeque)).start();\n    }\n}\n\nclass Producer implements Runnable{\n\n    private LinkedBlockingDeque<Integer> linkedBlockingDeque;\n\n    public Producer(LinkedBlockingDeque<Integer> linkedBlockingDeque){\n        this.linkedBlockingDeque = linkedBlockingDeque;\n    }\n\n    public void run(){\n        for(int i = 0; i < 10; i++){\n            try {\n                //Thread.sleep(500);\n                linkedBlockingDeque.put(i);\n                System.out.println(\"Producer: \" + i);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n}\n\nclass Consumer implements Runnable{\n\n    private LinkedBlockingDeque<Integer> linkedBlockingDeque;\n\n    public Consumer(LinkedBlockingDeque<Integer> linkedBlockingDeque){\n        this.linkedBlockingDeque = linkedBlockingDeque;\n    }\n\n    public void run(){\n        while(true){\n            try{\n                Thread.sleep(500);\n                System.out.println(\"consumer: \" + linkedBlockingDeque.take());\n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n运行结果：\n\n```java\nProducer: 0\nProducer: 1\nProducer: 2\nProducer: 3\nProducer: 4\nconsumer: 0\nProducer: 5\nconsumer: 1\nProducer: 6\nconsumer: 2\nProducer: 7\nconsumer: 3\nProducer: 8\nconsumer: 4\nProducer: 9\nconsumer: 5\nconsumer: 6\nconsumer: 7\nconsumer: 8\nconsumer: 9\n```\n我设置了阻塞队列的初始长度为5，然后用sleep（500）调慢了消费速度，所以我们在运行结果中可以看到生产0-4后，队列满了，生产者被阻塞了，然后消费者根据FIFO原则先消费了0，所以生产者又可以继续生产了。在ide中运行看的会更清楚些，第二种方式实现打印的结果会更明白。\n\n## 用wait(), notify() 实现\n\n之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61963579\" target=\"_blank\">线程间协作——wait、notify、notifyAll</a> 讲了 wait(), notify（），notifyAll()的用法，现在用他们来实现生产者和消费者模式，当做补充例子吧。这里用 Vector 模拟队列，因为这个队列没有阻塞功能，所以要用wait()和 notify（）模拟队列满时生产者和队列为空时消费者的阻塞，以及正常情况下互相通知对方的效果。\n\n代码中同样调慢了消费速度，为了看的更清晰。\n\n```java\npublic class ProducerConsumerPractice {\n\n    public static void main(String[] args){\n\n        Vector<Integer> vector = new Vector<>(5);\n        new Thread(new Producer(vector)).start();\n        new Thread(new Consumer(vector)).start();\n    }\n}\n\n\nclass Producer implements Runnable{\n\n    private Vector<Integer> vector;\n\n    public Producer(Vector vector){\n        this.vector = vector;\n    }\n\n    public void run(){\n        for(int i = 0; i < 10; i++){\n            while(vector.size() == vector.capacity()){\n                synchronized (vector){\n                    System.out.println(\"Queue is full, Producer  is waiting , size: \" + vector.size());\n                    try {\n                        vector.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            synchronized (vector){\n                vector.add(i);\n                System.out.println(\"Producer: \" + i);\n                vector.notifyAll();\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable{\n\n    private Vector<Integer> vector;\n\n    public Consumer(Vector vector){\n        this.vector = vector;\n    }\n\n    public void run(){\n        while(true){\n            while(vector.isEmpty()){\n                synchronized (vector){\n                    System.out.println(\"Queue is empty, Consumer is waiting , size: \" + vector.size());\n                    try {\n                        vector.wait();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n            }\n            //调慢消费速度\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            synchronized (vector){\n                System.out.println(\"Consumer: \" + vector.remove(0));\n                vector.notifyAll();\n            }\n        }\n    }\n\n}\n\n```\n\n运行结果：\n\n```java\nProducer: 0\nProducer: 1\nProducer: 2\nProducer: 3\nProducer: 4\nQueue is full, Producer  is waiting , size: 5\nConsumer: 0\nProducer: 5\nQueue is full, Producer  is waiting , size: 5\nConsumer: 1\nProducer: 6\nQueue is full, Producer  is waiting , size: 5\nConsumer: 2\nProducer: 7\nQueue is full, Producer  is waiting , size: 5\nConsumer: 3\nProducer: 8\nQueue is full, Producer  is waiting , size: 5\nConsumer: 4\nProducer: 9\nConsumer: 5\nConsumer: 6\nConsumer: 7\nConsumer: 8\nConsumer: 9\nQueue is empty, Consumer is waiting , size: 0\n```\n\n# 参考资料\n<a href=\"http://www.infoq.com/cn/articles/producers-and-consumers-mode\" target=\"_blank\">聊聊并发——生产者消费者模式</a>\n<a href=\"http://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html#ixzz4bbane200\" target=\"_blank\">Producer Consumer Problem with Wait and Notify Example</a>\n\n\n","slug":"Java多线程——生产者和消费者模式","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27900096c9kb7aimeu3","content":"<p>生产者和消费者模式是一种并发设计模式，生产者消费者模式解决的是两者速率不一致而产生的阻抗不匹配，该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</p>\n<h1 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h1><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>\n<h1 id=\"为什么要使用生产者和消费者模式\"><a href=\"#为什么要使用生产者和消费者模式\" class=\"headerlink\" title=\"为什么要使用生产者和消费者模式\"></a>为什么要使用生产者和消费者模式</h1><p>在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li><p>可以独立地同时编码生产者和消费者，他们只需要知道共享对象即可。</p>\n</li>\n<li><p>生产者不需要知道谁是消费者或有多少消费者，消费者也是如此。</p>\n</li>\n<li><p>生产者和消费者可以以不同的速度工作，消费者没有消费半成品的风险。</p>\n</li>\n<li><p>分离生产者和消费者的功能导致更干净，可读和易于管理的代码。</p>\n</li>\n</ul>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>Executor框架本身也实现了生产者和消费者模式，在线程池中，如果任务数多于基本线程数时，会将任务放到阻塞队列中来平衡生产者和消费者的处理能力，关于线程池的介绍可以看我的另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61671858\" target=\"_blank\">java——线程池</a></p>\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><h2 id=\"用阻塞队列实现\"><a href=\"#用阻塞队列实现\" class=\"headerlink\" title=\"用阻塞队列实现\"></a>用阻塞队列实现</h2><p>先用阻塞队列来实现，BlockingQueue 是个继承Queue接口的接口，该接口有不同的实现，比如ArrayBlockingQueue 和 LinkedBlockingQueue，他们都实现了 FIFO。</p>\n<p>用LinkedBlockingQueue实现生产者和消费者模式如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque = <span class=\"keyword\">new</span> LinkedBlockingDeque&lt;&gt;(<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Producer(linkedBlockingDeque)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(linkedBlockingDeque)).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.linkedBlockingDeque = linkedBlockingDeque;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//Thread.sleep(500);</span></div><div class=\"line\">                linkedBlockingDeque.put(i);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Producer: \"</span> + i);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.linkedBlockingDeque = linkedBlockingDeque;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"consumer: \"</span> + linkedBlockingDeque.take());</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Producer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">4</span></div><div class=\"line\">consumer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">5</span></div><div class=\"line\">consumer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">6</span></div><div class=\"line\">consumer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">7</span></div><div class=\"line\">consumer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">8</span></div><div class=\"line\">consumer: <span class=\"number\">4</span></div><div class=\"line\">Producer: <span class=\"number\">9</span></div><div class=\"line\">consumer: <span class=\"number\">5</span></div><div class=\"line\">consumer: <span class=\"number\">6</span></div><div class=\"line\">consumer: <span class=\"number\">7</span></div><div class=\"line\">consumer: <span class=\"number\">8</span></div><div class=\"line\">consumer: <span class=\"number\">9</span></div></pre></td></tr></table></figure>\n<p>我设置了阻塞队列的初始长度为5，然后用sleep（500）调慢了消费速度，所以我们在运行结果中可以看到生产0-4后，队列满了，生产者被阻塞了，然后消费者根据FIFO原则先消费了0，所以生产者又可以继续生产了。在ide中运行看的会更清楚些，第二种方式实现打印的结果会更明白。</p>\n<h2 id=\"用wait-notify-实现\"><a href=\"#用wait-notify-实现\" class=\"headerlink\" title=\"用wait(), notify() 实现\"></a>用wait(), notify() 实现</h2><p>之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61963579\" target=\"_blank\">线程间协作——wait、notify、notifyAll</a> 讲了 wait(), notify（），notifyAll()的用法，现在用他们来实现生产者和消费者模式，当做补充例子吧。这里用 Vector 模拟队列，因为这个队列没有阻塞功能，所以要用wait()和 notify（）模拟队列满时生产者和队列为空时消费者的阻塞，以及正常情况下互相通知对方的效果。</p>\n<p>代码中同样调慢了消费速度，为了看的更清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Vector&lt;Integer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;&gt;(<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Producer(vector)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(vector)).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Integer&gt; vector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(Vector vector)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.vector = vector;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(vector.size() == vector.capacity())&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is full, Producer  is waiting , size: \"</span> + vector.size());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        vector.wait();</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                vector.add(i);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Producer: \"</span> + i);</div><div class=\"line\">                vector.notifyAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Integer&gt; vector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(Vector vector)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.vector = vector;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(vector.isEmpty())&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is empty, Consumer is waiting , size: \"</span> + vector.size());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        vector.wait();</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//调慢消费速度</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer: \"</span> + vector.remove(<span class=\"number\">0</span>));</div><div class=\"line\">                vector.notifyAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Producer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">4</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">5</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">6</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">7</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">8</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">4</span></div><div class=\"line\">Producer: <span class=\"number\">9</span></div><div class=\"line\">Consumer: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">6</span></div><div class=\"line\">Consumer: <span class=\"number\">7</span></div><div class=\"line\">Consumer: <span class=\"number\">8</span></div><div class=\"line\">Consumer: <span class=\"number\">9</span></div><div class=\"line\">Queue is empty, Consumer is waiting , size: <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.infoq.com/cn/articles/producers-and-consumers-mode\" target=\"_blank\">聊聊并发——生产者消费者模式</a><br><a href=\"http://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html#ixzz4bbane200\" target=\"_blank\">Producer Consumer Problem with Wait and Notify Example</a></p>\n","excerpt":"","more":"<p>生产者和消费者模式是一种并发设计模式，生产者消费者模式解决的是两者速率不一致而产生的阻抗不匹配，该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</p>\n<h1 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h1><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>\n<h1 id=\"为什么要使用生产者和消费者模式\"><a href=\"#为什么要使用生产者和消费者模式\" class=\"headerlink\" title=\"为什么要使用生产者和消费者模式\"></a>为什么要使用生产者和消费者模式</h1><p>在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li><p>可以独立地同时编码生产者和消费者，他们只需要知道共享对象即可。</p>\n</li>\n<li><p>生产者不需要知道谁是消费者或有多少消费者，消费者也是如此。</p>\n</li>\n<li><p>生产者和消费者可以以不同的速度工作，消费者没有消费半成品的风险。</p>\n</li>\n<li><p>分离生产者和消费者的功能导致更干净，可读和易于管理的代码。</p>\n</li>\n</ul>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>Executor框架本身也实现了生产者和消费者模式，在线程池中，如果任务数多于基本线程数时，会将任务放到阻塞队列中来平衡生产者和消费者的处理能力，关于线程池的介绍可以看我的另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61671858\" target=\"_blank\">java——线程池</a></p>\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><h2 id=\"用阻塞队列实现\"><a href=\"#用阻塞队列实现\" class=\"headerlink\" title=\"用阻塞队列实现\"></a>用阻塞队列实现</h2><p>先用阻塞队列来实现，BlockingQueue 是个继承Queue接口的接口，该接口有不同的实现，比如ArrayBlockingQueue 和 LinkedBlockingQueue，他们都实现了 FIFO。</p>\n<p>用LinkedBlockingQueue实现生产者和消费者模式如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque = <span class=\"keyword\">new</span> LinkedBlockingDeque&lt;&gt;(<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Producer(linkedBlockingDeque)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(linkedBlockingDeque)).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.linkedBlockingDeque = linkedBlockingDeque;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//Thread.sleep(500);</span></div><div class=\"line\">                linkedBlockingDeque.put(i);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Producer: \"</span> + i);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(LinkedBlockingDeque&lt;Integer&gt; linkedBlockingDeque)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.linkedBlockingDeque = linkedBlockingDeque;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"consumer: \"</span> + linkedBlockingDeque.take());</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Producer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">4</span></div><div class=\"line\">consumer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">5</span></div><div class=\"line\">consumer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">6</span></div><div class=\"line\">consumer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">7</span></div><div class=\"line\">consumer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">8</span></div><div class=\"line\">consumer: <span class=\"number\">4</span></div><div class=\"line\">Producer: <span class=\"number\">9</span></div><div class=\"line\">consumer: <span class=\"number\">5</span></div><div class=\"line\">consumer: <span class=\"number\">6</span></div><div class=\"line\">consumer: <span class=\"number\">7</span></div><div class=\"line\">consumer: <span class=\"number\">8</span></div><div class=\"line\">consumer: <span class=\"number\">9</span></div></pre></td></tr></table></figure>\n<p>我设置了阻塞队列的初始长度为5，然后用sleep（500）调慢了消费速度，所以我们在运行结果中可以看到生产0-4后，队列满了，生产者被阻塞了，然后消费者根据FIFO原则先消费了0，所以生产者又可以继续生产了。在ide中运行看的会更清楚些，第二种方式实现打印的结果会更明白。</p>\n<h2 id=\"用wait-notify-实现\"><a href=\"#用wait-notify-实现\" class=\"headerlink\" title=\"用wait(), notify() 实现\"></a>用wait(), notify() 实现</h2><p>之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61963579\" target=\"_blank\">线程间协作——wait、notify、notifyAll</a> 讲了 wait(), notify（），notifyAll()的用法，现在用他们来实现生产者和消费者模式，当做补充例子吧。这里用 Vector 模拟队列，因为这个队列没有阻塞功能，所以要用wait()和 notify（）模拟队列满时生产者和队列为空时消费者的阻塞，以及正常情况下互相通知对方的效果。</p>\n<p>代码中同样调慢了消费速度，为了看的更清晰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProducerConsumerPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Vector&lt;Integer&gt; vector = <span class=\"keyword\">new</span> Vector&lt;&gt;(<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Producer(vector)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Consumer(vector)).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Integer&gt; vector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(Vector vector)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.vector = vector;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(vector.size() == vector.capacity())&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is full, Producer  is waiting , size: \"</span> + vector.size());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        vector.wait();</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                vector.add(i);</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Producer: \"</span> + i);</div><div class=\"line\">                vector.notifyAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Vector&lt;Integer&gt; vector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(Vector vector)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.vector = vector;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(vector.isEmpty())&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Queue is empty, Consumer is waiting , size: \"</span> + vector.size());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        vector.wait();</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//调慢消费速度</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (vector)&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Consumer: \"</span> + vector.remove(<span class=\"number\">0</span>));</div><div class=\"line\">                vector.notifyAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Producer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">4</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">0</span></div><div class=\"line\">Producer: <span class=\"number\">5</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">1</span></div><div class=\"line\">Producer: <span class=\"number\">6</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">2</span></div><div class=\"line\">Producer: <span class=\"number\">7</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">3</span></div><div class=\"line\">Producer: <span class=\"number\">8</span></div><div class=\"line\">Queue is full, Producer  is waiting , size: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">4</span></div><div class=\"line\">Producer: <span class=\"number\">9</span></div><div class=\"line\">Consumer: <span class=\"number\">5</span></div><div class=\"line\">Consumer: <span class=\"number\">6</span></div><div class=\"line\">Consumer: <span class=\"number\">7</span></div><div class=\"line\">Consumer: <span class=\"number\">8</span></div><div class=\"line\">Consumer: <span class=\"number\">9</span></div><div class=\"line\">Queue is empty, Consumer is waiting , size: <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.infoq.com/cn/articles/producers-and-consumers-mode\" target=\"_blank\">聊聊并发——生产者消费者模式</a><br><a href=\"http://www.java67.com/2012/12/producer-consumer-problem-with-wait-and-notify-example.html#ixzz4bbane200\" target=\"_blank\">Producer Consumer Problem with Wait and Notify Example</a></p>\n"},{"title":"Nginx的 http_image_filter_module 模块使用说明","date":"2016-11-22T11:20:14.000Z","_content":"# Nginx的 http_image_filter_module 模块使用说明\n\n# Nginx图片处理原理\n这里需要用到 nginx的 http_image_filter_module 模块，这个模块可以很方便的实现图片缩放功能，只是默认的情况下并不会安装，需要自己编译安装才能行。编译的时候./configure 增加 –with-http_image_filter_module 编译安装即可\n\n# Nginx图片处理的优缺点\n\n## 优点\n\n1. 操作简单。通过简单配置，省去了后端裁剪程序的复杂性。\n2. 实时裁剪。可以实时访问在线裁剪图片。\n3. 灵活性强。后端程序裁剪图片时需要知道裁剪图片的尺寸和质量，使用nginx裁剪可以实时裁剪任意尺寸的图片。\n4. 不占用硬盘空间。\n \n## 缺点\n\n1. 消耗CPU和内存，访问量大的时候就会给服务器带来很大的负担。(可以通过使用Nginx缓存和缓存服务器来解决)\n\n2. 功能不是很强大，支持的处理图片类型只包括JPEG, GIF, PNG, or WebP\n\n# Nginx图片处理模块指令使用\n## image_filter （重要）\n设置要在图像上执行的转换类型\n\nSyntax: | image_filter off;\n-------- |-------------------\n        | image_filter test;\n          |image_filter size;\n  \t\t\t|image_filter rotate 90/180/270;\n \t\t\t|image_filter resize width height;\n \t\t\t|image_filter crop width height;\nDefault: | image_filter off;\nContext: | location\n\n\n### test\n\n确保响应图片是JPEG、GIF，WEBP或PNG格式，否则返回415错误码。\n \n### size\n\n```java \noutputs information about images in a JSON format, e.g.:\n \n{ \"img\" : { \"width\": 100, \"height\": 100, \"type\": \"gif\" } }\n \nIn case of an error, the output is as follows:\n \n{}\n```\n以 json 格式返回原图的尺寸和类型\n\n### rotate\n\n逆时针旋转指定角度，只能指定这三个角度。参数值可以包含变量，这个模式可以单独使用也可以和resize、crop变换同时使用。\n\n### resize width height\n\n按比例对图像进行缩放，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在缩放之后。图片会以长的一边为标准，然后等比缩放。\n\n### crop width height\n按比例裁剪图片，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在裁剪之前。图片会以长的一边为标准，然后等比缩放，然后裁剪掉多余的部分。\n\n### image_filter_buffer\n 设置用于读取图像的缓冲区的最大大小  \n \nSyntax:\t|image_filter_buffer size;\n----------|-----------------\nDefault:\t|image_filter_buffer 1M;\nContext:\t|http, server, location\n\n设置读取图片的最大缓冲区大小。当超过缓冲区大小时，返回 error 415 (Unsupported Media Type).\n\n### image_filter_interlace\n 如果启用，最终图像将隔行扫描\n \nSyntax:\t|image_filter_interlace on / off;\n---------|-----------\nDefault:\t|image_filter_interlace off;\nContext:\t|http, server, location\n\n如果开启此功能，最终的图像是交错的。对于JPEG，最终图片是“渐进式JPEG”格式。图片一般是线性加载，设置后则变为交替加载图片。渐进式jpeg效果参见：http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/\n\n### image_filter_jpeg_quality\n设置转换JPEG图像的质量\n\nSyntax:\t|image_filter_jpeg_quality quality;\n----------|---------------\nDefault:\t|image_filter_jpeg_quality 75;\nContext:\t|http, server, location\n\n设置转为JPEG图像的质量。接受的值从1到100。较小的值意味着低质的图片质量和更少的数据传输量。最大建议的值是95。参数可以包含变量。\n\n### image_filter_sharpen \n通过设置锐化度，增加最终图像的清晰度。\n\nSyntax:\t|image_filter_sharpen percent;\n--------|--------------\nDefault:\t|image_filter_sharpen 0;\nContext:\t|http, server, location\n\n增加最终图片的锐度。这个百分比可以超过100。0值禁用此功能。参数可以包含变量。\n\n### image_filter_transparency\n定义是否透明度时应保留转换GIF图像或PNG图像的调色板中指定的颜色。\n\n\nSyntax:\t|  image_filter_transparency on/off;\n----------|------------------\nDefault:\t|  image_filter_transparency on;\nContext:\t|  http, server, location\n\n决定在转换GIF或PNG图片带有调色板定义的颜色时，透明是否会保留。丢失透明度可以是图片得到更好的质量。PNG的Alpha通道的透明总是会保留。\n\n### image_filter_webp_quality\n设置转化WebP图像所需的质量\n\nSyntax:  |image_filter_webp_quality quality;\n---------|------------------------   \nDefault: | image_filter_webp_quality 80;\nContext: | http, server, location\n\n设置转为webp图像的质量。\n\nThis directive appeared in version 1.11.6.\n\n# 局限性\n1. Nginx 的图片处理模块，暂时没有看到官方发布的能够给图片加水印功能的模块，在github上看到有人写了些这样的扩展功能，参见 `https://github.com/3078825/ngx_image_thumb`\n \n2. Nginx 的实时性和访问的方便性上，GraphicsMagick 是无法比拟的，但是 GraphicsMagick 对图片的处理的功能要比nginx强大很多，比如nginx不能将图片旋转任意角度，不能在图片上加水印，处理图片类型有限等，相对nginx，GraphicsMagick 更适合对图片的异步处理。\n\n# 参考文献\n<a href=\"http://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\">Module ngx_http_image_filter_module</a>\n","source":"_posts/Nginx的 http_image_filter_module 模块使用说明.md","raw":"---\ntitle: Nginx的 http_image_filter_module 模块使用说明\ndate: 2016-11-22 19:20:14\ncategories: Nginx\ntags: Nginx\n---\n# Nginx的 http_image_filter_module 模块使用说明\n\n# Nginx图片处理原理\n这里需要用到 nginx的 http_image_filter_module 模块，这个模块可以很方便的实现图片缩放功能，只是默认的情况下并不会安装，需要自己编译安装才能行。编译的时候./configure 增加 –with-http_image_filter_module 编译安装即可\n\n# Nginx图片处理的优缺点\n\n## 优点\n\n1. 操作简单。通过简单配置，省去了后端裁剪程序的复杂性。\n2. 实时裁剪。可以实时访问在线裁剪图片。\n3. 灵活性强。后端程序裁剪图片时需要知道裁剪图片的尺寸和质量，使用nginx裁剪可以实时裁剪任意尺寸的图片。\n4. 不占用硬盘空间。\n \n## 缺点\n\n1. 消耗CPU和内存，访问量大的时候就会给服务器带来很大的负担。(可以通过使用Nginx缓存和缓存服务器来解决)\n\n2. 功能不是很强大，支持的处理图片类型只包括JPEG, GIF, PNG, or WebP\n\n# Nginx图片处理模块指令使用\n## image_filter （重要）\n设置要在图像上执行的转换类型\n\nSyntax: | image_filter off;\n-------- |-------------------\n        | image_filter test;\n          |image_filter size;\n  \t\t\t|image_filter rotate 90/180/270;\n \t\t\t|image_filter resize width height;\n \t\t\t|image_filter crop width height;\nDefault: | image_filter off;\nContext: | location\n\n\n### test\n\n确保响应图片是JPEG、GIF，WEBP或PNG格式，否则返回415错误码。\n \n### size\n\n```java \noutputs information about images in a JSON format, e.g.:\n \n{ \"img\" : { \"width\": 100, \"height\": 100, \"type\": \"gif\" } }\n \nIn case of an error, the output is as follows:\n \n{}\n```\n以 json 格式返回原图的尺寸和类型\n\n### rotate\n\n逆时针旋转指定角度，只能指定这三个角度。参数值可以包含变量，这个模式可以单独使用也可以和resize、crop变换同时使用。\n\n### resize width height\n\n按比例对图像进行缩放，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在缩放之后。图片会以长的一边为标准，然后等比缩放。\n\n### crop width height\n按比例裁剪图片，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在裁剪之前。图片会以长的一边为标准，然后等比缩放，然后裁剪掉多余的部分。\n\n### image_filter_buffer\n 设置用于读取图像的缓冲区的最大大小  \n \nSyntax:\t|image_filter_buffer size;\n----------|-----------------\nDefault:\t|image_filter_buffer 1M;\nContext:\t|http, server, location\n\n设置读取图片的最大缓冲区大小。当超过缓冲区大小时，返回 error 415 (Unsupported Media Type).\n\n### image_filter_interlace\n 如果启用，最终图像将隔行扫描\n \nSyntax:\t|image_filter_interlace on / off;\n---------|-----------\nDefault:\t|image_filter_interlace off;\nContext:\t|http, server, location\n\n如果开启此功能，最终的图像是交错的。对于JPEG，最终图片是“渐进式JPEG”格式。图片一般是线性加载，设置后则变为交替加载图片。渐进式jpeg效果参见：http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/\n\n### image_filter_jpeg_quality\n设置转换JPEG图像的质量\n\nSyntax:\t|image_filter_jpeg_quality quality;\n----------|---------------\nDefault:\t|image_filter_jpeg_quality 75;\nContext:\t|http, server, location\n\n设置转为JPEG图像的质量。接受的值从1到100。较小的值意味着低质的图片质量和更少的数据传输量。最大建议的值是95。参数可以包含变量。\n\n### image_filter_sharpen \n通过设置锐化度，增加最终图像的清晰度。\n\nSyntax:\t|image_filter_sharpen percent;\n--------|--------------\nDefault:\t|image_filter_sharpen 0;\nContext:\t|http, server, location\n\n增加最终图片的锐度。这个百分比可以超过100。0值禁用此功能。参数可以包含变量。\n\n### image_filter_transparency\n定义是否透明度时应保留转换GIF图像或PNG图像的调色板中指定的颜色。\n\n\nSyntax:\t|  image_filter_transparency on/off;\n----------|------------------\nDefault:\t|  image_filter_transparency on;\nContext:\t|  http, server, location\n\n决定在转换GIF或PNG图片带有调色板定义的颜色时，透明是否会保留。丢失透明度可以是图片得到更好的质量。PNG的Alpha通道的透明总是会保留。\n\n### image_filter_webp_quality\n设置转化WebP图像所需的质量\n\nSyntax:  |image_filter_webp_quality quality;\n---------|------------------------   \nDefault: | image_filter_webp_quality 80;\nContext: | http, server, location\n\n设置转为webp图像的质量。\n\nThis directive appeared in version 1.11.6.\n\n# 局限性\n1. Nginx 的图片处理模块，暂时没有看到官方发布的能够给图片加水印功能的模块，在github上看到有人写了些这样的扩展功能，参见 `https://github.com/3078825/ngx_image_thumb`\n \n2. Nginx 的实时性和访问的方便性上，GraphicsMagick 是无法比拟的，但是 GraphicsMagick 对图片的处理的功能要比nginx强大很多，比如nginx不能将图片旋转任意角度，不能在图片上加水印，处理图片类型有限等，相对nginx，GraphicsMagick 更适合对图片的异步处理。\n\n# 参考文献\n<a href=\"http://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\">Module ngx_http_image_filter_module</a>\n","slug":"Nginx的 http_image_filter_module 模块使用说明","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27b000a6c9kjich6u5x","content":"<h1 id=\"Nginx的-http-image-filter-module-模块使用说明\"><a href=\"#Nginx的-http-image-filter-module-模块使用说明\" class=\"headerlink\" title=\"Nginx的 http_image_filter_module 模块使用说明\"></a>Nginx的 http_image_filter_module 模块使用说明</h1><h1 id=\"Nginx图片处理原理\"><a href=\"#Nginx图片处理原理\" class=\"headerlink\" title=\"Nginx图片处理原理\"></a>Nginx图片处理原理</h1><p>这里需要用到 nginx的 http_image_filter_module 模块，这个模块可以很方便的实现图片缩放功能，只是默认的情况下并不会安装，需要自己编译安装才能行。编译的时候./configure 增加 –with-http_image_filter_module 编译安装即可</p>\n<h1 id=\"Nginx图片处理的优缺点\"><a href=\"#Nginx图片处理的优缺点\" class=\"headerlink\" title=\"Nginx图片处理的优缺点\"></a>Nginx图片处理的优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>操作简单。通过简单配置，省去了后端裁剪程序的复杂性。</li>\n<li>实时裁剪。可以实时访问在线裁剪图片。</li>\n<li>灵活性强。后端程序裁剪图片时需要知道裁剪图片的尺寸和质量，使用nginx裁剪可以实时裁剪任意尺寸的图片。</li>\n<li>不占用硬盘空间。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li><p>消耗CPU和内存，访问量大的时候就会给服务器带来很大的负担。(可以通过使用Nginx缓存和缓存服务器来解决)</p>\n</li>\n<li><p>功能不是很强大，支持的处理图片类型只包括JPEG, GIF, PNG, or WebP</p>\n</li>\n</ol>\n<h1 id=\"Nginx图片处理模块指令使用\"><a href=\"#Nginx图片处理模块指令使用\" class=\"headerlink\" title=\"Nginx图片处理模块指令使用\"></a>Nginx图片处理模块指令使用</h1><h2 id=\"image-filter-（重要）\"><a href=\"#image-filter-（重要）\" class=\"headerlink\" title=\"image_filter （重要）\"></a>image_filter （重要）</h2><p>设置要在图像上执行的转换类型</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>image_filter test;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter size;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter rotate 90/180/270;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter resize width height;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter crop width height;</td>\n</tr>\n<tr>\n<td>Default:</td>\n<td>image_filter off;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>location</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><p>确保响应图片是JPEG、GIF，WEBP或PNG格式，否则返回415错误码。</p>\n<h3 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">outputs information about images in a JSON format, e.g.:</div><div class=\"line\"> </div><div class=\"line\">&#123; <span class=\"string\">\"img\"</span> : &#123; <span class=\"string\">\"width\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"height\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"gif\"</span> &#125; &#125;</div><div class=\"line\"> </div><div class=\"line\">In <span class=\"keyword\">case</span> of an error, the output is as follows:</div><div class=\"line\"> </div><div class=\"line\">&#123;&#125;</div></pre></td></tr></table></figure>\n<p>以 json 格式返回原图的尺寸和类型</p>\n<h3 id=\"rotate\"><a href=\"#rotate\" class=\"headerlink\" title=\"rotate\"></a>rotate</h3><p>逆时针旋转指定角度，只能指定这三个角度。参数值可以包含变量，这个模式可以单独使用也可以和resize、crop变换同时使用。</p>\n<h3 id=\"resize-width-height\"><a href=\"#resize-width-height\" class=\"headerlink\" title=\"resize width height\"></a>resize width height</h3><p>按比例对图像进行缩放，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在缩放之后。图片会以长的一边为标准，然后等比缩放。</p>\n<h3 id=\"crop-width-height\"><a href=\"#crop-width-height\" class=\"headerlink\" title=\"crop width height\"></a>crop width height</h3><p>按比例裁剪图片，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在裁剪之前。图片会以长的一边为标准，然后等比缩放，然后裁剪掉多余的部分。</p>\n<h3 id=\"image-filter-buffer\"><a href=\"#image-filter-buffer\" class=\"headerlink\" title=\"image_filter_buffer\"></a>image_filter_buffer</h3><p> 设置用于读取图像的缓冲区的最大大小  </p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_buffer size;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_buffer 1M;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置读取图片的最大缓冲区大小。当超过缓冲区大小时，返回 error 415 (Unsupported Media Type).</p>\n<h3 id=\"image-filter-interlace\"><a href=\"#image-filter-interlace\" class=\"headerlink\" title=\"image_filter_interlace\"></a>image_filter_interlace</h3><p> 如果启用，最终图像将隔行扫描</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_interlace on / off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_interlace off;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>如果开启此功能，最终的图像是交错的。对于JPEG，最终图片是“渐进式JPEG”格式。图片一般是线性加载，设置后则变为交替加载图片。渐进式jpeg效果参见：<a href=\"http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/</a></p>\n<h3 id=\"image-filter-jpeg-quality\"><a href=\"#image-filter-jpeg-quality\" class=\"headerlink\" title=\"image_filter_jpeg_quality\"></a>image_filter_jpeg_quality</h3><p>设置转换JPEG图像的质量</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_jpeg_quality quality;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_jpeg_quality 75;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置转为JPEG图像的质量。接受的值从1到100。较小的值意味着低质的图片质量和更少的数据传输量。最大建议的值是95。参数可以包含变量。</p>\n<h3 id=\"image-filter-sharpen\"><a href=\"#image-filter-sharpen\" class=\"headerlink\" title=\"image_filter_sharpen\"></a>image_filter_sharpen</h3><p>通过设置锐化度，增加最终图像的清晰度。</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_sharpen percent;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_sharpen 0;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>增加最终图片的锐度。这个百分比可以超过100。0值禁用此功能。参数可以包含变量。</p>\n<h3 id=\"image-filter-transparency\"><a href=\"#image-filter-transparency\" class=\"headerlink\" title=\"image_filter_transparency\"></a>image_filter_transparency</h3><p>定义是否透明度时应保留转换GIF图像或PNG图像的调色板中指定的颜色。</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_transparency on/off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_transparency on;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>决定在转换GIF或PNG图片带有调色板定义的颜色时，透明是否会保留。丢失透明度可以是图片得到更好的质量。PNG的Alpha通道的透明总是会保留。</p>\n<h3 id=\"image-filter-webp-quality\"><a href=\"#image-filter-webp-quality\" class=\"headerlink\" title=\"image_filter_webp_quality\"></a>image_filter_webp_quality</h3><p>设置转化WebP图像所需的质量</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_webp_quality quality;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_webp_quality 80;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置转为webp图像的质量。</p>\n<p>This directive appeared in version 1.11.6.</p>\n<h1 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h1><ol>\n<li><p>Nginx 的图片处理模块，暂时没有看到官方发布的能够给图片加水印功能的模块，在github上看到有人写了些这样的扩展功能，参见 <code>https://github.com/3078825/ngx_image_thumb</code></p>\n</li>\n<li><p>Nginx 的实时性和访问的方便性上，GraphicsMagick 是无法比拟的，但是 GraphicsMagick 对图片的处理的功能要比nginx强大很多，比如nginx不能将图片旋转任意角度，不能在图片上加水印，处理图片类型有限等，相对nginx，GraphicsMagick 更适合对图片的异步处理。</p>\n</li>\n</ol>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\">Module ngx_http_image_filter_module</a></p>\n","excerpt":"","more":"<h1 id=\"Nginx的-http-image-filter-module-模块使用说明\"><a href=\"#Nginx的-http-image-filter-module-模块使用说明\" class=\"headerlink\" title=\"Nginx的 http_image_filter_module 模块使用说明\"></a>Nginx的 http_image_filter_module 模块使用说明</h1><h1 id=\"Nginx图片处理原理\"><a href=\"#Nginx图片处理原理\" class=\"headerlink\" title=\"Nginx图片处理原理\"></a>Nginx图片处理原理</h1><p>这里需要用到 nginx的 http_image_filter_module 模块，这个模块可以很方便的实现图片缩放功能，只是默认的情况下并不会安装，需要自己编译安装才能行。编译的时候./configure 增加 –with-http_image_filter_module 编译安装即可</p>\n<h1 id=\"Nginx图片处理的优缺点\"><a href=\"#Nginx图片处理的优缺点\" class=\"headerlink\" title=\"Nginx图片处理的优缺点\"></a>Nginx图片处理的优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>操作简单。通过简单配置，省去了后端裁剪程序的复杂性。</li>\n<li>实时裁剪。可以实时访问在线裁剪图片。</li>\n<li>灵活性强。后端程序裁剪图片时需要知道裁剪图片的尺寸和质量，使用nginx裁剪可以实时裁剪任意尺寸的图片。</li>\n<li>不占用硬盘空间。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li><p>消耗CPU和内存，访问量大的时候就会给服务器带来很大的负担。(可以通过使用Nginx缓存和缓存服务器来解决)</p>\n</li>\n<li><p>功能不是很强大，支持的处理图片类型只包括JPEG, GIF, PNG, or WebP</p>\n</li>\n</ol>\n<h1 id=\"Nginx图片处理模块指令使用\"><a href=\"#Nginx图片处理模块指令使用\" class=\"headerlink\" title=\"Nginx图片处理模块指令使用\"></a>Nginx图片处理模块指令使用</h1><h2 id=\"image-filter-（重要）\"><a href=\"#image-filter-（重要）\" class=\"headerlink\" title=\"image_filter （重要）\"></a>image_filter （重要）</h2><p>设置要在图像上执行的转换类型</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>image_filter test;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter size;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter rotate 90/180/270;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter resize width height;</td>\n</tr>\n<tr>\n<td></td>\n<td>image_filter crop width height;</td>\n</tr>\n<tr>\n<td>Default:</td>\n<td>image_filter off;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>location</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h3><p>确保响应图片是JPEG、GIF，WEBP或PNG格式，否则返回415错误码。</p>\n<h3 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">outputs information about images in a JSON format, e.g.:</div><div class=\"line\"> </div><div class=\"line\">&#123; <span class=\"string\">\"img\"</span> : &#123; <span class=\"string\">\"width\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"height\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"type\"</span>: <span class=\"string\">\"gif\"</span> &#125; &#125;</div><div class=\"line\"> </div><div class=\"line\">In <span class=\"keyword\">case</span> of an error, the output is as follows:</div><div class=\"line\"> </div><div class=\"line\">&#123;&#125;</div></pre></td></tr></table></figure>\n<p>以 json 格式返回原图的尺寸和类型</p>\n<h3 id=\"rotate\"><a href=\"#rotate\" class=\"headerlink\" title=\"rotate\"></a>rotate</h3><p>逆时针旋转指定角度，只能指定这三个角度。参数值可以包含变量，这个模式可以单独使用也可以和resize、crop变换同时使用。</p>\n<h3 id=\"resize-width-height\"><a href=\"#resize-width-height\" class=\"headerlink\" title=\"resize width height\"></a>resize width height</h3><p>按比例对图像进行缩放，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在缩放之后。图片会以长的一边为标准，然后等比缩放。</p>\n<h3 id=\"crop-width-height\"><a href=\"#crop-width-height\" class=\"headerlink\" title=\"crop width height\"></a>crop width height</h3><p>按比例裁剪图片，可以只指定一个尺寸，另一个尺寸用“-”。如果遇到错误，服务器返回415错误码。参数值可以包含变量。当与rotate参数一同使用时，旋转操作发生在裁剪之前。图片会以长的一边为标准，然后等比缩放，然后裁剪掉多余的部分。</p>\n<h3 id=\"image-filter-buffer\"><a href=\"#image-filter-buffer\" class=\"headerlink\" title=\"image_filter_buffer\"></a>image_filter_buffer</h3><p> 设置用于读取图像的缓冲区的最大大小  </p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_buffer size;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_buffer 1M;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置读取图片的最大缓冲区大小。当超过缓冲区大小时，返回 error 415 (Unsupported Media Type).</p>\n<h3 id=\"image-filter-interlace\"><a href=\"#image-filter-interlace\" class=\"headerlink\" title=\"image_filter_interlace\"></a>image_filter_interlace</h3><p> 如果启用，最终图像将隔行扫描</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_interlace on / off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_interlace off;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>如果开启此功能，最终的图像是交错的。对于JPEG，最终图片是“渐进式JPEG”格式。图片一般是线性加载，设置后则变为交替加载图片。渐进式jpeg效果参见：<a href=\"http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/\">http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/</a></p>\n<h3 id=\"image-filter-jpeg-quality\"><a href=\"#image-filter-jpeg-quality\" class=\"headerlink\" title=\"image_filter_jpeg_quality\"></a>image_filter_jpeg_quality</h3><p>设置转换JPEG图像的质量</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_jpeg_quality quality;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_jpeg_quality 75;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置转为JPEG图像的质量。接受的值从1到100。较小的值意味着低质的图片质量和更少的数据传输量。最大建议的值是95。参数可以包含变量。</p>\n<h3 id=\"image-filter-sharpen\"><a href=\"#image-filter-sharpen\" class=\"headerlink\" title=\"image_filter_sharpen\"></a>image_filter_sharpen</h3><p>通过设置锐化度，增加最终图像的清晰度。</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_sharpen percent;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_sharpen 0;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>增加最终图片的锐度。这个百分比可以超过100。0值禁用此功能。参数可以包含变量。</p>\n<h3 id=\"image-filter-transparency\"><a href=\"#image-filter-transparency\" class=\"headerlink\" title=\"image_filter_transparency\"></a>image_filter_transparency</h3><p>定义是否透明度时应保留转换GIF图像或PNG图像的调色板中指定的颜色。</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_transparency on/off;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_transparency on;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>决定在转换GIF或PNG图片带有调色板定义的颜色时，透明是否会保留。丢失透明度可以是图片得到更好的质量。PNG的Alpha通道的透明总是会保留。</p>\n<h3 id=\"image-filter-webp-quality\"><a href=\"#image-filter-webp-quality\" class=\"headerlink\" title=\"image_filter_webp_quality\"></a>image_filter_webp_quality</h3><p>设置转化WebP图像所需的质量</p>\n<table>\n<thead>\n<tr>\n<th>Syntax:</th>\n<th>image_filter_webp_quality quality;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default:</td>\n<td>image_filter_webp_quality 80;</td>\n</tr>\n<tr>\n<td>Context:</td>\n<td>http, server, location</td>\n</tr>\n</tbody>\n</table>\n<p>设置转为webp图像的质量。</p>\n<p>This directive appeared in version 1.11.6.</p>\n<h1 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h1><ol>\n<li><p>Nginx 的图片处理模块，暂时没有看到官方发布的能够给图片加水印功能的模块，在github上看到有人写了些这样的扩展功能，参见 <code>https://github.com/3078825/ngx_image_thumb</code></p>\n</li>\n<li><p>Nginx 的实时性和访问的方便性上，GraphicsMagick 是无法比拟的，但是 GraphicsMagick 对图片的处理的功能要比nginx强大很多，比如nginx不能将图片旋转任意角度，不能在图片上加水印，处理图片类型有限等，相对nginx，GraphicsMagick 更适合对图片的异步处理。</p>\n</li>\n</ol>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\">Module ngx_http_image_filter_module</a></p>\n"},{"title":"hexo 写blog","date":"2016-05-12T07:20:34.000Z","_content":"# hexo 写blog\n\n# 写文章\n\n```java\nhexo new [layout] <title> \n\n```\n\n> 也可以不用这样，直接把markdown文章放到 `source/_post` 文件夹下,可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\nHexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为` :year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n# 添加标签 about 页面\n以 about 标签页为例\n\n```java\ntitle: 标签\ndate: 2017-2-22 12:39:04\ntype: \"about\"\ncomments: true\n---\n```\n\n# 调试和部署\n\n```java\nhexo g    //根据模板编译生成文件\nhexo s    //本地启动服务\n\nhexo deploy  //发布到github\n```\n\n生成文件位置：`.deploy_git/`\n\n> 每次部署会把 `CNAME` 和 `README.md` 删掉，可以把这两个文件放到 `source` 文件夹下就可以了。\n\n# 常见问题\n\n`# 标题`  注意显示标题时，在 # 后面加个空格就可以了。\n\n\n# 参考资料\n\n<a href=\" https://hexo.io/zh-cn/docs/\" target=\"_blank\">hexo中文文档</a>\n\n<a href=\"http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\">Jekyll迁移到Hexo搭建个人博客</a>\n\n","source":"_posts/hexo 写blog.md","raw":"---\ntitle: hexo 写blog\ndate: 2016-05-12 15:20:34\ncategories: hexo\ntags: hexo\n---\n# hexo 写blog\n\n# 写文章\n\n```java\nhexo new [layout] <title> \n\n```\n\n> 也可以不用这样，直接把markdown文章放到 `source/_post` 文件夹下,可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 `_config.yml` 中的 `default_layout` 参数来指定默认布局。\n\nHexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为` :year-:month-:day-:title.md` 可让您更方便的通过日期来管理文章。\n\n# 添加标签 about 页面\n以 about 标签页为例\n\n```java\ntitle: 标签\ndate: 2017-2-22 12:39:04\ntype: \"about\"\ncomments: true\n---\n```\n\n# 调试和部署\n\n```java\nhexo g    //根据模板编译生成文件\nhexo s    //本地启动服务\n\nhexo deploy  //发布到github\n```\n\n生成文件位置：`.deploy_git/`\n\n> 每次部署会把 `CNAME` 和 `README.md` 删掉，可以把这两个文件放到 `source` 文件夹下就可以了。\n\n# 常见问题\n\n`# 标题`  注意显示标题时，在 # 后面加个空格就可以了。\n\n\n# 参考资料\n\n<a href=\" https://hexo.io/zh-cn/docs/\" target=\"_blank\">hexo中文文档</a>\n\n<a href=\"http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\">Jekyll迁移到Hexo搭建个人博客</a>\n\n","slug":"hexo 写blog","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27d000e6c9kwy5rryak","content":"<h1 id=\"hexo-写blog\"><a href=\"#hexo-写blog\" class=\"headerlink\" title=\"hexo 写blog\"></a>hexo 写blog</h1><h1 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以不用这样，直接把markdown文章放到 <code>source/_post</code> 文件夹下,可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n</blockquote>\n<p>Hexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为<code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<h1 id=\"添加标签-about-页面\"><a href=\"#添加标签-about-页面\" class=\"headerlink\" title=\"添加标签 about 页面\"></a>添加标签 about 页面</h1><p>以 about 标签页为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: <span class=\"number\">2017</span>-<span class=\"number\">2</span>-<span class=\"number\">22</span> <span class=\"number\">12</span>:<span class=\"number\">39</span>:<span class=\"number\">04</span></div><div class=\"line\">type: <span class=\"string\">\"about\"</span></div><div class=\"line\">comments: <span class=\"keyword\">true</span></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<h1 id=\"调试和部署\"><a href=\"#调试和部署\" class=\"headerlink\" title=\"调试和部署\"></a>调试和部署</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g    <span class=\"comment\">//根据模板编译生成文件</span></div><div class=\"line\">hexo s    <span class=\"comment\">//本地启动服务</span></div><div class=\"line\"></div><div class=\"line\">hexo deploy  <span class=\"comment\">//发布到github</span></div></pre></td></tr></table></figure>\n<p>生成文件位置：<code>.deploy_git/</code></p>\n<blockquote>\n<p>每次部署会把 <code>CNAME</code> 和 <code>README.md</code> 删掉，可以把这两个文件放到 <code>source</code> 文件夹下就可以了。</p>\n</blockquote>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><p><code># 标题</code>  注意显示标题时，在 # 后面加个空格就可以了。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\" https://hexo.io/zh-cn/docs/\" target=\"_blank\">hexo中文文档</a></p>\n<p><a href=\"http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\">Jekyll迁移到Hexo搭建个人博客</a></p>\n","excerpt":"","more":"<h1 id=\"hexo-写blog\"><a href=\"#hexo-写blog\" class=\"headerlink\" title=\"hexo 写blog\"></a>hexo 写blog</h1><h1 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以不用这样，直接把markdown文章放到 <code>source/_post</code> 文件夹下,可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>\n</blockquote>\n<p>Hexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为<code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>\n<h1 id=\"添加标签-about-页面\"><a href=\"#添加标签-about-页面\" class=\"headerlink\" title=\"添加标签 about 页面\"></a>添加标签 about 页面</h1><p>以 about 标签页为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 标签</div><div class=\"line\">date: <span class=\"number\">2017</span>-<span class=\"number\">2</span>-<span class=\"number\">22</span> <span class=\"number\">12</span>:<span class=\"number\">39</span>:<span class=\"number\">04</span></div><div class=\"line\">type: <span class=\"string\">\"about\"</span></div><div class=\"line\">comments: <span class=\"keyword\">true</span></div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<h1 id=\"调试和部署\"><a href=\"#调试和部署\" class=\"headerlink\" title=\"调试和部署\"></a>调试和部署</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g    <span class=\"comment\">//根据模板编译生成文件</span></div><div class=\"line\">hexo s    <span class=\"comment\">//本地启动服务</span></div><div class=\"line\"></div><div class=\"line\">hexo deploy  <span class=\"comment\">//发布到github</span></div></pre></td></tr></table></figure>\n<p>生成文件位置：<code>.deploy_git/</code></p>\n<blockquote>\n<p>每次部署会把 <code>CNAME</code> 和 <code>README.md</code> 删掉，可以把这两个文件放到 <code>source</code> 文件夹下就可以了。</p>\n</blockquote>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><p><code># 标题</code>  注意显示标题时，在 # 后面加个空格就可以了。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\" https://hexo.io/zh-cn/docs/\" target=\"_blank\">hexo中文文档</a></p>\n<p><a href=\"http://www.ezlippi.com//blog/2016/02/jekyll-to-hexo.html\" target=\"_blank\">Jekyll迁移到Hexo搭建个人博客</a></p>\n"},{"title":"sql重复插入问题","date":"2017-01-13T12:21:14.000Z","_content":"# sql重复插入问题\n\n# 问题\n在项目中，由于别人并发的调用接口，导致插入了重复数据\n\n# 解决方案\n1.因为使用多台机器部署，可以使用分布式锁用一台机器处理，对处理的方法加锁或同步关键字，但性能会有很大影响，分布式的优势也没了\n2.在MySQL的业务表中，根据业务建立唯一索引，防止数据重复\n\n# 具体操作\n建立唯一索引：\n```java\nALTER TABLE table_name ADD UNIQUE index_name (column_list)\n```\n\n# 程序中处理\n如果重复插入，MySQL好像会报数据完整性的错误，到spring中后错误被封装为 DuplicateKeyException，只要在程序中捕获这个异常做相应的处理就可以了。\n\n# 重复插入语句\n建立唯一索引或使用主键primary后，还可以使用MySQL的重复插入语句：ignore， replace， ON DUPLICATE KEY UPDATE\n\n```java\nINSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) VALUES ('test@163.com', '99999', '9999');\n```\n这样当有重复记录就会忽略,执行后返回数字0\n\n```java\nREPLACE INTO `table_name`(`col_name`, ...) VALUES (...);\n```\nREPLACE的运行与INSERT很相像,但是如果旧记录与新记录有相同的值，则在新记录被插入之前，旧记录被删除。\n\n```java\nINSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE `c`=`c`+1; \n```\n如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。\n\n> 这部分具体可参考 http://www.111cn.net/database/mysql/50135.htm\n\n#总结\n不过实际发现异常处理的时间要比MySQL的重复插入语句慢不少,所以可以的话还是使用MySQL的重复插入语句，不要在程序中去处理；但如果业务原因，可能也不得不在程序中处理，比如重复插入了，也要返回插入的数据信息。\n\n\n> INNODB中NULL字段使用插曲 \n>\n在大多数情况下字段设计应该避免使用default null的使用，而使用空字符来代表空。\n因为INNODB的索引中会存储NULL，如果一个字段可为NULL，并且在该字段上有索引，索引中会存储NULL，每次索引的时候会额外扫更多的字段。在需要使用唯一索引约束一个字段，但是需要部分字段为空时，空字符串会引起唯一索引冲突，NULL可以在唯一索引中不产生冲突。\n可参考文章：http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html\nMysql联合唯一索引和空值: http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html\n\n# 参考资料\n<a href=\"http://www.111cn.net/database/mysql/50135.htm\" target=\"_blank\">MySql避免重复插入记录方法(ignore,Replace,ON DUPLICATE KEY UPDATE)</a>\n","source":"_posts/sql重复插入问题.md","raw":"---\ntitle: sql重复插入问题\ndate: 2017-01-13 20:21:14\ncategories: mysql\ntags: mysql\n---\n# sql重复插入问题\n\n# 问题\n在项目中，由于别人并发的调用接口，导致插入了重复数据\n\n# 解决方案\n1.因为使用多台机器部署，可以使用分布式锁用一台机器处理，对处理的方法加锁或同步关键字，但性能会有很大影响，分布式的优势也没了\n2.在MySQL的业务表中，根据业务建立唯一索引，防止数据重复\n\n# 具体操作\n建立唯一索引：\n```java\nALTER TABLE table_name ADD UNIQUE index_name (column_list)\n```\n\n# 程序中处理\n如果重复插入，MySQL好像会报数据完整性的错误，到spring中后错误被封装为 DuplicateKeyException，只要在程序中捕获这个异常做相应的处理就可以了。\n\n# 重复插入语句\n建立唯一索引或使用主键primary后，还可以使用MySQL的重复插入语句：ignore， replace， ON DUPLICATE KEY UPDATE\n\n```java\nINSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) VALUES ('test@163.com', '99999', '9999');\n```\n这样当有重复记录就会忽略,执行后返回数字0\n\n```java\nREPLACE INTO `table_name`(`col_name`, ...) VALUES (...);\n```\nREPLACE的运行与INSERT很相像,但是如果旧记录与新记录有相同的值，则在新记录被插入之前，旧记录被删除。\n\n```java\nINSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE `c`=`c`+1; \n```\n如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。\n\n> 这部分具体可参考 http://www.111cn.net/database/mysql/50135.htm\n\n#总结\n不过实际发现异常处理的时间要比MySQL的重复插入语句慢不少,所以可以的话还是使用MySQL的重复插入语句，不要在程序中去处理；但如果业务原因，可能也不得不在程序中处理，比如重复插入了，也要返回插入的数据信息。\n\n\n> INNODB中NULL字段使用插曲 \n>\n在大多数情况下字段设计应该避免使用default null的使用，而使用空字符来代表空。\n因为INNODB的索引中会存储NULL，如果一个字段可为NULL，并且在该字段上有索引，索引中会存储NULL，每次索引的时候会额外扫更多的字段。在需要使用唯一索引约束一个字段，但是需要部分字段为空时，空字符串会引起唯一索引冲突，NULL可以在唯一索引中不产生冲突。\n可参考文章：http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html\nMysql联合唯一索引和空值: http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html\n\n# 参考资料\n<a href=\"http://www.111cn.net/database/mysql/50135.htm\" target=\"_blank\">MySql避免重复插入记录方法(ignore,Replace,ON DUPLICATE KEY UPDATE)</a>\n","slug":"sql重复插入问题","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27e000g6c9kq18cud6i","content":"<h1 id=\"sql重复插入问题\"><a href=\"#sql重复插入问题\" class=\"headerlink\" title=\"sql重复插入问题\"></a>sql重复插入问题</h1><h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在项目中，由于别人并发的调用接口，导致插入了重复数据</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>1.因为使用多台机器部署，可以使用分布式锁用一台机器处理，对处理的方法加锁或同步关键字，但性能会有很大影响，分布式的优势也没了<br>2.在MySQL的业务表中，根据业务建立唯一索引，防止数据重复</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><p>建立唯一索引：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ALTER TABLE table_name ADD UNIQUE <span class=\"title\">index_name</span> <span class=\"params\">(column_list)</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"程序中处理\"><a href=\"#程序中处理\" class=\"headerlink\" title=\"程序中处理\"></a>程序中处理</h1><p>如果重复插入，MySQL好像会报数据完整性的错误，到spring中后错误被封装为 DuplicateKeyException，只要在程序中捕获这个异常做相应的处理就可以了。</p>\n<h1 id=\"重复插入语句\"><a href=\"#重复插入语句\" class=\"headerlink\" title=\"重复插入语句\"></a>重复插入语句</h1><p>建立唯一索引或使用主键primary后，还可以使用MySQL的重复插入语句：ignore， replace， ON DUPLICATE KEY UPDATE</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) VALUES (<span class=\"string\">'test@163.com'</span>, <span class=\"string\">'99999'</span>, <span class=\"string\">'9999'</span>);</div></pre></td></tr></table></figure>\n<p>这样当有重复记录就会忽略,执行后返回数字0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">REPLACE INTO `table_name`(`col_name`, ...) VALUES (...);</div></pre></td></tr></table></figure>\n<p>REPLACE的运行与INSERT很相像,但是如果旧记录与新记录有相同的值，则在新记录被插入之前，旧记录被删除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO `table` (`a`, `b`, `c`) VALUES (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) ON DUPLICATE KEY UPDATE `c`=`c`+<span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。</p>\n<blockquote>\n<p>这部分具体可参考 <a href=\"http://www.111cn.net/database/mysql/50135.htm\" target=\"_blank\" rel=\"external\">http://www.111cn.net/database/mysql/50135.htm</a></p>\n</blockquote>\n<p>#总结<br>不过实际发现异常处理的时间要比MySQL的重复插入语句慢不少,所以可以的话还是使用MySQL的重复插入语句，不要在程序中去处理；但如果业务原因，可能也不得不在程序中处理，比如重复插入了，也要返回插入的数据信息。</p>\n<blockquote>\n<p>INNODB中NULL字段使用插曲 </p>\n<p>在大多数情况下字段设计应该避免使用default null的使用，而使用空字符来代表空。<br>因为INNODB的索引中会存储NULL，如果一个字段可为NULL，并且在该字段上有索引，索引中会存储NULL，每次索引的时候会额外扫更多的字段。在需要使用唯一索引约束一个字段，但是需要部分字段为空时，空字符串会引起唯一索引冲突，NULL可以在唯一索引中不产生冲突。<br>可参考文章：<a href=\"http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html\" target=\"_blank\" rel=\"external\">http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html</a><br>Mysql联合唯一索引和空值: <a href=\"http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html\" target=\"_blank\" rel=\"external\">http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html</a></p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.111cn.net/database/mysql/50135.htm\" target=\"_blank\">MySql避免重复插入记录方法(ignore,Replace,ON DUPLICATE KEY UPDATE)</a></p>\n","excerpt":"","more":"<h1 id=\"sql重复插入问题\"><a href=\"#sql重复插入问题\" class=\"headerlink\" title=\"sql重复插入问题\"></a>sql重复插入问题</h1><h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在项目中，由于别人并发的调用接口，导致插入了重复数据</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>1.因为使用多台机器部署，可以使用分布式锁用一台机器处理，对处理的方法加锁或同步关键字，但性能会有很大影响，分布式的优势也没了<br>2.在MySQL的业务表中，根据业务建立唯一索引，防止数据重复</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><p>建立唯一索引：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ALTER TABLE table_name ADD UNIQUE <span class=\"title\">index_name</span> <span class=\"params\">(column_list)</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"程序中处理\"><a href=\"#程序中处理\" class=\"headerlink\" title=\"程序中处理\"></a>程序中处理</h1><p>如果重复插入，MySQL好像会报数据完整性的错误，到spring中后错误被封装为 DuplicateKeyException，只要在程序中捕获这个异常做相应的处理就可以了。</p>\n<h1 id=\"重复插入语句\"><a href=\"#重复插入语句\" class=\"headerlink\" title=\"重复插入语句\"></a>重复插入语句</h1><p>建立唯一索引或使用主键primary后，还可以使用MySQL的重复插入语句：ignore， replace， ON DUPLICATE KEY UPDATE</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT IGNORE INTO `table_name` (`email`, `phone`, `user_id`) VALUES (<span class=\"string\">'test@163.com'</span>, <span class=\"string\">'99999'</span>, <span class=\"string\">'9999'</span>);</div></pre></td></tr></table></figure>\n<p>这样当有重复记录就会忽略,执行后返回数字0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">REPLACE INTO `table_name`(`col_name`, ...) VALUES (...);</div></pre></td></tr></table></figure>\n<p>REPLACE的运行与INSERT很相像,但是如果旧记录与新记录有相同的值，则在新记录被插入之前，旧记录被删除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERT INTO `table` (`a`, `b`, `c`) VALUES (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) ON DUPLICATE KEY UPDATE `c`=`c`+<span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。</p>\n<blockquote>\n<p>这部分具体可参考 <a href=\"http://www.111cn.net/database/mysql/50135.htm\">http://www.111cn.net/database/mysql/50135.htm</a></p>\n</blockquote>\n<p>#总结<br>不过实际发现异常处理的时间要比MySQL的重复插入语句慢不少,所以可以的话还是使用MySQL的重复插入语句，不要在程序中去处理；但如果业务原因，可能也不得不在程序中处理，比如重复插入了，也要返回插入的数据信息。</p>\n<blockquote>\n<p>INNODB中NULL字段使用插曲 </p>\n<p>在大多数情况下字段设计应该避免使用default null的使用，而使用空字符来代表空。<br>因为INNODB的索引中会存储NULL，如果一个字段可为NULL，并且在该字段上有索引，索引中会存储NULL，每次索引的时候会额外扫更多的字段。在需要使用唯一索引约束一个字段，但是需要部分字段为空时，空字符串会引起唯一索引冲突，NULL可以在唯一索引中不产生冲突。<br>可参考文章：<a href=\"http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html\">http://tomblog.readthedocs.io/en/latest/mysql/INNODB%E4%B8%ADNULL%E4%BD%BF%E7%94%A8.html</a><br>Mysql联合唯一索引和空值: <a href=\"http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html\">http://tomblog.readthedocs.io/en/latest/mysql/INNODB中NULL使用.html</a></p>\n</blockquote>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.111cn.net/database/mysql/50135.htm\" target=\"_blank\">MySql避免重复插入记录方法(ignore,Replace,ON DUPLICATE KEY UPDATE)</a></p>\n"},{"title":"Hello World","date":"2016-05-11T06:12:04.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-05-11 14:12:04\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27h000k6c9kal0npoax","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"悲观锁和乐观锁","date":"2017-03-11T01:22:54.000Z","_content":"# 悲观锁和乐观锁\n\n# 为什么需要锁\n在多用户环境中，在同一时间可能会有多个用户更新相同的记录，就会产生冲突。冲突最终会导致丢失更新或脏读。\n\n丢失更新：一个事务的更新覆盖了其它事务的更新结果。\n脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。表现为不同用户读到的同一个记录的值可能不同。\n\n悲观锁还是乐观锁可以认为是一种思想。不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像 memcache、hibernate、tair 等都有类似的概念。不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。\n\n当一个用户锁住数据库中的某个对象时，其他用户就不能再访问该对象。加锁对并发访问的影响体现在锁的粒度上。比如，放在一个表上的锁限制对整个表的并发访问；放在数据页上的锁限制了对整个数据页的访问；放在行上的锁只限制对该行的并发访问。可见行锁粒度最小，并发访问最好，页锁粒度最大，表锁介于两者之间。\n\n# 悲观锁(Pessimistic Lock)\n\n假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。\n每次拿数据的时候都会担心会被别人修改（疑心重很悲观），所以每次在拿数据的时候都会上锁。确保自己使用的过程中不会被别人访问，自己使用完后再解锁，期间需要访问该数据的都会等待。\n\n在数据库中，悲观锁的流程如下：\n在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。\n如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。\n如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。\n其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。\n\nMySQL InnoDB中使用悲观锁：\n要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;\n\nMySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。\n\n悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。\n\n悲观锁机制存在以下问题：\n\n在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。\n一个线程持有锁会导致其它所有需要此锁的线程挂起。\n如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。\n\n# 乐观锁(Optimistic Lock)\n\n所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。\n假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。\n每次拿数据的时候都完全不担心会被别人修改（心态好很乐观），所以每次在拿数据的时候都不会上锁。但是在更新数据的时候去判断该期间是否被别人修改过（使用版本号等机制），期间该数据可以随便被其他人读取。\n相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本或使用时间戳。\n\n## 使用方式\n\n1. 使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。\n2. 使用时间戳来实现.\n\n> 对于以上两种方式,Hibernate自带实现方式：在使用乐观锁的字段前加annotation: @Version, Hibernate在更新时自动校验该字段。\n\n# 使用场景\n两种锁各有优缺点，不能单纯的定义哪个好于哪个。\n乐观锁比较适合数据修改比较少，并发量比较大，读取比较频繁的场景。\n但是如果经常发生冲突（写数据比较多的情况下），并发量不大且不允许脏读，上层应用不不断的retry，这样反而降低了性能，对于这种情况使用悲观锁就更合适。\n\n## java中的使用\n乐观锁是一种思想。CAS是这种思想的一种实现方式。\n乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。\n上面提到的乐观锁的概念中其实已经阐述了他的具体实现细节：主要就是两个步骤：冲突检测和数据更新。其实现方式有一种比较典型的就是Compare and Swap(CAS)。\nCAS是项乐观锁技术，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。\n在JDK1.5 中新增java.util.concurrent(J.U.C)就是建立在CAS之上的。相对于对于synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现，所以J.U.C在性能上有了很大的提升。\n\n> 参考：乐观锁的一种实现方式——CAS：http://www.hollischuang.com/archives/1537\n\nJava中的线程安全问题至关重要，要想保证线程安全，就需要锁机制。锁机制包含两种：乐观锁与悲观锁。悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。有一种乐观锁的实现方式就是CAS ，这种算法在JDK 1.5中引入的java.util.concurrent中有广泛应用。但是值得注意的是这种算法会存在ABA问题。\n\n# 参考资料\n\n<a href=\"https://yq.aliyun.com/articles/1273\" target=\"_blank\">关于悲观锁和乐观锁的区别</a>\n\n<a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\">深入理解乐观锁与悲观锁</a>\n\n\n\n\n\n \n  \n","source":"_posts/悲观锁和乐观锁.md","raw":"---\ntitle: 悲观锁和乐观锁\ndate: 2017-03-11 09:22:54\ncategories: Database\ntags: 悲观锁 乐观锁\n---\n# 悲观锁和乐观锁\n\n# 为什么需要锁\n在多用户环境中，在同一时间可能会有多个用户更新相同的记录，就会产生冲突。冲突最终会导致丢失更新或脏读。\n\n丢失更新：一个事务的更新覆盖了其它事务的更新结果。\n脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。表现为不同用户读到的同一个记录的值可能不同。\n\n悲观锁还是乐观锁可以认为是一种思想。不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像 memcache、hibernate、tair 等都有类似的概念。不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。\n\n当一个用户锁住数据库中的某个对象时，其他用户就不能再访问该对象。加锁对并发访问的影响体现在锁的粒度上。比如，放在一个表上的锁限制对整个表的并发访问；放在数据页上的锁限制了对整个数据页的访问；放在行上的锁只限制对该行的并发访问。可见行锁粒度最小，并发访问最好，页锁粒度最大，表锁介于两者之间。\n\n# 悲观锁(Pessimistic Lock)\n\n假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。\n每次拿数据的时候都会担心会被别人修改（疑心重很悲观），所以每次在拿数据的时候都会上锁。确保自己使用的过程中不会被别人访问，自己使用完后再解锁，期间需要访问该数据的都会等待。\n\n在数据库中，悲观锁的流程如下：\n在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。\n如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。\n如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。\n其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。\n\nMySQL InnoDB中使用悲观锁：\n要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;\n\nMySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。\n\n悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。\n\n悲观锁机制存在以下问题：\n\n在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。\n一个线程持有锁会导致其它所有需要此锁的线程挂起。\n如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。\n\n# 乐观锁(Optimistic Lock)\n\n所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。\n假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。\n每次拿数据的时候都完全不担心会被别人修改（心态好很乐观），所以每次在拿数据的时候都不会上锁。但是在更新数据的时候去判断该期间是否被别人修改过（使用版本号等机制），期间该数据可以随便被其他人读取。\n相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本或使用时间戳。\n\n## 使用方式\n\n1. 使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。\n2. 使用时间戳来实现.\n\n> 对于以上两种方式,Hibernate自带实现方式：在使用乐观锁的字段前加annotation: @Version, Hibernate在更新时自动校验该字段。\n\n# 使用场景\n两种锁各有优缺点，不能单纯的定义哪个好于哪个。\n乐观锁比较适合数据修改比较少，并发量比较大，读取比较频繁的场景。\n但是如果经常发生冲突（写数据比较多的情况下），并发量不大且不允许脏读，上层应用不不断的retry，这样反而降低了性能，对于这种情况使用悲观锁就更合适。\n\n## java中的使用\n乐观锁是一种思想。CAS是这种思想的一种实现方式。\n乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。\n上面提到的乐观锁的概念中其实已经阐述了他的具体实现细节：主要就是两个步骤：冲突检测和数据更新。其实现方式有一种比较典型的就是Compare and Swap(CAS)。\nCAS是项乐观锁技术，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。\n在JDK1.5 中新增java.util.concurrent(J.U.C)就是建立在CAS之上的。相对于对于synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现，所以J.U.C在性能上有了很大的提升。\n\n> 参考：乐观锁的一种实现方式——CAS：http://www.hollischuang.com/archives/1537\n\nJava中的线程安全问题至关重要，要想保证线程安全，就需要锁机制。锁机制包含两种：乐观锁与悲观锁。悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。有一种乐观锁的实现方式就是CAS ，这种算法在JDK 1.5中引入的java.util.concurrent中有广泛应用。但是值得注意的是这种算法会存在ABA问题。\n\n# 参考资料\n\n<a href=\"https://yq.aliyun.com/articles/1273\" target=\"_blank\">关于悲观锁和乐观锁的区别</a>\n\n<a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\">深入理解乐观锁与悲观锁</a>\n\n\n\n\n\n \n  \n","slug":"悲观锁和乐观锁","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27i000m6c9kmg3b3c2b","content":"<h1 id=\"悲观锁和乐观锁\"><a href=\"#悲观锁和乐观锁\" class=\"headerlink\" title=\"悲观锁和乐观锁\"></a>悲观锁和乐观锁</h1><h1 id=\"为什么需要锁\"><a href=\"#为什么需要锁\" class=\"headerlink\" title=\"为什么需要锁\"></a>为什么需要锁</h1><p>在多用户环境中，在同一时间可能会有多个用户更新相同的记录，就会产生冲突。冲突最终会导致丢失更新或脏读。</p>\n<p>丢失更新：一个事务的更新覆盖了其它事务的更新结果。<br>脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。表现为不同用户读到的同一个记录的值可能不同。</p>\n<p>悲观锁还是乐观锁可以认为是一种思想。不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像 memcache、hibernate、tair 等都有类似的概念。不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p>\n<p>当一个用户锁住数据库中的某个对象时，其他用户就不能再访问该对象。加锁对并发访问的影响体现在锁的粒度上。比如，放在一个表上的锁限制对整个表的并发访问；放在数据页上的锁限制了对整个数据页的访问；放在行上的锁只限制对该行的并发访问。可见行锁粒度最小，并发访问最好，页锁粒度最大，表锁介于两者之间。</p>\n<h1 id=\"悲观锁-Pessimistic-Lock\"><a href=\"#悲观锁-Pessimistic-Lock\" class=\"headerlink\" title=\"悲观锁(Pessimistic Lock)\"></a>悲观锁(Pessimistic Lock)</h1><p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。<br>每次拿数据的时候都会担心会被别人修改（疑心重很悲观），所以每次在拿数据的时候都会上锁。确保自己使用的过程中不会被别人访问，自己使用完后再解锁，期间需要访问该数据的都会等待。</p>\n<p>在数据库中，悲观锁的流程如下：<br>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。<br>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。<br>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。<br>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p>\n<p>MySQL InnoDB中使用悲观锁：<br>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p>\n<p>MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p>\n<p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。</p>\n<p>悲观锁机制存在以下问题：</p>\n<p>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。<br>一个线程持有锁会导致其它所有需要此锁的线程挂起。<br>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。</p>\n<h1 id=\"乐观锁-Optimistic-Lock\"><a href=\"#乐观锁-Optimistic-Lock\" class=\"headerlink\" title=\"乐观锁(Optimistic Lock)\"></a>乐观锁(Optimistic Lock)</h1><p>所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<br>假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。<br>每次拿数据的时候都完全不担心会被别人修改（心态好很乐观），所以每次在拿数据的时候都不会上锁。但是在更新数据的时候去判断该期间是否被别人修改过（使用版本号等机制），期间该数据可以随便被其他人读取。<br>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本或使用时间戳。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><ol>\n<li>使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。</li>\n<li>使用时间戳来实现.</li>\n</ol>\n<blockquote>\n<p>对于以上两种方式,Hibernate自带实现方式：在使用乐观锁的字段前加annotation: @Version, Hibernate在更新时自动校验该字段。</p>\n</blockquote>\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>两种锁各有优缺点，不能单纯的定义哪个好于哪个。<br>乐观锁比较适合数据修改比较少，并发量比较大，读取比较频繁的场景。<br>但是如果经常发生冲突（写数据比较多的情况下），并发量不大且不允许脏读，上层应用不不断的retry，这样反而降低了性能，对于这种情况使用悲观锁就更合适。</p>\n<h2 id=\"java中的使用\"><a href=\"#java中的使用\" class=\"headerlink\" title=\"java中的使用\"></a>java中的使用</h2><p>乐观锁是一种思想。CAS是这种思想的一种实现方式。<br>乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。<br>上面提到的乐观锁的概念中其实已经阐述了他的具体实现细节：主要就是两个步骤：冲突检测和数据更新。其实现方式有一种比较典型的就是Compare and Swap(CAS)。<br>CAS是项乐观锁技术，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。<br>在JDK1.5 中新增java.util.concurrent(J.U.C)就是建立在CAS之上的。相对于对于synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现，所以J.U.C在性能上有了很大的提升。</p>\n<blockquote>\n<p>参考：乐观锁的一种实现方式——CAS：<a href=\"http://www.hollischuang.com/archives/1537\" target=\"_blank\" rel=\"external\">http://www.hollischuang.com/archives/1537</a></p>\n</blockquote>\n<p>Java中的线程安全问题至关重要，要想保证线程安全，就需要锁机制。锁机制包含两种：乐观锁与悲观锁。悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。有一种乐观锁的实现方式就是CAS ，这种算法在JDK 1.5中引入的java.util.concurrent中有广泛应用。但是值得注意的是这种算法会存在ABA问题。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://yq.aliyun.com/articles/1273\" target=\"_blank\">关于悲观锁和乐观锁的区别</a></p>\n<p><a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\">深入理解乐观锁与悲观锁</a></p>\n","excerpt":"","more":"<h1 id=\"悲观锁和乐观锁\"><a href=\"#悲观锁和乐观锁\" class=\"headerlink\" title=\"悲观锁和乐观锁\"></a>悲观锁和乐观锁</h1><h1 id=\"为什么需要锁\"><a href=\"#为什么需要锁\" class=\"headerlink\" title=\"为什么需要锁\"></a>为什么需要锁</h1><p>在多用户环境中，在同一时间可能会有多个用户更新相同的记录，就会产生冲突。冲突最终会导致丢失更新或脏读。</p>\n<p>丢失更新：一个事务的更新覆盖了其它事务的更新结果。<br>脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。表现为不同用户读到的同一个记录的值可能不同。</p>\n<p>悲观锁还是乐观锁可以认为是一种思想。不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像 memcache、hibernate、tair 等都有类似的概念。不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p>\n<p>当一个用户锁住数据库中的某个对象时，其他用户就不能再访问该对象。加锁对并发访问的影响体现在锁的粒度上。比如，放在一个表上的锁限制对整个表的并发访问；放在数据页上的锁限制了对整个数据页的访问；放在行上的锁只限制对该行的并发访问。可见行锁粒度最小，并发访问最好，页锁粒度最大，表锁介于两者之间。</p>\n<h1 id=\"悲观锁-Pessimistic-Lock\"><a href=\"#悲观锁-Pessimistic-Lock\" class=\"headerlink\" title=\"悲观锁(Pessimistic Lock)\"></a>悲观锁(Pessimistic Lock)</h1><p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。<br>每次拿数据的时候都会担心会被别人修改（疑心重很悲观），所以每次在拿数据的时候都会上锁。确保自己使用的过程中不会被别人访问，自己使用完后再解锁，期间需要访问该数据的都会等待。</p>\n<p>在数据库中，悲观锁的流程如下：<br>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。<br>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。<br>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。<br>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p>\n<p>MySQL InnoDB中使用悲观锁：<br>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p>\n<p>MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p>\n<p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。</p>\n<p>悲观锁机制存在以下问题：</p>\n<p>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。<br>一个线程持有锁会导致其它所有需要此锁的线程挂起。<br>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。</p>\n<h1 id=\"乐观锁-Optimistic-Lock\"><a href=\"#乐观锁-Optimistic-Lock\" class=\"headerlink\" title=\"乐观锁(Optimistic Lock)\"></a>乐观锁(Optimistic Lock)</h1><p>所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<br>假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。<br>每次拿数据的时候都完全不担心会被别人修改（心态好很乐观），所以每次在拿数据的时候都不会上锁。但是在更新数据的时候去判断该期间是否被别人修改过（使用版本号等机制），期间该数据可以随便被其他人读取。<br>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本或使用时间戳。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><ol>\n<li>使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。</li>\n<li>使用时间戳来实现.</li>\n</ol>\n<blockquote>\n<p>对于以上两种方式,Hibernate自带实现方式：在使用乐观锁的字段前加annotation: @Version, Hibernate在更新时自动校验该字段。</p>\n</blockquote>\n<h1 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h1><p>两种锁各有优缺点，不能单纯的定义哪个好于哪个。<br>乐观锁比较适合数据修改比较少，并发量比较大，读取比较频繁的场景。<br>但是如果经常发生冲突（写数据比较多的情况下），并发量不大且不允许脏读，上层应用不不断的retry，这样反而降低了性能，对于这种情况使用悲观锁就更合适。</p>\n<h2 id=\"java中的使用\"><a href=\"#java中的使用\" class=\"headerlink\" title=\"java中的使用\"></a>java中的使用</h2><p>乐观锁是一种思想。CAS是这种思想的一种实现方式。<br>乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。<br>上面提到的乐观锁的概念中其实已经阐述了他的具体实现细节：主要就是两个步骤：冲突检测和数据更新。其实现方式有一种比较典型的就是Compare and Swap(CAS)。<br>CAS是项乐观锁技术，CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。<br>在JDK1.5 中新增java.util.concurrent(J.U.C)就是建立在CAS之上的。相对于对于synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现，所以J.U.C在性能上有了很大的提升。</p>\n<blockquote>\n<p>参考：乐观锁的一种实现方式——CAS：<a href=\"http://www.hollischuang.com/archives/1537\">http://www.hollischuang.com/archives/1537</a></p>\n</blockquote>\n<p>Java中的线程安全问题至关重要，要想保证线程安全，就需要锁机制。锁机制包含两种：乐观锁与悲观锁。悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。有一种乐观锁的实现方式就是CAS ，这种算法在JDK 1.5中引入的java.util.concurrent中有广泛应用。但是值得注意的是这种算法会存在ABA问题。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://yq.aliyun.com/articles/1273\" target=\"_blank\">关于悲观锁和乐观锁的区别</a></p>\n<p><a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\">深入理解乐观锁与悲观锁</a></p>\n"},{"title":"使用 Grapicmagick 和 Im4java 处理图片","date":"2016-09-18T13:12:32.000Z","_content":"# 使用 Grapicmagick 和 Im4java 处理图片\n\nImageMagick是个图片处理工具可以安装在绝大多数的平台上使用，Linux、Mac、Windows都没有问题。GraphicsMagick是在ImageMagick基础上的另一个项目，大大提高了图片处理的性能，在linux平台上，可以使用命令行的形式处理图片。Im4java 和Jmagick 都是开源社区为上面两个工具开发的 Java API，性能和方便度上im4java是更好的选择。\n\n# JMagick vs Im4Java\n\n1. JMagick是一个开源API，利用JNI(Java Native Interface)技术实现了对ImageMagick API的Java访问接口,因此也将比纯Java实现的图片操作函数在速度上要快。JMagick只实现了ImageMagicAPI的一部分功能，它的发行遵循LGPL协议。\n\n2. im4java是ImageMagick的另一个Java开源接口。与JMagick不同之处在于im4java只是生成与ImageMagick相对应的命令行，然后将生成的命令行传至选中的ImageCommand（使用java.lang.ProcessBuilder.start()实现）来执行相应的操作。它支持大部分ImageMagick命令，可以针对不同组的图片多次复用同一个命令行。\n\nim4java只是封装ImageMagick的命令。所以不需要依赖dll，也不存在64位系统调用32位dll的问题.而且im4java支持GraphicsMagick，GraphicsMagick是ImageMagick的分支。相对ImageMagick ,GraphicsMagick更稳定，消耗资源更少。最重要的是不依赖dll环境\n所以使用 im4java 是更好的选择。\n\n# Im4java处理图片示例\n\n这篇文章主要是 im4java 的使用，而 im4java 又是对 GraphicsMagick 命令的封装，GraphicsMagick 命令的使用可以看另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/52281828\" target=\"_blank\">GraphicsMagick 1.3.23 常用命令</a>\n\n先写个包含获取图片信息的简单工具类，如下。\n\n```java\npublic class Im4JavaUtils {\n\n    private static Logger logger = LoggerFactory.getLogger(Im4JavaUtils.class);\n\n    // 图片质量\n    public static final String IMAGE_QUALITY = \"quality\";\n    // 图片高度\n    public static final String IMAGE_HEIGHT = \"height\";\n    // 图片宽度\n    public static final String IMAGE_WIDTH = \"width\";\n    // 图片格式\n    public static final String IMAGE_SUFFIX = \"suffix\";\n    // 图片大小\n    public static final String IMAGE_SIZE = \"size\";\n    // 图片路径\n    public static final String IMAGE_PATH = \"path\";\n\n    /**\n     * 是否使用 GraphicsMagick\n     */\n    private static final boolean IS_USE_GRAPHICS_MAGICK = true;\n\n    /**\n     * ImageMagick安装路径，windows下使用\n     */\n    private static final String IMAGE_MAGICK_PATH = \"D:\\\\software\\\\ImageMagick-6.2.7-Q8\";\n\n    /**\n     *  gm 命令所在目录\n     */\n    private static final String GRAPHICS_MAGICK_PATH = \"/usr/local/bin\";\n\n    /**\n     * 水印图片路径\n     */\n    private static final String watermarkImagePath = \"/Users/gary/Documents/Job/ImageProcessTool/Im4java/Linux_logo.jpg\";\n    /**\n     * 水印图片\n     */\n    private static Image watermarkImage = null;\n    static {\n        try {\n            watermarkImage = ImageIO.read(new File(watermarkImagePath));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 命令类型\n     *\n     */\n    private enum CommandType {\n        convert(\"转换处理\"), identify(\"图片信息\"), compositecmd(\"图片合成\");\n        private String name;\n\n        CommandType(String name) {\n            this.name = name;\n        }\n    }\n\n    /**\n     * 查询图片的基本信息:格式,质量，宽度，高度\n     * <p>\n     * gm identify -format %w,%h,%d/%f,%Q,%b,%e /Users/gary/Documents/999999999/10005582/1.jpg\n     * <p>\n     *\n     * @param imagePath\n     * @return\n     */\n    public static Map<String, String> getImageInfo(String imagePath) {\n        long startTime = System.currentTimeMillis();\n        Map<String, String> imageInfo = new HashMap<>();\n        try {\n            IMOperation op = new IMOperation();\n            op.format(\"%w,%h,%d/%f,%Q,%b,%e\");\n            op.addImage();\n            ImageCommand identifyCmd = getImageCommand(CommandType.identify);\n            ArrayListOutputConsumer output = new ArrayListOutputConsumer();\n            identifyCmd.setOutputConsumer(output);\n            identifyCmd.run(op, imagePath);\n            ArrayList<String> cmdOutput = output.getOutput();\n            String[] result = cmdOutput.get(0).split(\",\");\n            if (result.length == 6) {\n                imageInfo.put(IMAGE_WIDTH, result[0]);\n                imageInfo.put(IMAGE_HEIGHT, result[1]);\n                imageInfo.put(IMAGE_PATH, result[2]);\n                imageInfo.put(IMAGE_QUALITY, result[3]);\n                imageInfo.put(IMAGE_SIZE, result[4]);\n                imageInfo.put(IMAGE_SUFFIX, result[5]);\n            }\n        } catch (Exception e) {\n            // e.printStackTrace();\n            logger.error(\"图片工具获取图片基本信息异常\" + e.getMessage(), e);\n        }\n        long endTime = System.currentTimeMillis();\n        // logger.info(\"take time: \" + (endTime - startTime));\n        return imageInfo;\n    }\n\n    /**\n    * 获取 ImageCommand\n    *\n    * @param command 命令类型\n    * @return\n    */\n   private static ImageCommand getImageCommand(CommandType command) {\n       ImageCommand cmd = null;\n       switch (command) {\n           case convert:\n               cmd = new ConvertCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n           case identify:\n               cmd = new IdentifyCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n           case compositecmd:\n               cmd = new CompositeCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n       }\n       if (cmd != null && System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {\n           cmd.setSearchPath(IS_USE_GRAPHICS_MAGICK ? GRAPHICS_MAGICK_PATH : IMAGE_MAGICK_PATH);\n       }\n       return cmd;\n   }\n  }\n\n```\n\n上面的代码中要注意几个问题：\n\n1. 获取 ImageCommand时，在new ConvertCmd(true)，参数要填true，不填的默认使用的是ImageMagick，参数为true时，才会使用grapicmagick的命令。\n2. 获取 ImageCommand 后，要设置命令的搜索路径，有时可能会不稳定找不到gm命令，例如 cmd.setSearchPath(\"/usr/local/bin\"); (gm 命令在该路径下)\n\n获取图片信息的命令中有个参数 -format ，该参数可取的值如下。\n\n```java\n\n\n %b   file size of image read in\n %c   comment property\n %d   directory component of path\n %e   filename extension or suffix\n %f   filename (including suffix)\n %g   layer canvas page geometry   ( = %Wx%H%X%Y )\n %h   current image height in pixels\n %i   image filename (note: becomes output filename for \"info:\")\n %k   number of unique colors\n %l   label property\n %m   image file format (file magic)\n %n   exact number of images in current image sequence\n %o   output filename  (used for delegates)\n %p   index of image in current image list\n %q   quantum depth (compile-time constant)\n %r   image class and colorspace\n %s   scene number (from input unless re-assigned)\n %t   filename without directory or extension (suffix)\n %u   unique temporary filename (used for delegates)\n %w   current width in pixels\n %x   x resolution (density)\n %y   y resolution (density)\n %z   image depth (as read in unless modified, image save depth)\n %A   image transparency channel enabled (true/false)\n %C   image compression type\n %D   image dispose method\n %G   image size ( = %wx%h )\n %H   page (canvas) height\n %M   Magick filename (original file exactly as given,  including read mods)\n %O   page (canvas) offset ( = %X%Y )\n %P   page (canvas) size ( = %Wx%H )\n %Q   image compression quality ( 0 = default )\n %S   ?? scenes ??\n %T   image time delay\n %W   page (canvas) width\n %X   page (canvas) x offset (including sign)\n %Y   page (canvas) y offset (including sign)\n %Z   unique filename (used for delegates)\n %@   bounding box\n %#   signature\n %%   a percent sign\n \\n   newline\n \\r   carriage return\n\n\n```\n\n# 压缩图片质量\n\n```java\n  /**\n     * 图片压缩\n     * <p>\n     * 拼装命令示例: gm convert -quality 80 /apps/watch.jpg /apps/watch_compress.jpg\n     *\n     * @param srcImagePath\n     * @param destImagePath\n     * @param quality\n     * @throws Exception\n     */\n    public static void compressImage(String srcImagePath, String destImagePath, double quality) throws Exception {\n        IMOperation op = new IMOperation();\n        op.quality(quality);\n        op.addImage();\n        op.addImage();\n        ImageCommand cmd = getImageCommand(CommandType.convert);\n        cmd.run(op, srcImagePath, destImagePath);\n    }\n\n```\n\n# 裁剪图片\n\n```java\n /**\n     * 裁剪图片\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param x         起始X坐标\n     * @param y         起始Y坐标\n     * @param width     裁剪宽度\n     * @param height    裁剪高度\n     * @return 返回true说明裁剪成功, 否则失败\n     */\n    public static boolean cutImage(String imagePath, String newPath, int x, int y, int width, int height) {\n        boolean flag = false;\n        try {\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            /** width：裁剪的宽度 * height：裁剪的高度 * x：裁剪的横坐标 * y：裁剪纵坐标 */\n            op.crop(width, height, x, y);\n            op.addImage(newPath);\n            ConvertCmd convert = new ConvertCmd(true);\n            convert.run(op);\n            flag = true;\n        } catch (IOException e) {\n            System.out.println(\"文件读取错误!\");\n            flag = false;\n        } catch (InterruptedException e) {\n            flag = false;\n        } catch (IM4JavaException e) {\n            flag = false;\n        } finally {\n\n        }\n        return flag;\n    }\n\n```\n\n# 缩放图片\n\n```java\n/**\n     * 根据尺寸缩放图片[等比例缩放:参数height为null,按宽度缩放比例缩放;参数width为null,按高度缩放比例缩放]\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param width     缩放后的图片宽度\n     * @param height    缩放后的图片高度\n     * @return 返回true说明缩放成功, 否则失败\n     */\n    public static boolean zoomImage(String imagePath, String newPath, Integer width, Integer height) {\n\n        boolean flag;\n        try {\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            if (width == null) {// 根据高度缩放图片\n                op.resize(null, height);\n            } else if (height == null) {// 根据宽度缩放图片\n                op.resize(width);\n            } else {\n                op.resize(width, height);\n            }\n            op.addImage(newPath);\n            ConvertCmd convert = new ConvertCmd(true);\n            convert.run(op);\n            flag = true;\n        } catch (IOException e) {\n            System.out.println(\"文件读取错误!\");\n            flag = false;\n        } catch (InterruptedException e) {\n            flag = false;\n        } catch (IM4JavaException e) {\n            flag = false;\n        }\n        return flag;\n    }\n\n```\n\n# 图片旋转\n\n```java\n\n  /**\n     * 图片旋转(顺时针旋转) \n     * 拼装命令示例: gm convert -rotate 90 /apps/watch.jpg /apps/watch_compress.jpg\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param degree    旋转角度\n     */\n    public static boolean rotate(String imagePath, String newPath, double degree) {\n        boolean flag;\n        try {\n            // 1.将角度转换到0-360度之间\n            degree = degree % 360;\n            if (degree <= 0) {\n                degree = 360 + degree;\n            }\n            IMOperation op = new IMOperation();\n            op.rotate(degree);\n            op.addImage(imagePath);\n            op.addImage(newPath);\n            ConvertCmd cmd = new ConvertCmd(true);\n            cmd.run(op);\n            flag = true;\n        } catch (Exception e) {\n            flag = false;\n            System.out.println(\"图片旋转失败!\");\n        }\n        return flag;\n    }\n\n```\n\n# 添加文字水印\n\n```java\n /**\n     * 文字水印\n     *\n     * @param srcImagePath  源图片路径\n     * @param destImagePath 目标图片路径\n     * @param content       文字内容（不支持汉字）\n     * @throws Exception\n     */\n    public static void addTextWatermark(String srcImagePath, String destImagePath, String content) throws Exception {\n        IMOperation op = new IMOperation();\n\n        op.font(\"ArialBold\");\n        // 文字方位-东南\n        op.gravity(\"southeast\");\n        // 文字信息\n        op.pointsize(60).fill(\"#F2F2F2\").draw(\"text 10,10 \" + content);\n        \n        // 原图\n        op.addImage(srcImagePath);\n        // 目标\n        op.addImage(destImagePath);\n        ImageCommand cmd = getImageCommand(CommandType.convert);\n        cmd.run(op);\n    }\n\n```\n添加文字前要安装文字包，或直接指向 ttf 文字格式文件上。\nOSX 安装\n\n```java\n\nbrew install ghostscript\n\n```\n\n>添加中文水印会乱码，待解决。\n\n# 添加图片水印\n\n```java\n /**\n     * 图片水印\n     *\n     * @param srcImagePath  源图片路径\n     * @param destImagePath 目标图片路径\n     * @param dissolve      透明度（0-100）\n     * @throws Exception\n     */\n    public static void addImgWatermark(String srcImagePath, String destImagePath, Integer dissolve) throws Exception {\n        // 原始图片信息\n        BufferedImage buffimg = ImageIO.read(new File(srcImagePath));\n        int w = buffimg.getWidth();\n        int h = buffimg.getHeight();\n        IMOperation op = new IMOperation();\n        // 水印图片位置\n        op.geometry(watermarkImage.getWidth(null), watermarkImage.getHeight(null),\n                w - watermarkImage.getWidth(null) - 10, h - watermarkImage.getHeight(null) - 10);\n        // 水印透明度\n        op.dissolve(dissolve);\n        // 水印\n        op.addImage(watermarkImagePath);\n        // 原图\n        op.addImage(srcImagePath);\n        // 目标\n        op.addImage(destImagePath);\n        ImageCommand cmd = getImageCommand(CommandType.compositecmd);\n        cmd.run(op);\n    }\n\n```\n\n# 参考资料\n<a href=\"http://im4java.sourceforge.net/\" target=\"_blank\">im4java官网</a>\n<a href=\"https://github.com/hailin0/im4java-util/blob/master/src/main/java/com/hlin/im4java/util/ImageUtil.java\" target=\"_blank\">hailin0/im4java-util</a>\n\n\r","source":"_posts/使用 Grapicmagick 和 Im4java 处理图片.md","raw":"---\ntitle: 使用 Grapicmagick 和 Im4java 处理图片\ndate: 2016-09-18 21:12:32\ncategories: Java\ntags: Java\n---\n# 使用 Grapicmagick 和 Im4java 处理图片\n\nImageMagick是个图片处理工具可以安装在绝大多数的平台上使用，Linux、Mac、Windows都没有问题。GraphicsMagick是在ImageMagick基础上的另一个项目，大大提高了图片处理的性能，在linux平台上，可以使用命令行的形式处理图片。Im4java 和Jmagick 都是开源社区为上面两个工具开发的 Java API，性能和方便度上im4java是更好的选择。\n\n# JMagick vs Im4Java\n\n1. JMagick是一个开源API，利用JNI(Java Native Interface)技术实现了对ImageMagick API的Java访问接口,因此也将比纯Java实现的图片操作函数在速度上要快。JMagick只实现了ImageMagicAPI的一部分功能，它的发行遵循LGPL协议。\n\n2. im4java是ImageMagick的另一个Java开源接口。与JMagick不同之处在于im4java只是生成与ImageMagick相对应的命令行，然后将生成的命令行传至选中的ImageCommand（使用java.lang.ProcessBuilder.start()实现）来执行相应的操作。它支持大部分ImageMagick命令，可以针对不同组的图片多次复用同一个命令行。\n\nim4java只是封装ImageMagick的命令。所以不需要依赖dll，也不存在64位系统调用32位dll的问题.而且im4java支持GraphicsMagick，GraphicsMagick是ImageMagick的分支。相对ImageMagick ,GraphicsMagick更稳定，消耗资源更少。最重要的是不依赖dll环境\n所以使用 im4java 是更好的选择。\n\n# Im4java处理图片示例\n\n这篇文章主要是 im4java 的使用，而 im4java 又是对 GraphicsMagick 命令的封装，GraphicsMagick 命令的使用可以看另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/52281828\" target=\"_blank\">GraphicsMagick 1.3.23 常用命令</a>\n\n先写个包含获取图片信息的简单工具类，如下。\n\n```java\npublic class Im4JavaUtils {\n\n    private static Logger logger = LoggerFactory.getLogger(Im4JavaUtils.class);\n\n    // 图片质量\n    public static final String IMAGE_QUALITY = \"quality\";\n    // 图片高度\n    public static final String IMAGE_HEIGHT = \"height\";\n    // 图片宽度\n    public static final String IMAGE_WIDTH = \"width\";\n    // 图片格式\n    public static final String IMAGE_SUFFIX = \"suffix\";\n    // 图片大小\n    public static final String IMAGE_SIZE = \"size\";\n    // 图片路径\n    public static final String IMAGE_PATH = \"path\";\n\n    /**\n     * 是否使用 GraphicsMagick\n     */\n    private static final boolean IS_USE_GRAPHICS_MAGICK = true;\n\n    /**\n     * ImageMagick安装路径，windows下使用\n     */\n    private static final String IMAGE_MAGICK_PATH = \"D:\\\\software\\\\ImageMagick-6.2.7-Q8\";\n\n    /**\n     *  gm 命令所在目录\n     */\n    private static final String GRAPHICS_MAGICK_PATH = \"/usr/local/bin\";\n\n    /**\n     * 水印图片路径\n     */\n    private static final String watermarkImagePath = \"/Users/gary/Documents/Job/ImageProcessTool/Im4java/Linux_logo.jpg\";\n    /**\n     * 水印图片\n     */\n    private static Image watermarkImage = null;\n    static {\n        try {\n            watermarkImage = ImageIO.read(new File(watermarkImagePath));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 命令类型\n     *\n     */\n    private enum CommandType {\n        convert(\"转换处理\"), identify(\"图片信息\"), compositecmd(\"图片合成\");\n        private String name;\n\n        CommandType(String name) {\n            this.name = name;\n        }\n    }\n\n    /**\n     * 查询图片的基本信息:格式,质量，宽度，高度\n     * <p>\n     * gm identify -format %w,%h,%d/%f,%Q,%b,%e /Users/gary/Documents/999999999/10005582/1.jpg\n     * <p>\n     *\n     * @param imagePath\n     * @return\n     */\n    public static Map<String, String> getImageInfo(String imagePath) {\n        long startTime = System.currentTimeMillis();\n        Map<String, String> imageInfo = new HashMap<>();\n        try {\n            IMOperation op = new IMOperation();\n            op.format(\"%w,%h,%d/%f,%Q,%b,%e\");\n            op.addImage();\n            ImageCommand identifyCmd = getImageCommand(CommandType.identify);\n            ArrayListOutputConsumer output = new ArrayListOutputConsumer();\n            identifyCmd.setOutputConsumer(output);\n            identifyCmd.run(op, imagePath);\n            ArrayList<String> cmdOutput = output.getOutput();\n            String[] result = cmdOutput.get(0).split(\",\");\n            if (result.length == 6) {\n                imageInfo.put(IMAGE_WIDTH, result[0]);\n                imageInfo.put(IMAGE_HEIGHT, result[1]);\n                imageInfo.put(IMAGE_PATH, result[2]);\n                imageInfo.put(IMAGE_QUALITY, result[3]);\n                imageInfo.put(IMAGE_SIZE, result[4]);\n                imageInfo.put(IMAGE_SUFFIX, result[5]);\n            }\n        } catch (Exception e) {\n            // e.printStackTrace();\n            logger.error(\"图片工具获取图片基本信息异常\" + e.getMessage(), e);\n        }\n        long endTime = System.currentTimeMillis();\n        // logger.info(\"take time: \" + (endTime - startTime));\n        return imageInfo;\n    }\n\n    /**\n    * 获取 ImageCommand\n    *\n    * @param command 命令类型\n    * @return\n    */\n   private static ImageCommand getImageCommand(CommandType command) {\n       ImageCommand cmd = null;\n       switch (command) {\n           case convert:\n               cmd = new ConvertCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n           case identify:\n               cmd = new IdentifyCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n           case compositecmd:\n               cmd = new CompositeCmd(IS_USE_GRAPHICS_MAGICK);\n               break;\n       }\n       if (cmd != null && System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {\n           cmd.setSearchPath(IS_USE_GRAPHICS_MAGICK ? GRAPHICS_MAGICK_PATH : IMAGE_MAGICK_PATH);\n       }\n       return cmd;\n   }\n  }\n\n```\n\n上面的代码中要注意几个问题：\n\n1. 获取 ImageCommand时，在new ConvertCmd(true)，参数要填true，不填的默认使用的是ImageMagick，参数为true时，才会使用grapicmagick的命令。\n2. 获取 ImageCommand 后，要设置命令的搜索路径，有时可能会不稳定找不到gm命令，例如 cmd.setSearchPath(\"/usr/local/bin\"); (gm 命令在该路径下)\n\n获取图片信息的命令中有个参数 -format ，该参数可取的值如下。\n\n```java\n\n\n %b   file size of image read in\n %c   comment property\n %d   directory component of path\n %e   filename extension or suffix\n %f   filename (including suffix)\n %g   layer canvas page geometry   ( = %Wx%H%X%Y )\n %h   current image height in pixels\n %i   image filename (note: becomes output filename for \"info:\")\n %k   number of unique colors\n %l   label property\n %m   image file format (file magic)\n %n   exact number of images in current image sequence\n %o   output filename  (used for delegates)\n %p   index of image in current image list\n %q   quantum depth (compile-time constant)\n %r   image class and colorspace\n %s   scene number (from input unless re-assigned)\n %t   filename without directory or extension (suffix)\n %u   unique temporary filename (used for delegates)\n %w   current width in pixels\n %x   x resolution (density)\n %y   y resolution (density)\n %z   image depth (as read in unless modified, image save depth)\n %A   image transparency channel enabled (true/false)\n %C   image compression type\n %D   image dispose method\n %G   image size ( = %wx%h )\n %H   page (canvas) height\n %M   Magick filename (original file exactly as given,  including read mods)\n %O   page (canvas) offset ( = %X%Y )\n %P   page (canvas) size ( = %Wx%H )\n %Q   image compression quality ( 0 = default )\n %S   ?? scenes ??\n %T   image time delay\n %W   page (canvas) width\n %X   page (canvas) x offset (including sign)\n %Y   page (canvas) y offset (including sign)\n %Z   unique filename (used for delegates)\n %@   bounding box\n %#   signature\n %%   a percent sign\n \\n   newline\n \\r   carriage return\n\n\n```\n\n# 压缩图片质量\n\n```java\n  /**\n     * 图片压缩\n     * <p>\n     * 拼装命令示例: gm convert -quality 80 /apps/watch.jpg /apps/watch_compress.jpg\n     *\n     * @param srcImagePath\n     * @param destImagePath\n     * @param quality\n     * @throws Exception\n     */\n    public static void compressImage(String srcImagePath, String destImagePath, double quality) throws Exception {\n        IMOperation op = new IMOperation();\n        op.quality(quality);\n        op.addImage();\n        op.addImage();\n        ImageCommand cmd = getImageCommand(CommandType.convert);\n        cmd.run(op, srcImagePath, destImagePath);\n    }\n\n```\n\n# 裁剪图片\n\n```java\n /**\n     * 裁剪图片\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param x         起始X坐标\n     * @param y         起始Y坐标\n     * @param width     裁剪宽度\n     * @param height    裁剪高度\n     * @return 返回true说明裁剪成功, 否则失败\n     */\n    public static boolean cutImage(String imagePath, String newPath, int x, int y, int width, int height) {\n        boolean flag = false;\n        try {\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            /** width：裁剪的宽度 * height：裁剪的高度 * x：裁剪的横坐标 * y：裁剪纵坐标 */\n            op.crop(width, height, x, y);\n            op.addImage(newPath);\n            ConvertCmd convert = new ConvertCmd(true);\n            convert.run(op);\n            flag = true;\n        } catch (IOException e) {\n            System.out.println(\"文件读取错误!\");\n            flag = false;\n        } catch (InterruptedException e) {\n            flag = false;\n        } catch (IM4JavaException e) {\n            flag = false;\n        } finally {\n\n        }\n        return flag;\n    }\n\n```\n\n# 缩放图片\n\n```java\n/**\n     * 根据尺寸缩放图片[等比例缩放:参数height为null,按宽度缩放比例缩放;参数width为null,按高度缩放比例缩放]\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param width     缩放后的图片宽度\n     * @param height    缩放后的图片高度\n     * @return 返回true说明缩放成功, 否则失败\n     */\n    public static boolean zoomImage(String imagePath, String newPath, Integer width, Integer height) {\n\n        boolean flag;\n        try {\n            IMOperation op = new IMOperation();\n            op.addImage(imagePath);\n            if (width == null) {// 根据高度缩放图片\n                op.resize(null, height);\n            } else if (height == null) {// 根据宽度缩放图片\n                op.resize(width);\n            } else {\n                op.resize(width, height);\n            }\n            op.addImage(newPath);\n            ConvertCmd convert = new ConvertCmd(true);\n            convert.run(op);\n            flag = true;\n        } catch (IOException e) {\n            System.out.println(\"文件读取错误!\");\n            flag = false;\n        } catch (InterruptedException e) {\n            flag = false;\n        } catch (IM4JavaException e) {\n            flag = false;\n        }\n        return flag;\n    }\n\n```\n\n# 图片旋转\n\n```java\n\n  /**\n     * 图片旋转(顺时针旋转) \n     * 拼装命令示例: gm convert -rotate 90 /apps/watch.jpg /apps/watch_compress.jpg\n     *\n     * @param imagePath 源图片路径\n     * @param newPath   处理后图片路径\n     * @param degree    旋转角度\n     */\n    public static boolean rotate(String imagePath, String newPath, double degree) {\n        boolean flag;\n        try {\n            // 1.将角度转换到0-360度之间\n            degree = degree % 360;\n            if (degree <= 0) {\n                degree = 360 + degree;\n            }\n            IMOperation op = new IMOperation();\n            op.rotate(degree);\n            op.addImage(imagePath);\n            op.addImage(newPath);\n            ConvertCmd cmd = new ConvertCmd(true);\n            cmd.run(op);\n            flag = true;\n        } catch (Exception e) {\n            flag = false;\n            System.out.println(\"图片旋转失败!\");\n        }\n        return flag;\n    }\n\n```\n\n# 添加文字水印\n\n```java\n /**\n     * 文字水印\n     *\n     * @param srcImagePath  源图片路径\n     * @param destImagePath 目标图片路径\n     * @param content       文字内容（不支持汉字）\n     * @throws Exception\n     */\n    public static void addTextWatermark(String srcImagePath, String destImagePath, String content) throws Exception {\n        IMOperation op = new IMOperation();\n\n        op.font(\"ArialBold\");\n        // 文字方位-东南\n        op.gravity(\"southeast\");\n        // 文字信息\n        op.pointsize(60).fill(\"#F2F2F2\").draw(\"text 10,10 \" + content);\n        \n        // 原图\n        op.addImage(srcImagePath);\n        // 目标\n        op.addImage(destImagePath);\n        ImageCommand cmd = getImageCommand(CommandType.convert);\n        cmd.run(op);\n    }\n\n```\n添加文字前要安装文字包，或直接指向 ttf 文字格式文件上。\nOSX 安装\n\n```java\n\nbrew install ghostscript\n\n```\n\n>添加中文水印会乱码，待解决。\n\n# 添加图片水印\n\n```java\n /**\n     * 图片水印\n     *\n     * @param srcImagePath  源图片路径\n     * @param destImagePath 目标图片路径\n     * @param dissolve      透明度（0-100）\n     * @throws Exception\n     */\n    public static void addImgWatermark(String srcImagePath, String destImagePath, Integer dissolve) throws Exception {\n        // 原始图片信息\n        BufferedImage buffimg = ImageIO.read(new File(srcImagePath));\n        int w = buffimg.getWidth();\n        int h = buffimg.getHeight();\n        IMOperation op = new IMOperation();\n        // 水印图片位置\n        op.geometry(watermarkImage.getWidth(null), watermarkImage.getHeight(null),\n                w - watermarkImage.getWidth(null) - 10, h - watermarkImage.getHeight(null) - 10);\n        // 水印透明度\n        op.dissolve(dissolve);\n        // 水印\n        op.addImage(watermarkImagePath);\n        // 原图\n        op.addImage(srcImagePath);\n        // 目标\n        op.addImage(destImagePath);\n        ImageCommand cmd = getImageCommand(CommandType.compositecmd);\n        cmd.run(op);\n    }\n\n```\n\n# 参考资料\n<a href=\"http://im4java.sourceforge.net/\" target=\"_blank\">im4java官网</a>\n<a href=\"https://github.com/hailin0/im4java-util/blob/master/src/main/java/com/hlin/im4java/util/ImageUtil.java\" target=\"_blank\">hailin0/im4java-util</a>\n\n\r","slug":"使用 Grapicmagick 和 Im4java 处理图片","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27l000q6c9k7ksp3q56","content":"<h1 id=\"使用-Grapicmagick-和-Im4java-处理图片\"><a href=\"#使用-Grapicmagick-和-Im4java-处理图片\" class=\"headerlink\" title=\"使用 Grapicmagick 和 Im4java 处理图片\"></a>使用 Grapicmagick 和 Im4java 处理图片</h1><p>ImageMagick是个图片处理工具可以安装在绝大多数的平台上使用，Linux、Mac、Windows都没有问题。GraphicsMagick是在ImageMagick基础上的另一个项目，大大提高了图片处理的性能，在linux平台上，可以使用命令行的形式处理图片。Im4java 和Jmagick 都是开源社区为上面两个工具开发的 Java API，性能和方便度上im4java是更好的选择。</p>\n<h1 id=\"JMagick-vs-Im4Java\"><a href=\"#JMagick-vs-Im4Java\" class=\"headerlink\" title=\"JMagick vs Im4Java\"></a>JMagick vs Im4Java</h1><ol>\n<li><p>JMagick是一个开源API，利用JNI(Java Native Interface)技术实现了对ImageMagick API的Java访问接口,因此也将比纯Java实现的图片操作函数在速度上要快。JMagick只实现了ImageMagicAPI的一部分功能，它的发行遵循LGPL协议。</p>\n</li>\n<li><p>im4java是ImageMagick的另一个Java开源接口。与JMagick不同之处在于im4java只是生成与ImageMagick相对应的命令行，然后将生成的命令行传至选中的ImageCommand（使用java.lang.ProcessBuilder.start()实现）来执行相应的操作。它支持大部分ImageMagick命令，可以针对不同组的图片多次复用同一个命令行。</p>\n</li>\n</ol>\n<p>im4java只是封装ImageMagick的命令。所以不需要依赖dll，也不存在64位系统调用32位dll的问题.而且im4java支持GraphicsMagick，GraphicsMagick是ImageMagick的分支。相对ImageMagick ,GraphicsMagick更稳定，消耗资源更少。最重要的是不依赖dll环境<br>所以使用 im4java 是更好的选择。</p>\n<h1 id=\"Im4java处理图片示例\"><a href=\"#Im4java处理图片示例\" class=\"headerlink\" title=\"Im4java处理图片示例\"></a>Im4java处理图片示例</h1><p>这篇文章主要是 im4java 的使用，而 im4java 又是对 GraphicsMagick 命令的封装，GraphicsMagick 命令的使用可以看另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/52281828\" target=\"_blank\">GraphicsMagick 1.3.23 常用命令</a></p>\n<p>先写个包含获取图片信息的简单工具类，如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Im4JavaUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Im4JavaUtils.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 图片质量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_QUALITY = <span class=\"string\">\"quality\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片高度</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_HEIGHT = <span class=\"string\">\"height\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片宽度</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_WIDTH = <span class=\"string\">\"width\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片格式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_SUFFIX = <span class=\"string\">\"suffix\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片大小</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_SIZE = <span class=\"string\">\"size\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_PATH = <span class=\"string\">\"path\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 是否使用 GraphicsMagick</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> IS_USE_GRAPHICS_MAGICK = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * ImageMagick安装路径，windows下使用</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_MAGICK_PATH = <span class=\"string\">\"D:\\\\software\\\\ImageMagick-6.2.7-Q8\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     *  gm 命令所在目录</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String GRAPHICS_MAGICK_PATH = <span class=\"string\">\"/usr/local/bin\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 水印图片路径</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String watermarkImagePath = <span class=\"string\">\"/Users/gary/Documents/Job/ImageProcessTool/Im4java/Linux_logo.jpg\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 水印图片</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Image watermarkImage = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            watermarkImage = ImageIO.read(<span class=\"keyword\">new</span> File(watermarkImagePath));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 命令类型</div><div class=\"line\">     *</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> CommandType &#123;</div><div class=\"line\">        convert(<span class=\"string\">\"转换处理\"</span>), identify(<span class=\"string\">\"图片信息\"</span>), compositecmd(<span class=\"string\">\"图片合成\"</span>);</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        CommandType(String name) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 查询图片的基本信息:格式,质量，宽度，高度</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * gm identify -format %w,%h,%d/%f,%Q,%b,%e /Users/gary/Documents/999999999/10005582/1.jpg</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imagePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; <span class=\"title\">getImageInfo</span><span class=\"params\">(String imagePath)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</div><div class=\"line\">        Map&lt;String, String&gt; imageInfo = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">            op.format(<span class=\"string\">\"%w,%h,%d/%f,%Q,%b,%e\"</span>);</div><div class=\"line\">            op.addImage();</div><div class=\"line\">            ImageCommand identifyCmd = getImageCommand(CommandType.identify);</div><div class=\"line\">            ArrayListOutputConsumer output = <span class=\"keyword\">new</span> ArrayListOutputConsumer();</div><div class=\"line\">            identifyCmd.setOutputConsumer(output);</div><div class=\"line\">            identifyCmd.run(op, imagePath);</div><div class=\"line\">            ArrayList&lt;String&gt; cmdOutput = output.getOutput();</div><div class=\"line\">            String[] result = cmdOutput.get(<span class=\"number\">0</span>).split(<span class=\"string\">\",\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.length == <span class=\"number\">6</span>) &#123;</div><div class=\"line\">                imageInfo.put(IMAGE_WIDTH, result[<span class=\"number\">0</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_HEIGHT, result[<span class=\"number\">1</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_PATH, result[<span class=\"number\">2</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_QUALITY, result[<span class=\"number\">3</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_SIZE, result[<span class=\"number\">4</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_SUFFIX, result[<span class=\"number\">5</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// e.printStackTrace();</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"图片工具获取图片基本信息异常\"</span> + e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"comment\">// logger.info(\"take time: \" + (endTime - startTime));</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 获取 ImageCommand</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> command 命令类型</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ImageCommand <span class=\"title\">getImageCommand</span><span class=\"params\">(CommandType command)</span> </span>&#123;</div><div class=\"line\">       ImageCommand cmd = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (command) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> convert:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> ConvertCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> identify:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> IdentifyCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> compositecmd:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> CompositeCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (cmd != <span class=\"keyword\">null</span> &amp;&amp; System.getProperty(<span class=\"string\">\"os.name\"</span>).toLowerCase().indexOf(<span class=\"string\">\"windows\"</span>) == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">           cmd.setSearchPath(IS_USE_GRAPHICS_MAGICK ? GRAPHICS_MAGICK_PATH : IMAGE_MAGICK_PATH);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> cmd;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>上面的代码中要注意几个问题：</p>\n<ol>\n<li>获取 ImageCommand时，在new ConvertCmd(true)，参数要填true，不填的默认使用的是ImageMagick，参数为true时，才会使用grapicmagick的命令。</li>\n<li>获取 ImageCommand 后，要设置命令的搜索路径，有时可能会不稳定找不到gm命令，例如 cmd.setSearchPath(“/usr/local/bin”); (gm 命令在该路径下)</li>\n</ol>\n<p>获取图片信息的命令中有个参数 -format ，该参数可取的值如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">%b   file size of image read in</div><div class=\"line\">%c   comment property</div><div class=\"line\">%d   directory component of path</div><div class=\"line\">%e   filename extension or suffix</div><div class=\"line\">%<span class=\"function\">f   <span class=\"title\">filename</span> <span class=\"params\">(including suffix)</span></span></div><div class=\"line\">%g   layer canvas page <span class=\"title\">geometry</span>   <span class=\"params\">( = %Wx%H%X%Y )</span></div><div class=\"line\">%h   current image height in pixels</div><div class=\"line\">%i   image <span class=\"title\">filename</span> <span class=\"params\">(note: becomes output filename <span class=\"keyword\">for</span> <span class=\"string\">\"info:\"</span>)</span></div><div class=\"line\">%k   number of unique colors</div><div class=\"line\">%l   label property</div><div class=\"line\">%m   image file <span class=\"title\">format</span> <span class=\"params\">(file magic)</span></div><div class=\"line\">%n   exact number of images in current image sequence</div><div class=\"line\">%o   output <span class=\"title\">filename</span>  <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%p   index of image in current image list</div><div class=\"line\">%q   quantum <span class=\"title\">depth</span> <span class=\"params\">(compile-time constant)</span></div><div class=\"line\">%r   image class and colorspace</div><div class=\"line\">%s   scene <span class=\"title\">number</span> <span class=\"params\">(from input unless re-assigned)</span></div><div class=\"line\">%t   filename without directory or <span class=\"title\">extension</span> <span class=\"params\">(suffix)</span></div><div class=\"line\">%u   unique temporary <span class=\"title\">filename</span> <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%w   current width in pixels</div><div class=\"line\">%x   x <span class=\"title\">resolution</span> <span class=\"params\">(density)</span></div><div class=\"line\">%y   y <span class=\"title\">resolution</span> <span class=\"params\">(density)</span></div><div class=\"line\">%z   image <span class=\"title\">depth</span> <span class=\"params\">(as read in unless modified, image save depth)</span></div><div class=\"line\">%A   image transparency channel <span class=\"title\">enabled</span> <span class=\"params\">(<span class=\"keyword\">true</span>/<span class=\"keyword\">false</span>)</span></div><div class=\"line\">%C   image compression type</div><div class=\"line\">%D   image dispose method</div><div class=\"line\">%G   image <span class=\"title\">size</span> <span class=\"params\">( = %wx%h )</span></div><div class=\"line\">%H   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> height</div><div class=\"line\">%M   Magick <span class=\"title\">filename</span> <span class=\"params\">(original file exactly as given,  including read mods)</span></div><div class=\"line\">%O   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> <span class=\"title\">offset</span> <span class=\"params\">( = %X%Y )</span></div><div class=\"line\">%P   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> <span class=\"title\">size</span> <span class=\"params\">( = %Wx%H )</span></div><div class=\"line\">%Q   image compression <span class=\"title\">quality</span> <span class=\"params\">( <span class=\"number\">0</span> = <span class=\"keyword\">default</span> )</span></div><div class=\"line\">%S   ?? scenes ??</div><div class=\"line\">%T   image time delay</div><div class=\"line\">%W   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> width</div><div class=\"line\">%X   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> x <span class=\"title\">offset</span> <span class=\"params\">(including sign)</span></div><div class=\"line\">%Y   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> y <span class=\"title\">offset</span> <span class=\"params\">(including sign)</span></div><div class=\"line\">%Z   unique <span class=\"title\">filename</span> <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%@   bounding box</div><div class=\"line\">%#   signature</div><div class=\"line\">%%   a percent sign</div><div class=\"line\">\\n   newline</div><div class=\"line\">\\r   carriage return</div></pre></td></tr></table></figure>\n<h1 id=\"压缩图片质量\"><a href=\"#压缩图片质量\" class=\"headerlink\" title=\"压缩图片质量\"></a>压缩图片质量</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 图片压缩</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * 拼装命令示例: gm convert -quality 80 /apps/watch.jpg /apps/watch_compress.jpg</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> srcImagePath</div><div class=\"line\">   * <span class=\"doctag\">@param</span> destImagePath</div><div class=\"line\">   * <span class=\"doctag\">@param</span> quality</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">compressImage</span><span class=\"params\">(String srcImagePath, String destImagePath, <span class=\"keyword\">double</span> quality)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">      IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">      op.quality(quality);</div><div class=\"line\">      op.addImage();</div><div class=\"line\">      op.addImage();</div><div class=\"line\">      ImageCommand cmd = getImageCommand(CommandType.convert);</div><div class=\"line\">      cmd.run(op, srcImagePath, destImagePath);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"裁剪图片\"><a href=\"#裁剪图片\" class=\"headerlink\" title=\"裁剪图片\"></a>裁剪图片</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 裁剪图片</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x         起始X坐标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y         起始Y坐标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> width     裁剪宽度</div><div class=\"line\">    * <span class=\"doctag\">@param</span> height    裁剪高度</div><div class=\"line\">    * <span class=\"doctag\">@return</span> 返回true说明裁剪成功, 否则失败</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cutImage</span><span class=\"params\">(String imagePath, String newPath, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">           op.addImage(imagePath);</div><div class=\"line\">           <span class=\"comment\">/** width：裁剪的宽度 * height：裁剪的高度 * x：裁剪的横坐标 * y：裁剪纵坐标 */</span></div><div class=\"line\">           op.crop(width, height, x, y);</div><div class=\"line\">           op.addImage(newPath);</div><div class=\"line\">           ConvertCmd convert = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">           convert.run(op);</div><div class=\"line\">           flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           System.out.println(<span class=\"string\">\"文件读取错误!\"</span>);</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IM4JavaException e) &#123;</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> flag;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"缩放图片\"><a href=\"#缩放图片\" class=\"headerlink\" title=\"缩放图片\"></a>缩放图片</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * 根据尺寸缩放图片[等比例缩放:参数height为null,按宽度缩放比例缩放;参数width为null,按高度缩放比例缩放]</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> width     缩放后的图片宽度</div><div class=\"line\">     * <span class=\"doctag\">@param</span> height    缩放后的图片高度</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true说明缩放成功, 否则失败</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">zoomImage</span><span class=\"params\">(String imagePath, String newPath, Integer width, Integer height)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">            op.addImage(imagePath);</div><div class=\"line\">            <span class=\"keyword\">if</span> (width == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 根据高度缩放图片</span></div><div class=\"line\">                op.resize(<span class=\"keyword\">null</span>, height);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 根据宽度缩放图片</span></div><div class=\"line\">                op.resize(width);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                op.resize(width, height);</div><div class=\"line\">            &#125;</div><div class=\"line\">            op.addImage(newPath);</div><div class=\"line\">            ConvertCmd convert = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">            convert.run(op);</div><div class=\"line\">            flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"文件读取错误!\"</span>);</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IM4JavaException e) &#123;</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> flag;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"图片旋转\"><a href=\"#图片旋转\" class=\"headerlink\" title=\"图片旋转\"></a>图片旋转</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">   * 图片旋转(顺时针旋转) </div><div class=\"line\">   * 拼装命令示例: gm convert -rotate 90 /apps/watch.jpg /apps/watch_compress.jpg</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">   * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">   * <span class=\"doctag\">@param</span> degree    旋转角度</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">rotate</span><span class=\"params\">(String imagePath, String newPath, <span class=\"keyword\">double</span> degree)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">boolean</span> flag;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 1.将角度转换到0-360度之间</span></div><div class=\"line\">          degree = degree % <span class=\"number\">360</span>;</div><div class=\"line\">          <span class=\"keyword\">if</span> (degree &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              degree = <span class=\"number\">360</span> + degree;</div><div class=\"line\">          &#125;</div><div class=\"line\">          IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">          op.rotate(degree);</div><div class=\"line\">          op.addImage(imagePath);</div><div class=\"line\">          op.addImage(newPath);</div><div class=\"line\">          ConvertCmd cmd = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">          cmd.run(op);</div><div class=\"line\">          flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"图片旋转失败!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> flag;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加文字水印\"><a href=\"#添加文字水印\" class=\"headerlink\" title=\"添加文字水印\"></a>添加文字水印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 文字水印</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> srcImagePath  源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> destImagePath 目标图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> content       文字内容（不支持汉字）</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addTextWatermark</span><span class=\"params\">(String srcImagePath, String destImagePath, String content)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\"></div><div class=\"line\">       op.font(<span class=\"string\">\"ArialBold\"</span>);</div><div class=\"line\">       <span class=\"comment\">// 文字方位-东南</span></div><div class=\"line\">       op.gravity(<span class=\"string\">\"southeast\"</span>);</div><div class=\"line\">       <span class=\"comment\">// 文字信息</span></div><div class=\"line\">       op.pointsize(<span class=\"number\">60</span>).fill(<span class=\"string\">\"#F2F2F2\"</span>).draw(<span class=\"string\">\"text 10,10 \"</span> + content);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">// 原图</span></div><div class=\"line\">       op.addImage(srcImagePath);</div><div class=\"line\">       <span class=\"comment\">// 目标</span></div><div class=\"line\">       op.addImage(destImagePath);</div><div class=\"line\">       ImageCommand cmd = getImageCommand(CommandType.convert);</div><div class=\"line\">       cmd.run(op);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>添加文字前要安装文字包，或直接指向 ttf 文字格式文件上。<br>OSX 安装</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">brew install ghostscript</div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加中文水印会乱码，待解决。</p>\n</blockquote>\n<h1 id=\"添加图片水印\"><a href=\"#添加图片水印\" class=\"headerlink\" title=\"添加图片水印\"></a>添加图片水印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 图片水印</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> srcImagePath  源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> destImagePath 目标图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dissolve      透明度（0-100）</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addImgWatermark</span><span class=\"params\">(String srcImagePath, String destImagePath, Integer dissolve)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// 原始图片信息</span></div><div class=\"line\">       BufferedImage buffimg = ImageIO.read(<span class=\"keyword\">new</span> File(srcImagePath));</div><div class=\"line\">       <span class=\"keyword\">int</span> w = buffimg.getWidth();</div><div class=\"line\">       <span class=\"keyword\">int</span> h = buffimg.getHeight();</div><div class=\"line\">       IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">       <span class=\"comment\">// 水印图片位置</span></div><div class=\"line\">       op.geometry(watermarkImage.getWidth(<span class=\"keyword\">null</span>), watermarkImage.getHeight(<span class=\"keyword\">null</span>),</div><div class=\"line\">               w - watermarkImage.getWidth(<span class=\"keyword\">null</span>) - <span class=\"number\">10</span>, h - watermarkImage.getHeight(<span class=\"keyword\">null</span>) - <span class=\"number\">10</span>);</div><div class=\"line\">       <span class=\"comment\">// 水印透明度</span></div><div class=\"line\">       op.dissolve(dissolve);</div><div class=\"line\">       <span class=\"comment\">// 水印</span></div><div class=\"line\">       op.addImage(watermarkImagePath);</div><div class=\"line\">       <span class=\"comment\">// 原图</span></div><div class=\"line\">       op.addImage(srcImagePath);</div><div class=\"line\">       <span class=\"comment\">// 目标</span></div><div class=\"line\">       op.addImage(destImagePath);</div><div class=\"line\">       ImageCommand cmd = getImageCommand(CommandType.compositecmd);</div><div class=\"line\">       cmd.run(op);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://im4java.sourceforge.net/\" target=\"_blank\">im4java官网</a><br><a href=\"https://github.com/hailin0/im4java-util/blob/master/src/main/java/com/hlin/im4java/util/ImageUtil.java\" target=\"_blank\">hailin0/im4java-util</a></p>\n","excerpt":"","more":"<h1 id=\"使用-Grapicmagick-和-Im4java-处理图片\"><a href=\"#使用-Grapicmagick-和-Im4java-处理图片\" class=\"headerlink\" title=\"使用 Grapicmagick 和 Im4java 处理图片\"></a>使用 Grapicmagick 和 Im4java 处理图片</h1><p>ImageMagick是个图片处理工具可以安装在绝大多数的平台上使用，Linux、Mac、Windows都没有问题。GraphicsMagick是在ImageMagick基础上的另一个项目，大大提高了图片处理的性能，在linux平台上，可以使用命令行的形式处理图片。Im4java 和Jmagick 都是开源社区为上面两个工具开发的 Java API，性能和方便度上im4java是更好的选择。</p>\n<h1 id=\"JMagick-vs-Im4Java\"><a href=\"#JMagick-vs-Im4Java\" class=\"headerlink\" title=\"JMagick vs Im4Java\"></a>JMagick vs Im4Java</h1><ol>\n<li><p>JMagick是一个开源API，利用JNI(Java Native Interface)技术实现了对ImageMagick API的Java访问接口,因此也将比纯Java实现的图片操作函数在速度上要快。JMagick只实现了ImageMagicAPI的一部分功能，它的发行遵循LGPL协议。</p>\n</li>\n<li><p>im4java是ImageMagick的另一个Java开源接口。与JMagick不同之处在于im4java只是生成与ImageMagick相对应的命令行，然后将生成的命令行传至选中的ImageCommand（使用java.lang.ProcessBuilder.start()实现）来执行相应的操作。它支持大部分ImageMagick命令，可以针对不同组的图片多次复用同一个命令行。</p>\n</li>\n</ol>\n<p>im4java只是封装ImageMagick的命令。所以不需要依赖dll，也不存在64位系统调用32位dll的问题.而且im4java支持GraphicsMagick，GraphicsMagick是ImageMagick的分支。相对ImageMagick ,GraphicsMagick更稳定，消耗资源更少。最重要的是不依赖dll环境<br>所以使用 im4java 是更好的选择。</p>\n<h1 id=\"Im4java处理图片示例\"><a href=\"#Im4java处理图片示例\" class=\"headerlink\" title=\"Im4java处理图片示例\"></a>Im4java处理图片示例</h1><p>这篇文章主要是 im4java 的使用，而 im4java 又是对 GraphicsMagick 命令的封装，GraphicsMagick 命令的使用可以看另一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/52281828\" target=\"_blank\">GraphicsMagick 1.3.23 常用命令</a></p>\n<p>先写个包含获取图片信息的简单工具类，如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Im4JavaUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(Im4JavaUtils.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 图片质量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_QUALITY = <span class=\"string\">\"quality\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片高度</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_HEIGHT = <span class=\"string\">\"height\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片宽度</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_WIDTH = <span class=\"string\">\"width\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片格式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_SUFFIX = <span class=\"string\">\"suffix\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片大小</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_SIZE = <span class=\"string\">\"size\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_PATH = <span class=\"string\">\"path\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 是否使用 GraphicsMagick</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> IS_USE_GRAPHICS_MAGICK = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * ImageMagick安装路径，windows下使用</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_MAGICK_PATH = <span class=\"string\">\"D:\\\\software\\\\ImageMagick-6.2.7-Q8\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *  gm 命令所在目录</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String GRAPHICS_MAGICK_PATH = <span class=\"string\">\"/usr/local/bin\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 水印图片路径</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String watermarkImagePath = <span class=\"string\">\"/Users/gary/Documents/Job/ImageProcessTool/Im4java/Linux_logo.jpg\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 水印图片</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Image watermarkImage = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            watermarkImage = ImageIO.read(<span class=\"keyword\">new</span> File(watermarkImagePath));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 命令类型</div><div class=\"line\">     *</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">enum</span> CommandType &#123;</div><div class=\"line\">        convert(<span class=\"string\">\"转换处理\"</span>), identify(<span class=\"string\">\"图片信息\"</span>), compositecmd(<span class=\"string\">\"图片合成\"</span>);</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        CommandType(String name) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 查询图片的基本信息:格式,质量，宽度，高度</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     * gm identify -format %w,%h,%d/%f,%Q,%b,%e /Users/gary/Documents/999999999/10005582/1.jpg</div><div class=\"line\">     * &lt;p&gt;</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imagePath</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; <span class=\"title\">getImageInfo</span><span class=\"params\">(String imagePath)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</div><div class=\"line\">        Map&lt;String, String&gt; imageInfo = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">            op.format(<span class=\"string\">\"%w,%h,%d/%f,%Q,%b,%e\"</span>);</div><div class=\"line\">            op.addImage();</div><div class=\"line\">            ImageCommand identifyCmd = getImageCommand(CommandType.identify);</div><div class=\"line\">            ArrayListOutputConsumer output = <span class=\"keyword\">new</span> ArrayListOutputConsumer();</div><div class=\"line\">            identifyCmd.setOutputConsumer(output);</div><div class=\"line\">            identifyCmd.run(op, imagePath);</div><div class=\"line\">            ArrayList&lt;String&gt; cmdOutput = output.getOutput();</div><div class=\"line\">            String[] result = cmdOutput.get(<span class=\"number\">0</span>).split(<span class=\"string\">\",\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.length == <span class=\"number\">6</span>) &#123;</div><div class=\"line\">                imageInfo.put(IMAGE_WIDTH, result[<span class=\"number\">0</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_HEIGHT, result[<span class=\"number\">1</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_PATH, result[<span class=\"number\">2</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_QUALITY, result[<span class=\"number\">3</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_SIZE, result[<span class=\"number\">4</span>]);</div><div class=\"line\">                imageInfo.put(IMAGE_SUFFIX, result[<span class=\"number\">5</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// e.printStackTrace();</span></div><div class=\"line\">            logger.error(<span class=\"string\">\"图片工具获取图片基本信息异常\"</span> + e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</div><div class=\"line\">        <span class=\"comment\">// logger.info(\"take time: \" + (endTime - startTime));</span></div><div class=\"line\">        <span class=\"keyword\">return</span> imageInfo;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 获取 ImageCommand</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> command 命令类型</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ImageCommand <span class=\"title\">getImageCommand</span><span class=\"params\">(CommandType command)</span> </span>&#123;</div><div class=\"line\">       ImageCommand cmd = <span class=\"keyword\">null</span>;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (command) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> convert:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> ConvertCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> identify:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> IdentifyCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           <span class=\"keyword\">case</span> compositecmd:</div><div class=\"line\">               cmd = <span class=\"keyword\">new</span> CompositeCmd(IS_USE_GRAPHICS_MAGICK);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (cmd != <span class=\"keyword\">null</span> &amp;&amp; System.getProperty(<span class=\"string\">\"os.name\"</span>).toLowerCase().indexOf(<span class=\"string\">\"windows\"</span>) == -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">           cmd.setSearchPath(IS_USE_GRAPHICS_MAGICK ? GRAPHICS_MAGICK_PATH : IMAGE_MAGICK_PATH);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> cmd;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>上面的代码中要注意几个问题：</p>\n<ol>\n<li>获取 ImageCommand时，在new ConvertCmd(true)，参数要填true，不填的默认使用的是ImageMagick，参数为true时，才会使用grapicmagick的命令。</li>\n<li>获取 ImageCommand 后，要设置命令的搜索路径，有时可能会不稳定找不到gm命令，例如 cmd.setSearchPath(“/usr/local/bin”); (gm 命令在该路径下)</li>\n</ol>\n<p>获取图片信息的命令中有个参数 -format ，该参数可取的值如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">%b   file size of image read in</div><div class=\"line\">%c   comment property</div><div class=\"line\">%d   directory component of path</div><div class=\"line\">%e   filename extension or suffix</div><div class=\"line\">%<span class=\"function\">f   <span class=\"title\">filename</span> <span class=\"params\">(including suffix)</span></div><div class=\"line\">%g   layer canvas page <span class=\"title\">geometry</span>   <span class=\"params\">( = %Wx%H%X%Y )</span></div><div class=\"line\">%h   current image height in pixels</div><div class=\"line\">%i   image <span class=\"title\">filename</span> <span class=\"params\">(note: becomes output filename <span class=\"keyword\">for</span> <span class=\"string\">\"info:\"</span>)</span></div><div class=\"line\">%k   number of unique colors</div><div class=\"line\">%l   label property</div><div class=\"line\">%m   image file <span class=\"title\">format</span> <span class=\"params\">(file magic)</span></div><div class=\"line\">%n   exact number of images in current image sequence</div><div class=\"line\">%o   output <span class=\"title\">filename</span>  <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%p   index of image in current image list</div><div class=\"line\">%q   quantum <span class=\"title\">depth</span> <span class=\"params\">(compile-time constant)</span></div><div class=\"line\">%r   image class and colorspace</div><div class=\"line\">%s   scene <span class=\"title\">number</span> <span class=\"params\">(from input unless re-assigned)</span></div><div class=\"line\">%t   filename without directory or <span class=\"title\">extension</span> <span class=\"params\">(suffix)</span></div><div class=\"line\">%u   unique temporary <span class=\"title\">filename</span> <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%w   current width in pixels</div><div class=\"line\">%x   x <span class=\"title\">resolution</span> <span class=\"params\">(density)</span></div><div class=\"line\">%y   y <span class=\"title\">resolution</span> <span class=\"params\">(density)</span></div><div class=\"line\">%z   image <span class=\"title\">depth</span> <span class=\"params\">(as read in unless modified, image save depth)</span></div><div class=\"line\">%A   image transparency channel <span class=\"title\">enabled</span> <span class=\"params\">(<span class=\"keyword\">true</span>/<span class=\"keyword\">false</span>)</span></div><div class=\"line\">%C   image compression type</div><div class=\"line\">%D   image dispose method</div><div class=\"line\">%G   image <span class=\"title\">size</span> <span class=\"params\">( = %wx%h )</span></div><div class=\"line\">%H   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> height</div><div class=\"line\">%M   Magick <span class=\"title\">filename</span> <span class=\"params\">(original file exactly as given,  including read mods)</span></div><div class=\"line\">%O   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> <span class=\"title\">offset</span> <span class=\"params\">( = %X%Y )</span></div><div class=\"line\">%P   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> <span class=\"title\">size</span> <span class=\"params\">( = %Wx%H )</span></div><div class=\"line\">%Q   image compression <span class=\"title\">quality</span> <span class=\"params\">( <span class=\"number\">0</span> = <span class=\"keyword\">default</span> )</span></div><div class=\"line\">%S   ?? scenes ??</div><div class=\"line\">%T   image time delay</div><div class=\"line\">%W   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> width</div><div class=\"line\">%X   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> x <span class=\"title\">offset</span> <span class=\"params\">(including sign)</span></div><div class=\"line\">%Y   <span class=\"title\">page</span> <span class=\"params\">(canvas)</span> y <span class=\"title\">offset</span> <span class=\"params\">(including sign)</span></div><div class=\"line\">%Z   unique <span class=\"title\">filename</span> <span class=\"params\">(used <span class=\"keyword\">for</span> delegates)</span></div><div class=\"line\">%@   bounding box</div><div class=\"line\">%#   signature</div><div class=\"line\">%%   a percent sign</div><div class=\"line\">\\n   newline</div><div class=\"line\">\\r   carriage return</span></div></pre></td></tr></table></figure>\n<h1 id=\"压缩图片质量\"><a href=\"#压缩图片质量\" class=\"headerlink\" title=\"压缩图片质量\"></a>压缩图片质量</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * 图片压缩</div><div class=\"line\">   * &lt;p&gt;</div><div class=\"line\">   * 拼装命令示例: gm convert -quality 80 /apps/watch.jpg /apps/watch_compress.jpg</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> srcImagePath</div><div class=\"line\">   * <span class=\"doctag\">@param</span> destImagePath</div><div class=\"line\">   * <span class=\"doctag\">@param</span> quality</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">compressImage</span><span class=\"params\">(String srcImagePath, String destImagePath, <span class=\"keyword\">double</span> quality)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">      IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">      op.quality(quality);</div><div class=\"line\">      op.addImage();</div><div class=\"line\">      op.addImage();</div><div class=\"line\">      ImageCommand cmd = getImageCommand(CommandType.convert);</div><div class=\"line\">      cmd.run(op, srcImagePath, destImagePath);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"裁剪图片\"><a href=\"#裁剪图片\" class=\"headerlink\" title=\"裁剪图片\"></a>裁剪图片</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 裁剪图片</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x         起始X坐标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y         起始Y坐标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> width     裁剪宽度</div><div class=\"line\">    * <span class=\"doctag\">@param</span> height    裁剪高度</div><div class=\"line\">    * <span class=\"doctag\">@return</span> 返回true说明裁剪成功, 否则失败</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cutImage</span><span class=\"params\">(String imagePath, String newPath, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">           op.addImage(imagePath);</div><div class=\"line\">           <span class=\"comment\">/** width：裁剪的宽度 * height：裁剪的高度 * x：裁剪的横坐标 * y：裁剪纵坐标 */</span></div><div class=\"line\">           op.crop(width, height, x, y);</div><div class=\"line\">           op.addImage(newPath);</div><div class=\"line\">           ConvertCmd convert = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">           convert.run(op);</div><div class=\"line\">           flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">           System.out.println(<span class=\"string\">\"文件读取错误!\"</span>);</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (IM4JavaException e) &#123;</div><div class=\"line\">           flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">       &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> flag;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"缩放图片\"><a href=\"#缩放图片\" class=\"headerlink\" title=\"缩放图片\"></a>缩放图片</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * 根据尺寸缩放图片[等比例缩放:参数height为null,按宽度缩放比例缩放;参数width为null,按高度缩放比例缩放]</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> width     缩放后的图片宽度</div><div class=\"line\">     * <span class=\"doctag\">@param</span> height    缩放后的图片高度</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true说明缩放成功, 否则失败</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">zoomImage</span><span class=\"params\">(String imagePath, String newPath, Integer width, Integer height)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">boolean</span> flag;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">            op.addImage(imagePath);</div><div class=\"line\">            <span class=\"keyword\">if</span> (width == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 根据高度缩放图片</span></div><div class=\"line\">                op.resize(<span class=\"keyword\">null</span>, height);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (height == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 根据宽度缩放图片</span></div><div class=\"line\">                op.resize(width);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                op.resize(width, height);</div><div class=\"line\">            &#125;</div><div class=\"line\">            op.addImage(newPath);</div><div class=\"line\">            ConvertCmd convert = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">            convert.run(op);</div><div class=\"line\">            flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"文件读取错误!\"</span>);</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IM4JavaException e) &#123;</div><div class=\"line\">            flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> flag;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"图片旋转\"><a href=\"#图片旋转\" class=\"headerlink\" title=\"图片旋转\"></a>图片旋转</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">   * 图片旋转(顺时针旋转) </div><div class=\"line\">   * 拼装命令示例: gm convert -rotate 90 /apps/watch.jpg /apps/watch_compress.jpg</div><div class=\"line\">   *</div><div class=\"line\">   * <span class=\"doctag\">@param</span> imagePath 源图片路径</div><div class=\"line\">   * <span class=\"doctag\">@param</span> newPath   处理后图片路径</div><div class=\"line\">   * <span class=\"doctag\">@param</span> degree    旋转角度</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">rotate</span><span class=\"params\">(String imagePath, String newPath, <span class=\"keyword\">double</span> degree)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">boolean</span> flag;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          <span class=\"comment\">// 1.将角度转换到0-360度之间</span></div><div class=\"line\">          degree = degree % <span class=\"number\">360</span>;</div><div class=\"line\">          <span class=\"keyword\">if</span> (degree &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">              degree = <span class=\"number\">360</span> + degree;</div><div class=\"line\">          &#125;</div><div class=\"line\">          IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">          op.rotate(degree);</div><div class=\"line\">          op.addImage(imagePath);</div><div class=\"line\">          op.addImage(newPath);</div><div class=\"line\">          ConvertCmd cmd = <span class=\"keyword\">new</span> ConvertCmd(<span class=\"keyword\">true</span>);</div><div class=\"line\">          cmd.run(op);</div><div class=\"line\">          flag = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          flag = <span class=\"keyword\">false</span>;</div><div class=\"line\">          System.out.println(<span class=\"string\">\"图片旋转失败!\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> flag;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加文字水印\"><a href=\"#添加文字水印\" class=\"headerlink\" title=\"添加文字水印\"></a>添加文字水印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 文字水印</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> srcImagePath  源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> destImagePath 目标图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> content       文字内容（不支持汉字）</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addTextWatermark</span><span class=\"params\">(String srcImagePath, String destImagePath, String content)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\"></div><div class=\"line\">       op.font(<span class=\"string\">\"ArialBold\"</span>);</div><div class=\"line\">       <span class=\"comment\">// 文字方位-东南</span></div><div class=\"line\">       op.gravity(<span class=\"string\">\"southeast\"</span>);</div><div class=\"line\">       <span class=\"comment\">// 文字信息</span></div><div class=\"line\">       op.pointsize(<span class=\"number\">60</span>).fill(<span class=\"string\">\"#F2F2F2\"</span>).draw(<span class=\"string\">\"text 10,10 \"</span> + content);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">// 原图</span></div><div class=\"line\">       op.addImage(srcImagePath);</div><div class=\"line\">       <span class=\"comment\">// 目标</span></div><div class=\"line\">       op.addImage(destImagePath);</div><div class=\"line\">       ImageCommand cmd = getImageCommand(CommandType.convert);</div><div class=\"line\">       cmd.run(op);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>添加文字前要安装文字包，或直接指向 ttf 文字格式文件上。<br>OSX 安装</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">brew install ghostscript</div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加中文水印会乱码，待解决。</p>\n</blockquote>\n<h1 id=\"添加图片水印\"><a href=\"#添加图片水印\" class=\"headerlink\" title=\"添加图片水印\"></a>添加图片水印</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 图片水印</div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> srcImagePath  源图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> destImagePath 目标图片路径</div><div class=\"line\">    * <span class=\"doctag\">@param</span> dissolve      透明度（0-100）</div><div class=\"line\">    * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addImgWatermark</span><span class=\"params\">(String srcImagePath, String destImagePath, Integer dissolve)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// 原始图片信息</span></div><div class=\"line\">       BufferedImage buffimg = ImageIO.read(<span class=\"keyword\">new</span> File(srcImagePath));</div><div class=\"line\">       <span class=\"keyword\">int</span> w = buffimg.getWidth();</div><div class=\"line\">       <span class=\"keyword\">int</span> h = buffimg.getHeight();</div><div class=\"line\">       IMOperation op = <span class=\"keyword\">new</span> IMOperation();</div><div class=\"line\">       <span class=\"comment\">// 水印图片位置</span></div><div class=\"line\">       op.geometry(watermarkImage.getWidth(<span class=\"keyword\">null</span>), watermarkImage.getHeight(<span class=\"keyword\">null</span>),</div><div class=\"line\">               w - watermarkImage.getWidth(<span class=\"keyword\">null</span>) - <span class=\"number\">10</span>, h - watermarkImage.getHeight(<span class=\"keyword\">null</span>) - <span class=\"number\">10</span>);</div><div class=\"line\">       <span class=\"comment\">// 水印透明度</span></div><div class=\"line\">       op.dissolve(dissolve);</div><div class=\"line\">       <span class=\"comment\">// 水印</span></div><div class=\"line\">       op.addImage(watermarkImagePath);</div><div class=\"line\">       <span class=\"comment\">// 原图</span></div><div class=\"line\">       op.addImage(srcImagePath);</div><div class=\"line\">       <span class=\"comment\">// 目标</span></div><div class=\"line\">       op.addImage(destImagePath);</div><div class=\"line\">       ImageCommand cmd = getImageCommand(CommandType.compositecmd);</div><div class=\"line\">       cmd.run(op);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://im4java.sourceforge.net/\" target=\"_blank\">im4java官网</a><br><a href=\"https://github.com/hailin0/im4java-util/blob/master/src/main/java/com/hlin/im4java/util/ImageUtil.java\" target=\"_blank\">hailin0/im4java-util</a></p>\n"},{"title":"线程执行顺序——CountDownLatch、CyclicBarrier 、join()、线程池","date":"2017-01-25T07:10:14.000Z","_content":"\n本文主要围绕一个问题展开：线程执行顺序，比如某个线程在其他线程并发执行完毕后最后执行，分别用CountDownLatch、CyclicBarrier 、join()、线程池 来实现。\n\n# CyclicBarrier\n\nCyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法。\n\nCyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。\nCyclicBarrier还提供一个构造函数CyclicBarrier(int parties, Runnable barrierAction)，用于在线程到达屏障时，优先执行barrierAction这个Runnable对象，方便处理更复杂的业务场景。\n\n## 实现原理\n\n在CyclicBarrier的内部定义了一个Lock对象，每当一个线程调用CyclicBarrier的await方法时，将剩余拦截的线程数减1，然后判断剩余拦截数是否为0，如果不是，进入Lock对象的条件队列等待。如果是则执行barrierAction对象的Runnable方法，然后将锁的条件队列中的所有线程放入锁等待队列中，这些线程会依次的获取锁、释放锁，接着先从await方法返回，再从CyclicBarrier的await方法中返回。\n\n## 使用场景\n\nCyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。实际上可以通过CountDownLatch的countDown()和await()来实现CyclicBarrier的功能。即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。\n\n## 示例\n\n```java\npublic class CyclicBarrierPractice {\n\n    static class Worker implements Runnable{\n        private String name;\n        private CyclicBarrier cyclicBarrier;\n        public Worker(String name, CyclicBarrier cyclicBarrier){\n            this.name = name;\n            this.cyclicBarrier = cyclicBarrier;\n        }\n\n        public void run(){\n            System.out.println(name + \" is working\");\n            try {\n                Thread.sleep(1000);\n                cyclicBarrier.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    static class Boss implements Runnable{\n        private String name;\n\n        public Boss(String name){\n            this.name = name;\n        }\n\n        public void run(){\n            System.out.println(name + \" checking work\");\n\n        }\n    }\n\n    public static void main(String[] args){\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(3, new Boss(\"boss\"));\n        for(int i=0; i<3; i++){\n            new Thread(new Worker(\"worker\"+i, cyclicBarrier)).start();\n        }\n    }\n}\n\n```\n\n## 运行结果\n\n```java\nworker0 is working\nworker1 is working\nworker2 is working\nboss checking work\n```\n\n# join\njoin()是Thread类的一个方法，join()方法的作用是等待这个线程结束。t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。\n\n## join实现\nJoin方法实现是通过wait（Object 提供的方法）。 比如当main线程调用t.join时候，main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁),调用该对象的wait(等待时间)，直到该对象唤醒main线程，比如退出后。这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁。\n\n## 示例\n用join方式实现问题如下，在代码中main线程被阻塞直到 thread1，thread2执行完，主线程才会顺序的执行thread3.\n\n```java\n\npublic class OrderThreadExecute {\n\n\tclass OrderThread implements Runnable{\n        private String name;\n\n        public OrderThread(String name){\n            this.name = name;\n        }\n\n        public void run(){\n            System.out.println(name + \" is working\");\n        }\n    }\n\n    public static void main(String[] args) {\n        \n        //使用join方法顺序执行\n        OrderThread worker1 = orderThread.new OrderThread(\"worker1\");\n        OrderThread worker2 = orderThread.new OrderThread(\"worker2\");\n        OrderThread boss = orderThread.new OrderThread(\"boss\");\n\n        Thread thread1 = new Thread(worker1);\n        Thread thread2 = new Thread(worker2);\n        Thread thread3 = new Thread(boss);\n\n        thread1.start();\n        thread2.start();\n\n        try {\n            thread1.join();\n            thread2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        thread3.start();\n\n    }\n\n}\n\n```\n\n# CountDownLatch\nJava的util.concurrent包里面的CountDownLatch其实可以把它看作一个计数器（倒计时锁），只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个计数器，也就是同时只能有一个线程去减这个计数器里面的值。\n\n你可以向CountDownLatch对象设置一个初始的数字作为计数值，任何调用这个对象上的await()方法都会阻塞，直到这个计数器的计数值被其他的线程减为0为止。\n\n## 使用场景\n\nCountDownLatch的一个非常典型的应用场景是：有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以继续往下执行。假如我们这个想要继续往下执行的任务调用一个CountDownLatch对象的await()方法，其他的任务执行完自己的任务后调用同一个CountDownLatch对象上的countDown()方法，这个调用await()方法的任务将一直阻塞等待，直到这个CountDownLatch对象的计数值减到0为止。\n\n## 实例\n\n举个例子，有三个工人在为老板干活，这个老板有一个习惯，就是当三个工人把一天的活都干完了的时候，他就来检查所有工人所干的活。记住这个条件：三个工人先全部干完活，老板才检查。所以在这里用Java代码设计两个类，Worker代表工人，Boss代表老板，代码使用了内部类实现。\n\n```java\n\npublic class OrderThreadExecute {\n\n    class Worker implements Runnable {\n        private CountDownLatch downLatch;\n        private String name;\n\n        public Worker(CountDownLatch downLatch, String name) {\n            this.downLatch = downLatch;\n            this.name = name;\n        }\n\n        @Override\n        public void run() {\n            this.doWork();\n            try {\n                TimeUnit.SECONDS.sleep(new Random().nextInt(10));\n            } catch (InterruptedException ie) {\n            }\n            System.out.println(this.name + \"活干完了！\");\n            this.downLatch.countDown();\n        }\n\n        private void doWork() {\n            System.out.println(this.name + \"正在干活...\");\n        }\n\n    }\n\n    class Boss implements Runnable {\n        private CountDownLatch downLatch;\n\n        public Boss(CountDownLatch downLatch) {\n            this.downLatch = downLatch;\n        }\n\n        @Override\n        public void run() {\n            System.out.println(\"老板正在等所有的工人干完活......\");\n            try {\n                this.downLatch.await();\n            } catch (InterruptedException e) {\n            }\n            System.out.println(\"工人活都干完了，老板开始检查了！\");\n        }\n\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        CountDownLatch latch = new CountDownLatch(3);\n\n        OrderThreadExecute orderThread = new OrderThreadExecute();\n\n        Worker w1 = orderThread.new Worker(latch, \"张三\");\n        Worker w2 = orderThread.new Worker(latch, \"李四\");\n        Worker w3 = orderThread.new Worker(latch, \"王二\");\n\n        Boss boss = orderThread.new Boss(latch);\n\n        executor.execute(boss);\n        executor.execute(w3);\n        executor.execute(w2);\n        executor.execute(w1);\n\n        executor.shutdown();\n\n    }\n\n}\n\n```\n\n## CountDownLatch与join比较\n\n调用thread.join() 方法必须等thread 执行完毕，当前线程才能继续往下执行，而CountDownLatch通过计数器提供了更灵活的控制，只要检测到计数器为0当前线程就可以往下执行而不用管相应的thread是否执行完毕。\n\n>具体比较见文章：http://blog.csdn.net/nyistzp/article/details/51444487\n\n# 使用线程池\n\n当线程池的线程全部执行完毕后执行，勉强也算吧，示例代码如下。\n\n```java\npublic class ExecuteOrderPractice {\n\n    public void orderPractice(){\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        for(int i = 0; i < 5; i++){\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try{\n                        Thread.sleep(1000);\n                        System.out.println(Thread.currentThread().getName() + \" do something\");\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n\n        executorService.shutdown();\n\n        while(true){\n            if(executorService.isTerminated()){\n                System.out.println(\"Finally do something \");\n                break;\n            }\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new ExecuteOrderPractice().orderPractice();\n\n    }\n}\n\n```\n\n# 引申\n如何每个线程都顺序执行，听起来好像为什么还要用多线程呢，有空再看吧\n\n\n# 参考资料\n<a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\" target=\"_blank\">java 多线程 CountDownLatch与join()方法区别</a>\n<a href=\"http://www.aichengxu.com/java/2129819.htm\" target=\"_blank\">CountDownLatch使用实例</a>\n<a href=\"http://blog.csdn.net/truong/article/details/40227435\" target=\"_blank\">Java如何判断线程池所有任务是否执行完毕</a>\n   \n\n","source":"_posts/线程执行顺序——CountDownLatch、CyclicBarrier、join()、线程池.md","raw":"---\ntitle: 线程执行顺序——CountDownLatch、CyclicBarrier 、join()、线程池\ndate: 2017-01-25 15:10:14\ncategories: Java\ntags: Java\n---\n\n本文主要围绕一个问题展开：线程执行顺序，比如某个线程在其他线程并发执行完毕后最后执行，分别用CountDownLatch、CyclicBarrier 、join()、线程池 来实现。\n\n# CyclicBarrier\n\nCyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法。\n\nCyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。\nCyclicBarrier还提供一个构造函数CyclicBarrier(int parties, Runnable barrierAction)，用于在线程到达屏障时，优先执行barrierAction这个Runnable对象，方便处理更复杂的业务场景。\n\n## 实现原理\n\n在CyclicBarrier的内部定义了一个Lock对象，每当一个线程调用CyclicBarrier的await方法时，将剩余拦截的线程数减1，然后判断剩余拦截数是否为0，如果不是，进入Lock对象的条件队列等待。如果是则执行barrierAction对象的Runnable方法，然后将锁的条件队列中的所有线程放入锁等待队列中，这些线程会依次的获取锁、释放锁，接着先从await方法返回，再从CyclicBarrier的await方法中返回。\n\n## 使用场景\n\nCyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。实际上可以通过CountDownLatch的countDown()和await()来实现CyclicBarrier的功能。即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。\n\n## 示例\n\n```java\npublic class CyclicBarrierPractice {\n\n    static class Worker implements Runnable{\n        private String name;\n        private CyclicBarrier cyclicBarrier;\n        public Worker(String name, CyclicBarrier cyclicBarrier){\n            this.name = name;\n            this.cyclicBarrier = cyclicBarrier;\n        }\n\n        public void run(){\n            System.out.println(name + \" is working\");\n            try {\n                Thread.sleep(1000);\n                cyclicBarrier.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    static class Boss implements Runnable{\n        private String name;\n\n        public Boss(String name){\n            this.name = name;\n        }\n\n        public void run(){\n            System.out.println(name + \" checking work\");\n\n        }\n    }\n\n    public static void main(String[] args){\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(3, new Boss(\"boss\"));\n        for(int i=0; i<3; i++){\n            new Thread(new Worker(\"worker\"+i, cyclicBarrier)).start();\n        }\n    }\n}\n\n```\n\n## 运行结果\n\n```java\nworker0 is working\nworker1 is working\nworker2 is working\nboss checking work\n```\n\n# join\njoin()是Thread类的一个方法，join()方法的作用是等待这个线程结束。t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。\n\n## join实现\nJoin方法实现是通过wait（Object 提供的方法）。 比如当main线程调用t.join时候，main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁),调用该对象的wait(等待时间)，直到该对象唤醒main线程，比如退出后。这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁。\n\n## 示例\n用join方式实现问题如下，在代码中main线程被阻塞直到 thread1，thread2执行完，主线程才会顺序的执行thread3.\n\n```java\n\npublic class OrderThreadExecute {\n\n\tclass OrderThread implements Runnable{\n        private String name;\n\n        public OrderThread(String name){\n            this.name = name;\n        }\n\n        public void run(){\n            System.out.println(name + \" is working\");\n        }\n    }\n\n    public static void main(String[] args) {\n        \n        //使用join方法顺序执行\n        OrderThread worker1 = orderThread.new OrderThread(\"worker1\");\n        OrderThread worker2 = orderThread.new OrderThread(\"worker2\");\n        OrderThread boss = orderThread.new OrderThread(\"boss\");\n\n        Thread thread1 = new Thread(worker1);\n        Thread thread2 = new Thread(worker2);\n        Thread thread3 = new Thread(boss);\n\n        thread1.start();\n        thread2.start();\n\n        try {\n            thread1.join();\n            thread2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        thread3.start();\n\n    }\n\n}\n\n```\n\n# CountDownLatch\nJava的util.concurrent包里面的CountDownLatch其实可以把它看作一个计数器（倒计时锁），只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个计数器，也就是同时只能有一个线程去减这个计数器里面的值。\n\n你可以向CountDownLatch对象设置一个初始的数字作为计数值，任何调用这个对象上的await()方法都会阻塞，直到这个计数器的计数值被其他的线程减为0为止。\n\n## 使用场景\n\nCountDownLatch的一个非常典型的应用场景是：有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以继续往下执行。假如我们这个想要继续往下执行的任务调用一个CountDownLatch对象的await()方法，其他的任务执行完自己的任务后调用同一个CountDownLatch对象上的countDown()方法，这个调用await()方法的任务将一直阻塞等待，直到这个CountDownLatch对象的计数值减到0为止。\n\n## 实例\n\n举个例子，有三个工人在为老板干活，这个老板有一个习惯，就是当三个工人把一天的活都干完了的时候，他就来检查所有工人所干的活。记住这个条件：三个工人先全部干完活，老板才检查。所以在这里用Java代码设计两个类，Worker代表工人，Boss代表老板，代码使用了内部类实现。\n\n```java\n\npublic class OrderThreadExecute {\n\n    class Worker implements Runnable {\n        private CountDownLatch downLatch;\n        private String name;\n\n        public Worker(CountDownLatch downLatch, String name) {\n            this.downLatch = downLatch;\n            this.name = name;\n        }\n\n        @Override\n        public void run() {\n            this.doWork();\n            try {\n                TimeUnit.SECONDS.sleep(new Random().nextInt(10));\n            } catch (InterruptedException ie) {\n            }\n            System.out.println(this.name + \"活干完了！\");\n            this.downLatch.countDown();\n        }\n\n        private void doWork() {\n            System.out.println(this.name + \"正在干活...\");\n        }\n\n    }\n\n    class Boss implements Runnable {\n        private CountDownLatch downLatch;\n\n        public Boss(CountDownLatch downLatch) {\n            this.downLatch = downLatch;\n        }\n\n        @Override\n        public void run() {\n            System.out.println(\"老板正在等所有的工人干完活......\");\n            try {\n                this.downLatch.await();\n            } catch (InterruptedException e) {\n            }\n            System.out.println(\"工人活都干完了，老板开始检查了！\");\n        }\n\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        CountDownLatch latch = new CountDownLatch(3);\n\n        OrderThreadExecute orderThread = new OrderThreadExecute();\n\n        Worker w1 = orderThread.new Worker(latch, \"张三\");\n        Worker w2 = orderThread.new Worker(latch, \"李四\");\n        Worker w3 = orderThread.new Worker(latch, \"王二\");\n\n        Boss boss = orderThread.new Boss(latch);\n\n        executor.execute(boss);\n        executor.execute(w3);\n        executor.execute(w2);\n        executor.execute(w1);\n\n        executor.shutdown();\n\n    }\n\n}\n\n```\n\n## CountDownLatch与join比较\n\n调用thread.join() 方法必须等thread 执行完毕，当前线程才能继续往下执行，而CountDownLatch通过计数器提供了更灵活的控制，只要检测到计数器为0当前线程就可以往下执行而不用管相应的thread是否执行完毕。\n\n>具体比较见文章：http://blog.csdn.net/nyistzp/article/details/51444487\n\n# 使用线程池\n\n当线程池的线程全部执行完毕后执行，勉强也算吧，示例代码如下。\n\n```java\npublic class ExecuteOrderPractice {\n\n    public void orderPractice(){\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n        for(int i = 0; i < 5; i++){\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try{\n                        Thread.sleep(1000);\n                        System.out.println(Thread.currentThread().getName() + \" do something\");\n                    }catch (InterruptedException e){\n                        e.printStackTrace();\n                    }\n                }\n            });\n        }\n\n        executorService.shutdown();\n\n        while(true){\n            if(executorService.isTerminated()){\n                System.out.println(\"Finally do something \");\n                break;\n            }\n            try {\n                Thread.sleep(200);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args){\n        new ExecuteOrderPractice().orderPractice();\n\n    }\n}\n\n```\n\n# 引申\n如何每个线程都顺序执行，听起来好像为什么还要用多线程呢，有空再看吧\n\n\n# 参考资料\n<a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\" target=\"_blank\">java 多线程 CountDownLatch与join()方法区别</a>\n<a href=\"http://www.aichengxu.com/java/2129819.htm\" target=\"_blank\">CountDownLatch使用实例</a>\n<a href=\"http://blog.csdn.net/truong/article/details/40227435\" target=\"_blank\">Java如何判断线程池所有任务是否执行完毕</a>\n   \n\n","slug":"线程执行顺序——CountDownLatch、CyclicBarrier、join()、线程池","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27n000s6c9k9i1fhhwj","content":"<p>本文主要围绕一个问题展开：线程执行顺序，比如某个线程在其他线程并发执行完毕后最后执行，分别用CountDownLatch、CyclicBarrier 、join()、线程池 来实现。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>CyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法。</p>\n<p>CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。<br>CyclicBarrier还提供一个构造函数CyclicBarrier(int parties, Runnable barrierAction)，用于在线程到达屏障时，优先执行barrierAction这个Runnable对象，方便处理更复杂的业务场景。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>在CyclicBarrier的内部定义了一个Lock对象，每当一个线程调用CyclicBarrier的await方法时，将剩余拦截的线程数减1，然后判断剩余拦截数是否为0，如果不是，进入Lock对象的条件队列等待。如果是则执行barrierAction对象的Runnable方法，然后将锁的条件队列中的所有线程放入锁等待队列中，这些线程会依次的获取锁、释放锁，接着先从await方法返回，再从CyclicBarrier的await方法中返回。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>CyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。实际上可以通过CountDownLatch的countDown()和await()来实现CyclicBarrier的功能。即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\">        <span class=\"keyword\">private</span> CyclicBarrier cyclicBarrier;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name, CyclicBarrier cyclicBarrier)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.cyclicBarrier = cyclicBarrier;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">                cyclicBarrier.await();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" checking work\"</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> Boss(<span class=\"string\">\"boss\"</span>));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"worker\"</span>+i, cyclicBarrier)).start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">worker0 is working</div><div class=\"line\">worker1 is working</div><div class=\"line\">worker2 is working</div><div class=\"line\">boss checking work</div></pre></td></tr></table></figure>\n<h1 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h1><p>join()是Thread类的一个方法，join()方法的作用是等待这个线程结束。t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。</p>\n<h2 id=\"join实现\"><a href=\"#join实现\" class=\"headerlink\" title=\"join实现\"></a>join实现</h2><p>Join方法实现是通过wait（Object 提供的方法）。 比如当main线程调用t.join时候，main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁),调用该对象的wait(等待时间)，直到该对象唤醒main线程，比如退出后。这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>用join方式实现问题如下，在代码中main线程被阻塞直到 thread1，thread2执行完，主线程才会顺序的执行thread3.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThreadExecute</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderThread</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//使用join方法顺序执行</span></div><div class=\"line\">        OrderThread worker1 = orderThread.new OrderThread(<span class=\"string\">\"worker1\"</span>);</div><div class=\"line\">        OrderThread worker2 = orderThread.new OrderThread(<span class=\"string\">\"worker2\"</span>);</div><div class=\"line\">        OrderThread boss = orderThread.new OrderThread(<span class=\"string\">\"boss\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(worker1);</div><div class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(worker2);</div><div class=\"line\">        Thread thread3 = <span class=\"keyword\">new</span> Thread(boss);</div><div class=\"line\"></div><div class=\"line\">        thread1.start();</div><div class=\"line\">        thread2.start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            thread1.join();</div><div class=\"line\">            thread2.join();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        thread3.start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>Java的util.concurrent包里面的CountDownLatch其实可以把它看作一个计数器（倒计时锁），只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个计数器，也就是同时只能有一个线程去减这个计数器里面的值。</p>\n<p>你可以向CountDownLatch对象设置一个初始的数字作为计数值，任何调用这个对象上的await()方法都会阻塞，直到这个计数器的计数值被其他的线程减为0为止。</p>\n<h2 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>CountDownLatch的一个非常典型的应用场景是：有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以继续往下执行。假如我们这个想要继续往下执行的任务调用一个CountDownLatch对象的await()方法，其他的任务执行完自己的任务后调用同一个CountDownLatch对象上的countDown()方法，这个调用await()方法的任务将一直阻塞等待，直到这个CountDownLatch对象的计数值减到0为止。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>举个例子，有三个工人在为老板干活，这个老板有一个习惯，就是当三个工人把一天的活都干完了的时候，他就来检查所有工人所干的活。记住这个条件：三个工人先全部干完活，老板才检查。所以在这里用Java代码设计两个类，Worker代表工人，Boss代表老板，代码使用了内部类实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThreadExecute</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch downLatch;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(CountDownLatch downLatch, String name)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch = downLatch;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.doWork();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"活干完了！\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch.countDown();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"正在干活...\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch downLatch;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(CountDownLatch downLatch)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch = downLatch;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"老板正在等所有的工人干完活......\"</span>);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.downLatch.await();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"工人活都干完了，老板开始检查了！\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">        OrderThreadExecute orderThread = <span class=\"keyword\">new</span> OrderThreadExecute();</div><div class=\"line\"></div><div class=\"line\">        Worker w1 = orderThread.new Worker(latch, <span class=\"string\">\"张三\"</span>);</div><div class=\"line\">        Worker w2 = orderThread.new Worker(latch, <span class=\"string\">\"李四\"</span>);</div><div class=\"line\">        Worker w3 = orderThread.new Worker(latch, <span class=\"string\">\"王二\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Boss boss = orderThread.new Boss(latch);</div><div class=\"line\"></div><div class=\"line\">        executor.execute(boss);</div><div class=\"line\">        executor.execute(w3);</div><div class=\"line\">        executor.execute(w2);</div><div class=\"line\">        executor.execute(w1);</div><div class=\"line\"></div><div class=\"line\">        executor.shutdown();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CountDownLatch与join比较\"><a href=\"#CountDownLatch与join比较\" class=\"headerlink\" title=\"CountDownLatch与join比较\"></a>CountDownLatch与join比较</h2><p>调用thread.join() 方法必须等thread 执行完毕，当前线程才能继续往下执行，而CountDownLatch通过计数器提供了更灵活的控制，只要检测到计数器为0当前线程就可以往下执行而不用管相应的thread是否执行完毕。</p>\n<blockquote>\n<p>具体比较见文章：<a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/nyistzp/article/details/51444487</a></p>\n</blockquote>\n<h1 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h1><p>当线程池的线程全部执行完毕后执行，勉强也算吧，示例代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecuteOrderPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">orderPractice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">                        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" do something\"</span>);</div><div class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        executorService.shutdown();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(executorService.isTerminated())&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Finally do something \"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> ExecuteOrderPractice().orderPractice();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h1><p>如何每个线程都顺序执行，听起来好像为什么还要用多线程呢，有空再看吧</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\" target=\"_blank\">java 多线程 CountDownLatch与join()方法区别</a><br><a href=\"http://www.aichengxu.com/java/2129819.htm\" target=\"_blank\">CountDownLatch使用实例</a><br><a href=\"http://blog.csdn.net/truong/article/details/40227435\" target=\"_blank\">Java如何判断线程池所有任务是否执行完毕</a></p>\n","excerpt":"","more":"<p>本文主要围绕一个问题展开：线程执行顺序，比如某个线程在其他线程并发执行完毕后最后执行，分别用CountDownLatch、CyclicBarrier 、join()、线程池 来实现。</p>\n<h1 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h1><p>CyclicBarrier 的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法。</p>\n<p>CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞。<br>CyclicBarrier还提供一个构造函数CyclicBarrier(int parties, Runnable barrierAction)，用于在线程到达屏障时，优先执行barrierAction这个Runnable对象，方便处理更复杂的业务场景。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>在CyclicBarrier的内部定义了一个Lock对象，每当一个线程调用CyclicBarrier的await方法时，将剩余拦截的线程数减1，然后判断剩余拦截数是否为0，如果不是，进入Lock对象的条件队列等待。如果是则执行barrierAction对象的Runnable方法，然后将锁的条件队列中的所有线程放入锁等待队列中，这些线程会依次的获取锁、释放锁，接着先从await方法返回，再从CyclicBarrier的await方法中返回。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>CyclicBarrier主要用于一组线程之间的相互等待，而CountDownLatch一般用于一组线程等待另一组些线程。实际上可以通过CountDownLatch的countDown()和await()来实现CyclicBarrier的功能。即 CountDownLatch中的countDown()+await() = CyclicBarrier中的await()。注意：在一个线程中先调用countDown()，然后调用await()。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\">        <span class=\"keyword\">private</span> CyclicBarrier cyclicBarrier;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name, CyclicBarrier cyclicBarrier)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.cyclicBarrier = cyclicBarrier;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">                cyclicBarrier.await();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" checking work\"</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">3</span>, <span class=\"keyword\">new</span> Boss(<span class=\"string\">\"boss\"</span>));</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"worker\"</span>+i, cyclicBarrier)).start();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">worker0 is working</div><div class=\"line\">worker1 is working</div><div class=\"line\">worker2 is working</div><div class=\"line\">boss checking work</div></pre></td></tr></table></figure>\n<h1 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h1><p>join()是Thread类的一个方法，join()方法的作用是等待这个线程结束。t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。</p>\n<h2 id=\"join实现\"><a href=\"#join实现\" class=\"headerlink\" title=\"join实现\"></a>join实现</h2><p>Join方法实现是通过wait（Object 提供的方法）。 比如当main线程调用t.join时候，main线程会获得线程对象t的锁（wait 意味着拿到该对象的锁),调用该对象的wait(等待时间)，直到该对象唤醒main线程，比如退出后。这就意味着main 线程调用t.join时，必须能够拿到线程t对象的锁。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>用join方式实现问题如下，在代码中main线程被阻塞直到 thread1，thread2执行完，主线程才会顺序的执行thread3.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThreadExecute</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderThread</span><span class=\"params\">(String name)</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//使用join方法顺序执行</span></div><div class=\"line\">        OrderThread worker1 = orderThread.new OrderThread(<span class=\"string\">\"worker1\"</span>);</div><div class=\"line\">        OrderThread worker2 = orderThread.new OrderThread(<span class=\"string\">\"worker2\"</span>);</div><div class=\"line\">        OrderThread boss = orderThread.new OrderThread(<span class=\"string\">\"boss\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Thread thread1 = <span class=\"keyword\">new</span> Thread(worker1);</div><div class=\"line\">        Thread thread2 = <span class=\"keyword\">new</span> Thread(worker2);</div><div class=\"line\">        Thread thread3 = <span class=\"keyword\">new</span> Thread(boss);</div><div class=\"line\"></div><div class=\"line\">        thread1.start();</div><div class=\"line\">        thread2.start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            thread1.join();</div><div class=\"line\">            thread2.join();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        thread3.start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h1><p>Java的util.concurrent包里面的CountDownLatch其实可以把它看作一个计数器（倒计时锁），只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个计数器，也就是同时只能有一个线程去减这个计数器里面的值。</p>\n<p>你可以向CountDownLatch对象设置一个初始的数字作为计数值，任何调用这个对象上的await()方法都会阻塞，直到这个计数器的计数值被其他的线程减为0为止。</p>\n<h2 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>CountDownLatch的一个非常典型的应用场景是：有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以继续往下执行。假如我们这个想要继续往下执行的任务调用一个CountDownLatch对象的await()方法，其他的任务执行完自己的任务后调用同一个CountDownLatch对象上的countDown()方法，这个调用await()方法的任务将一直阻塞等待，直到这个CountDownLatch对象的计数值减到0为止。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>举个例子，有三个工人在为老板干活，这个老板有一个习惯，就是当三个工人把一天的活都干完了的时候，他就来检查所有工人所干的活。记住这个条件：三个工人先全部干完活，老板才检查。所以在这里用Java代码设计两个类，Worker代表工人，Boss代表老板，代码使用了内部类实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderThreadExecute</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch downLatch;</div><div class=\"line\">        <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(CountDownLatch downLatch, String name)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch = downLatch;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.doWork();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10</span>));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException ie) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"活干完了！\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch.countDown();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"正在干活...\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch downLatch;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(CountDownLatch downLatch)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.downLatch = downLatch;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"老板正在等所有的工人干完活......\"</span>);</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.downLatch.await();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"工人活都干完了，老板开始检查了！\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\">        OrderThreadExecute orderThread = <span class=\"keyword\">new</span> OrderThreadExecute();</div><div class=\"line\"></div><div class=\"line\">        Worker w1 = orderThread.new Worker(latch, <span class=\"string\">\"张三\"</span>);</div><div class=\"line\">        Worker w2 = orderThread.new Worker(latch, <span class=\"string\">\"李四\"</span>);</div><div class=\"line\">        Worker w3 = orderThread.new Worker(latch, <span class=\"string\">\"王二\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Boss boss = orderThread.new Boss(latch);</div><div class=\"line\"></div><div class=\"line\">        executor.execute(boss);</div><div class=\"line\">        executor.execute(w3);</div><div class=\"line\">        executor.execute(w2);</div><div class=\"line\">        executor.execute(w1);</div><div class=\"line\"></div><div class=\"line\">        executor.shutdown();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"CountDownLatch与join比较\"><a href=\"#CountDownLatch与join比较\" class=\"headerlink\" title=\"CountDownLatch与join比较\"></a>CountDownLatch与join比较</h2><p>调用thread.join() 方法必须等thread 执行完毕，当前线程才能继续往下执行，而CountDownLatch通过计数器提供了更灵活的控制，只要检测到计数器为0当前线程就可以往下执行而不用管相应的thread是否执行完毕。</p>\n<blockquote>\n<p>具体比较见文章：<a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\">http://blog.csdn.net/nyistzp/article/details/51444487</a></p>\n</blockquote>\n<h1 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h1><p>当线程池的线程全部执行完毕后执行，勉强也算吧，示例代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExecuteOrderPractice</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">orderPractice</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">3</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">                        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" do something\"</span>);</div><div class=\"line\">                    &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        executorService.shutdown();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(executorService.isTerminated())&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"Finally do something \"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> ExecuteOrderPractice().orderPractice();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h1><p>如何每个线程都顺序执行，听起来好像为什么还要用多线程呢，有空再看吧</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://blog.csdn.net/nyistzp/article/details/51444487\" target=\"_blank\">java 多线程 CountDownLatch与join()方法区别</a><br><a href=\"http://www.aichengxu.com/java/2129819.htm\" target=\"_blank\">CountDownLatch使用实例</a><br><a href=\"http://blog.csdn.net/truong/article/details/40227435\" target=\"_blank\">Java如何判断线程池所有任务是否执行完毕</a></p>\n"},{"title":"线程间协作——wait、notify、notifyAll","date":"2016-07-08T13:32:26.000Z","_content":"在 Java 中，可以通过配合调用 Object 对象的 wait() 方法和 notify()方法或 notifyAll() 方法来实现线程间的通信。在线程中调用 wait() 方法，将阻塞等待其他线程的通知（其他线程调用 notify() 方法或 notifyAll() 方法），在线程中调用 notify() 方法或 notifyAll() 方法，将通知其他线程从 wait() 方法处返回。\n\n# wait()\n该方法用来将当前线程置入休眠状态，直到接到通知或被中断为止。在调用 wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用 wait()方法。进入 wait()方法后，当前线程释放锁。\n\n# notify()\n该方法也要在同步方法或同步块中调用，即在调用前，线程也必须要获得该对象的对象级别锁。\n该方法用来通知那些可能等待该对象的对象锁的其他线程。如果有多个线程等待，则线程规划器任意挑选出其中一个 wait()状态的线程来发出通知，并使它等待获取该对象的对象锁（notify 后，当前线程不会马上释放该对象锁，wait 所在的线程并不能马上获取该对象锁，要等到程序退出 synchronized 代码块后，当前线程才会释放锁，wait所在的线程也才可以获取该对象锁），但不惊动其他同样在等待被该对象notify的线程们\n\n# notifyAll()\n该方法与 notify ()方法的工作方式相同，重要的一点差异是：\nnotifyAll 使所有原来在该对象上 wait 的线程统统退出 wait 的状态（即全部被唤醒，不再等待 notify 或 notifyAll，但由于此时还没有获取到该对象锁，因此还不能继续往下执行），变成等待获取该对象上的锁，一旦该对象锁被释放（notifyAll 线程退出调用了 notifyAll 的 synchronized 代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出 synchronized 代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。\n\n应该在while循环，而不是if语句中调用wait。if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程你也有可能被错误地唤醒。所以如果你不在线程被唤醒后再次使用while循环检查唤醒条件是否被满足，你的程序就有可能会出错。在while循环里使用wait的目的，是在线程被唤醒的前后都持续检查条件是否被满足。如果条件并未改变，wait被调用之前notify的唤醒通知就来了，那么这个线程并不能保证被唤醒，有可能会导致死锁问题。参考《Effective Java》\n\n# 示例\n我之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61008956\" target=\"_blank\">线程执行顺序——CountDownLatch、join()、线程池</a> 讨论的是让一个线程晚于其他线程最后执行。我想用wait和notify写个例子让一个线程先于其他线程运行。\n\n代码场景：Worker类和Boss类都实现Runnable接口，但是老板先安排完工作后，工人才能开始工作。\n\n代码实现：\n\n```java\npublic class WaitAndNotify {\n\n    public static void main(String[] args) throws Exception{\n\n        Object object = new Object();\n\n        new Thread(new Worker(\"work1\", object)).start();\n        new Thread(new Worker(\"work2\", object)).start();\n        new Thread(new Worker(\"work3\", object)).start();\n\n        new Thread(new Boss(\"boss\", object)).start();\n\n\n    }\n}\n\nclass Worker implements Runnable{\n\n    private String name;\n    private Object object;\n\n    public Worker(String name,Object object){\n        this.object = object;\n        this.name = name;\n    }\n\n    public void run(){\n        synchronized(object){\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(name + \" is working\");\n        }\n    }\n}\n\nclass Boss implements Runnable{\n\n    private String name;\n    private Object object;\n\n    public Boss(String name, Object object){\n        this.name = name;\n        this.object = object;\n    }\n\n    public void run(){\n        synchronized(object){\n            System.out.println(name + \" has arranged the work\");\n            object.notifyAll();\n            //object.notify();\n        }\n    }\n} \n```\n\n运行结果：\n\n```java\nboss has arranged the work\nwork3 is working\nwork2 is working\nwork1 is working\n```\n\n从上面的代码中可以看到，Boss类使用notifyAll（）方法，3个worker线程都会执行，如果换成 notify（）方法，则只有一个worker线程会执行。\n\n# 应用\n比如可以用wait和notify实现生产者和消费者，这里不细说了，有空再写下生产者和消费者吧。\n\n# 总结\n* 可以使用wait和notify函数来实现线程间通信。\n* 在synchronized的函数或对象里使用wait、notify和notifyAll，否则Java虚拟机会生成 IllegalMonitorStateException。\n* 在while循环里而不是if语句下使用wait。这样，循环会在线程睡眠前后都检查wait的条件，并在条件实际上并未改变的情况下处理唤醒通知。\n* 在多线程间共享的对象（在生产者消费者模型里即缓冲区队列）上使用wait。\n\n\n# 参考资料\n<a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/collaboration-between-threads.html\" target=\"_blank\">线程间协作：wait、notify、notifyAll</a>\n<a href=\"http://www.importnew.com/16453.html\" target=\"_blank\">如何在 Java 中正确使用 wait, notify 和 notifyAll – 以生产者消费者模型为例</a>\n\n\n\n","source":"_posts/线程间协作——wait、notify、notifyAll.md","raw":"---\ntitle: 线程间协作——wait、notify、notifyAll\ndate: 2016-07-08 21:32:26\ncategories: Java\ntags: Java多线程\n---\n在 Java 中，可以通过配合调用 Object 对象的 wait() 方法和 notify()方法或 notifyAll() 方法来实现线程间的通信。在线程中调用 wait() 方法，将阻塞等待其他线程的通知（其他线程调用 notify() 方法或 notifyAll() 方法），在线程中调用 notify() 方法或 notifyAll() 方法，将通知其他线程从 wait() 方法处返回。\n\n# wait()\n该方法用来将当前线程置入休眠状态，直到接到通知或被中断为止。在调用 wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用 wait()方法。进入 wait()方法后，当前线程释放锁。\n\n# notify()\n该方法也要在同步方法或同步块中调用，即在调用前，线程也必须要获得该对象的对象级别锁。\n该方法用来通知那些可能等待该对象的对象锁的其他线程。如果有多个线程等待，则线程规划器任意挑选出其中一个 wait()状态的线程来发出通知，并使它等待获取该对象的对象锁（notify 后，当前线程不会马上释放该对象锁，wait 所在的线程并不能马上获取该对象锁，要等到程序退出 synchronized 代码块后，当前线程才会释放锁，wait所在的线程也才可以获取该对象锁），但不惊动其他同样在等待被该对象notify的线程们\n\n# notifyAll()\n该方法与 notify ()方法的工作方式相同，重要的一点差异是：\nnotifyAll 使所有原来在该对象上 wait 的线程统统退出 wait 的状态（即全部被唤醒，不再等待 notify 或 notifyAll，但由于此时还没有获取到该对象锁，因此还不能继续往下执行），变成等待获取该对象上的锁，一旦该对象锁被释放（notifyAll 线程退出调用了 notifyAll 的 synchronized 代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出 synchronized 代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。\n\n应该在while循环，而不是if语句中调用wait。if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程你也有可能被错误地唤醒。所以如果你不在线程被唤醒后再次使用while循环检查唤醒条件是否被满足，你的程序就有可能会出错。在while循环里使用wait的目的，是在线程被唤醒的前后都持续检查条件是否被满足。如果条件并未改变，wait被调用之前notify的唤醒通知就来了，那么这个线程并不能保证被唤醒，有可能会导致死锁问题。参考《Effective Java》\n\n# 示例\n我之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61008956\" target=\"_blank\">线程执行顺序——CountDownLatch、join()、线程池</a> 讨论的是让一个线程晚于其他线程最后执行。我想用wait和notify写个例子让一个线程先于其他线程运行。\n\n代码场景：Worker类和Boss类都实现Runnable接口，但是老板先安排完工作后，工人才能开始工作。\n\n代码实现：\n\n```java\npublic class WaitAndNotify {\n\n    public static void main(String[] args) throws Exception{\n\n        Object object = new Object();\n\n        new Thread(new Worker(\"work1\", object)).start();\n        new Thread(new Worker(\"work2\", object)).start();\n        new Thread(new Worker(\"work3\", object)).start();\n\n        new Thread(new Boss(\"boss\", object)).start();\n\n\n    }\n}\n\nclass Worker implements Runnable{\n\n    private String name;\n    private Object object;\n\n    public Worker(String name,Object object){\n        this.object = object;\n        this.name = name;\n    }\n\n    public void run(){\n        synchronized(object){\n            try {\n                object.wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(name + \" is working\");\n        }\n    }\n}\n\nclass Boss implements Runnable{\n\n    private String name;\n    private Object object;\n\n    public Boss(String name, Object object){\n        this.name = name;\n        this.object = object;\n    }\n\n    public void run(){\n        synchronized(object){\n            System.out.println(name + \" has arranged the work\");\n            object.notifyAll();\n            //object.notify();\n        }\n    }\n} \n```\n\n运行结果：\n\n```java\nboss has arranged the work\nwork3 is working\nwork2 is working\nwork1 is working\n```\n\n从上面的代码中可以看到，Boss类使用notifyAll（）方法，3个worker线程都会执行，如果换成 notify（）方法，则只有一个worker线程会执行。\n\n# 应用\n比如可以用wait和notify实现生产者和消费者，这里不细说了，有空再写下生产者和消费者吧。\n\n# 总结\n* 可以使用wait和notify函数来实现线程间通信。\n* 在synchronized的函数或对象里使用wait、notify和notifyAll，否则Java虚拟机会生成 IllegalMonitorStateException。\n* 在while循环里而不是if语句下使用wait。这样，循环会在线程睡眠前后都检查wait的条件，并在条件实际上并未改变的情况下处理唤醒通知。\n* 在多线程间共享的对象（在生产者消费者模型里即缓冲区队列）上使用wait。\n\n\n# 参考资料\n<a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/collaboration-between-threads.html\" target=\"_blank\">线程间协作：wait、notify、notifyAll</a>\n<a href=\"http://www.importnew.com/16453.html\" target=\"_blank\">如何在 Java 中正确使用 wait, notify 和 notifyAll – 以生产者消费者模型为例</a>\n\n\n\n","slug":"线程间协作——wait、notify、notifyAll","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27r000x6c9kiwmes21e","content":"<p>在 Java 中，可以通过配合调用 Object 对象的 wait() 方法和 notify()方法或 notifyAll() 方法来实现线程间的通信。在线程中调用 wait() 方法，将阻塞等待其他线程的通知（其他线程调用 notify() 方法或 notifyAll() 方法），在线程中调用 notify() 方法或 notifyAll() 方法，将通知其他线程从 wait() 方法处返回。</p>\n<h1 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait()\"></a>wait()</h1><p>该方法用来将当前线程置入休眠状态，直到接到通知或被中断为止。在调用 wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用 wait()方法。进入 wait()方法后，当前线程释放锁。</p>\n<h1 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify()\"></a>notify()</h1><p>该方法也要在同步方法或同步块中调用，即在调用前，线程也必须要获得该对象的对象级别锁。<br>该方法用来通知那些可能等待该对象的对象锁的其他线程。如果有多个线程等待，则线程规划器任意挑选出其中一个 wait()状态的线程来发出通知，并使它等待获取该对象的对象锁（notify 后，当前线程不会马上释放该对象锁，wait 所在的线程并不能马上获取该对象锁，要等到程序退出 synchronized 代码块后，当前线程才会释放锁，wait所在的线程也才可以获取该对象锁），但不惊动其他同样在等待被该对象notify的线程们</p>\n<h1 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll()\"></a>notifyAll()</h1><p>该方法与 notify ()方法的工作方式相同，重要的一点差异是：<br>notifyAll 使所有原来在该对象上 wait 的线程统统退出 wait 的状态（即全部被唤醒，不再等待 notify 或 notifyAll，但由于此时还没有获取到该对象锁，因此还不能继续往下执行），变成等待获取该对象上的锁，一旦该对象锁被释放（notifyAll 线程退出调用了 notifyAll 的 synchronized 代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出 synchronized 代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。</p>\n<p>应该在while循环，而不是if语句中调用wait。if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程你也有可能被错误地唤醒。所以如果你不在线程被唤醒后再次使用while循环检查唤醒条件是否被满足，你的程序就有可能会出错。在while循环里使用wait的目的，是在线程被唤醒的前后都持续检查条件是否被满足。如果条件并未改变，wait被调用之前notify的唤醒通知就来了，那么这个线程并不能保证被唤醒，有可能会导致死锁问题。参考《Effective Java》</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>我之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61008956\" target=\"_blank\">线程执行顺序——CountDownLatch、join()、线程池</a> 讨论的是让一个线程晚于其他线程最后执行。我想用wait和notify写个例子让一个线程先于其他线程运行。</p>\n<p>代码场景：Worker类和Boss类都实现Runnable接口，但是老板先安排完工作后，工人才能开始工作。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitAndNotify</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work1\"</span>, object)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work2\"</span>, object)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work3\"</span>, object)).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Boss(<span class=\"string\">\"boss\"</span>, object)).start();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name,Object object)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.object = object;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(object)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                object.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(String name, Object object)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.object = object;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(object)&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" has arranged the work\"</span>);</div><div class=\"line\">            object.notifyAll();</div><div class=\"line\">            <span class=\"comment\">//object.notify();</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">boss has arranged the work</div><div class=\"line\">work3 is working</div><div class=\"line\">work2 is working</div><div class=\"line\">work1 is working</div></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到，Boss类使用notifyAll（）方法，3个worker线程都会执行，如果换成 notify（）方法，则只有一个worker线程会执行。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>比如可以用wait和notify实现生产者和消费者，这里不细说了，有空再写下生产者和消费者吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>可以使用wait和notify函数来实现线程间通信。</li>\n<li>在synchronized的函数或对象里使用wait、notify和notifyAll，否则Java虚拟机会生成 IllegalMonitorStateException。</li>\n<li>在while循环里而不是if语句下使用wait。这样，循环会在线程睡眠前后都检查wait的条件，并在条件实际上并未改变的情况下处理唤醒通知。</li>\n<li>在多线程间共享的对象（在生产者消费者模型里即缓冲区队列）上使用wait。</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/collaboration-between-threads.html\" target=\"_blank\">线程间协作：wait、notify、notifyAll</a><br><a href=\"http://www.importnew.com/16453.html\" target=\"_blank\">如何在 Java 中正确使用 wait, notify 和 notifyAll – 以生产者消费者模型为例</a></p>\n","excerpt":"","more":"<p>在 Java 中，可以通过配合调用 Object 对象的 wait() 方法和 notify()方法或 notifyAll() 方法来实现线程间的通信。在线程中调用 wait() 方法，将阻塞等待其他线程的通知（其他线程调用 notify() 方法或 notifyAll() 方法），在线程中调用 notify() 方法或 notifyAll() 方法，将通知其他线程从 wait() 方法处返回。</p>\n<h1 id=\"wait\"><a href=\"#wait\" class=\"headerlink\" title=\"wait()\"></a>wait()</h1><p>该方法用来将当前线程置入休眠状态，直到接到通知或被中断为止。在调用 wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用 wait()方法。进入 wait()方法后，当前线程释放锁。</p>\n<h1 id=\"notify\"><a href=\"#notify\" class=\"headerlink\" title=\"notify()\"></a>notify()</h1><p>该方法也要在同步方法或同步块中调用，即在调用前，线程也必须要获得该对象的对象级别锁。<br>该方法用来通知那些可能等待该对象的对象锁的其他线程。如果有多个线程等待，则线程规划器任意挑选出其中一个 wait()状态的线程来发出通知，并使它等待获取该对象的对象锁（notify 后，当前线程不会马上释放该对象锁，wait 所在的线程并不能马上获取该对象锁，要等到程序退出 synchronized 代码块后，当前线程才会释放锁，wait所在的线程也才可以获取该对象锁），但不惊动其他同样在等待被该对象notify的线程们</p>\n<h1 id=\"notifyAll\"><a href=\"#notifyAll\" class=\"headerlink\" title=\"notifyAll()\"></a>notifyAll()</h1><p>该方法与 notify ()方法的工作方式相同，重要的一点差异是：<br>notifyAll 使所有原来在该对象上 wait 的线程统统退出 wait 的状态（即全部被唤醒，不再等待 notify 或 notifyAll，但由于此时还没有获取到该对象锁，因此还不能继续往下执行），变成等待获取该对象上的锁，一旦该对象锁被释放（notifyAll 线程退出调用了 notifyAll 的 synchronized 代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出 synchronized 代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。</p>\n<p>应该在while循环，而不是if语句中调用wait。if语句存在一些微妙的小问题，导致即使条件没被满足，你的线程你也有可能被错误地唤醒。所以如果你不在线程被唤醒后再次使用while循环检查唤醒条件是否被满足，你的程序就有可能会出错。在while循环里使用wait的目的，是在线程被唤醒的前后都持续检查条件是否被满足。如果条件并未改变，wait被调用之前notify的唤醒通知就来了，那么这个线程并不能保证被唤醒，有可能会导致死锁问题。参考《Effective Java》</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>我之前写过一篇文章 <a href=\"http://blog.csdn.net/revitalizing/article/details/61008956\" target=\"_blank\">线程执行顺序——CountDownLatch、join()、线程池</a> 讨论的是让一个线程晚于其他线程最后执行。我想用wait和notify写个例子让一个线程先于其他线程运行。</p>\n<p>代码场景：Worker类和Boss类都实现Runnable接口，但是老板先安排完工作后，工人才能开始工作。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitAndNotify</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Object object = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work1\"</span>, object)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work2\"</span>, object)).start();</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Worker(<span class=\"string\">\"work3\"</span>, object)).start();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Boss(<span class=\"string\">\"boss\"</span>, object)).start();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name,Object object)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.object = object;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(object)&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                object.wait();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" is working\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> Object object;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boss</span><span class=\"params\">(String name, Object object)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.object = object;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(object)&#123;</div><div class=\"line\">            System.out.println(name + <span class=\"string\">\" has arranged the work\"</span>);</div><div class=\"line\">            object.notifyAll();</div><div class=\"line\">            <span class=\"comment\">//object.notify();</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">boss has arranged the work</div><div class=\"line\">work3 is working</div><div class=\"line\">work2 is working</div><div class=\"line\">work1 is working</div></pre></td></tr></table></figure>\n<p>从上面的代码中可以看到，Boss类使用notifyAll（）方法，3个worker线程都会执行，如果换成 notify（）方法，则只有一个worker线程会执行。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><p>比如可以用wait和notify实现生产者和消费者，这里不细说了，有空再写下生产者和消费者吧。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>可以使用wait和notify函数来实现线程间通信。</li>\n<li>在synchronized的函数或对象里使用wait、notify和notifyAll，否则Java虚拟机会生成 IllegalMonitorStateException。</li>\n<li>在while循环里而不是if语句下使用wait。这样，循环会在线程睡眠前后都检查wait的条件，并在条件实际上并未改变的情况下处理唤醒通知。</li>\n<li>在多线程间共享的对象（在生产者消费者模型里即缓冲区队列）上使用wait。</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://wiki.jikexueyuan.com/project/java-concurrency/collaboration-between-threads.html\" target=\"_blank\">线程间协作：wait、notify、notifyAll</a><br><a href=\"http://www.importnew.com/16453.html\" target=\"_blank\">如何在 Java 中正确使用 wait, notify 和 notifyAll – 以生产者消费者模型为例</a></p>\n"},{"title":"设计模式——代理模式","date":"2017-04-15T02:32:54.000Z","_content":"\n# 设计模式——代理模式\n\n# 模式介绍\n代理模式：为其他对象提供一种代理以控制对这个对象的访问。\n代理模式(Proxy)是一种结构型设计模式,主要解决的问题是：在直接访问对象时带来的问题. \n\n# 分类\n* 静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的 class 文件。\n\n* 动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。\n\n# 静态代理模式结构\n## 模式涉及角色\nRealSubject 是原对象（或称委托对象），ProxyObject是代理对象。\nSubject 是委托对象和代理对象都共同实现的接口。\nleave() 是委托对象和代理对象共同拥有的方法。\n\n## 结构图\n\n\n# 示例\n比如某人要请假，因为有事不能直接去请假，可以找个同事（代理对象）帮他请假。\n\n## 代码实现\n\n```java\n/**\n * ClassName: ProxyPattern <br/>\n * Function: 静态代理和动态代理<br/>\n *\n * @author gary.liu\n * @date 2017/5/23\n */\npublic class ProxyPattern {\n\n    public static void main(String[] args){\n\n        /**\n         * 静态代理测试\n         */\n        RealSubject realSubject = new RealSubject();  //委托对象\n        ProxyObject proxyObject = new ProxyObject(realSubject);  //代理对象\n\n        proxyObject.leave();\n\n    }\n}\n\ninterface Subject{\n    /**\n     * 请假接口\n     */\n    void leave();\n}\n\nclass RealSubject implements Subject {\n\n    @Override\n    public void leave(){\n        System.out.println(\"RealSubject leave request\");\n    }\n\n}\n\nclass ProxyObject implements Subject {\n\n    private Subject subject;\n\n    public ProxyObject(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void leave(){\n        System.out.println(\"真正对象告诉代理帮他请假\");\n        subject.leave();\n        System.out.println(\"代理告诉真正对象请假成功\");\n    }\n\n}\n\n```\n\n# 动态代理\n动态代理的思维模式与之前的一般模式是一样的，也是面向接口进行编码，创建代理类将具体类隐藏解耦，不同之处在于代理类的创建时机不同，动态代理需要在运行时因需实时创建.\n\n# 模式结构\n和上面类似，需要一个接口和实现了这个接口的真实对象类，然后还要自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类。\n\n## 结构图\n\n\n# 代码实现\n用动态代理实现上面的场景，需要自定义一个调用处理器类。\n\n```java\npublic class ProxyPattern {\n\n    public static void main(String[] args){\n\n        /**\n         * 动态代理测试\n         */\n        ProxyHandler proxyHandler = new ProxyHandler(realSubject);\n        //动态生成代理对象\n        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject.class.getClassLoader(), RealSubject.class.getInterfaces(),\n                proxyHandler);\n        proxySubject.leave();\n\n    }\n}\n\n/**\n * 动态代理实现上面的例子\n *\n */\nclass ProxyHandler implements InvocationHandler {\n\n    private Subject subject;\n\n    public ProxyHandler(Subject subject){\n\n        this.subject = subject;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args){\n\n        Object result = null;\n        System.out.println(\"真正对象告诉代理帮他请假\");\n        try{\n            result = method.invoke(subject, args);\n\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        System.out.println(\"代理告诉真正对象请假成功\");\n\n        return result;\n    }\n\n}\n\n```\n\n# jdk动态代理为什么要求委托对象实现接口\n\n```java\n//创建代理对象  \nstatic Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)\n```\n第二个参数是接口，表明这个代理类需要实现哪些接口。\n因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。\n\n生成的代理类：\n\n```java\npublic final class $Proxy0 extends Proxy implements Subject{}\n```\n\n# 扩展\n代理模式用到的地方很多，比如 spring aop 使用的便是动态代理模式，spring aop 有两种实现方式，一种是jdk动态代理（要求委托对象实现接口）；另一种是字节码增强，委托对象可以不实现接口，具体实现如 cglib。\n\n\n# 参考资料\n<a href=\"http://www.jianshu.com/p/6f6bb2f0ece9\" target=\"_blank\">代理模式及Java实现动态代理</a>\n\n《大话设计模式》\n\n","source":"_posts/设计模式——代理模式.md","raw":"---\ntitle: 设计模式——代理模式\ndate: 2017-04-15 10:32:54\ncategories: Design pattern\ntags: Design pattern\n---\n\n# 设计模式——代理模式\n\n# 模式介绍\n代理模式：为其他对象提供一种代理以控制对这个对象的访问。\n代理模式(Proxy)是一种结构型设计模式,主要解决的问题是：在直接访问对象时带来的问题. \n\n# 分类\n* 静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的 class 文件。\n\n* 动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。\n\n# 静态代理模式结构\n## 模式涉及角色\nRealSubject 是原对象（或称委托对象），ProxyObject是代理对象。\nSubject 是委托对象和代理对象都共同实现的接口。\nleave() 是委托对象和代理对象共同拥有的方法。\n\n## 结构图\n\n\n# 示例\n比如某人要请假，因为有事不能直接去请假，可以找个同事（代理对象）帮他请假。\n\n## 代码实现\n\n```java\n/**\n * ClassName: ProxyPattern <br/>\n * Function: 静态代理和动态代理<br/>\n *\n * @author gary.liu\n * @date 2017/5/23\n */\npublic class ProxyPattern {\n\n    public static void main(String[] args){\n\n        /**\n         * 静态代理测试\n         */\n        RealSubject realSubject = new RealSubject();  //委托对象\n        ProxyObject proxyObject = new ProxyObject(realSubject);  //代理对象\n\n        proxyObject.leave();\n\n    }\n}\n\ninterface Subject{\n    /**\n     * 请假接口\n     */\n    void leave();\n}\n\nclass RealSubject implements Subject {\n\n    @Override\n    public void leave(){\n        System.out.println(\"RealSubject leave request\");\n    }\n\n}\n\nclass ProxyObject implements Subject {\n\n    private Subject subject;\n\n    public ProxyObject(Subject subject){\n        this.subject = subject;\n    }\n\n    @Override\n    public void leave(){\n        System.out.println(\"真正对象告诉代理帮他请假\");\n        subject.leave();\n        System.out.println(\"代理告诉真正对象请假成功\");\n    }\n\n}\n\n```\n\n# 动态代理\n动态代理的思维模式与之前的一般模式是一样的，也是面向接口进行编码，创建代理类将具体类隐藏解耦，不同之处在于代理类的创建时机不同，动态代理需要在运行时因需实时创建.\n\n# 模式结构\n和上面类似，需要一个接口和实现了这个接口的真实对象类，然后还要自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类。\n\n## 结构图\n\n\n# 代码实现\n用动态代理实现上面的场景，需要自定义一个调用处理器类。\n\n```java\npublic class ProxyPattern {\n\n    public static void main(String[] args){\n\n        /**\n         * 动态代理测试\n         */\n        ProxyHandler proxyHandler = new ProxyHandler(realSubject);\n        //动态生成代理对象\n        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject.class.getClassLoader(), RealSubject.class.getInterfaces(),\n                proxyHandler);\n        proxySubject.leave();\n\n    }\n}\n\n/**\n * 动态代理实现上面的例子\n *\n */\nclass ProxyHandler implements InvocationHandler {\n\n    private Subject subject;\n\n    public ProxyHandler(Subject subject){\n\n        this.subject = subject;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args){\n\n        Object result = null;\n        System.out.println(\"真正对象告诉代理帮他请假\");\n        try{\n            result = method.invoke(subject, args);\n\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n        System.out.println(\"代理告诉真正对象请假成功\");\n\n        return result;\n    }\n\n}\n\n```\n\n# jdk动态代理为什么要求委托对象实现接口\n\n```java\n//创建代理对象  \nstatic Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h)\n```\n第二个参数是接口，表明这个代理类需要实现哪些接口。\n因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。\n\n生成的代理类：\n\n```java\npublic final class $Proxy0 extends Proxy implements Subject{}\n```\n\n# 扩展\n代理模式用到的地方很多，比如 spring aop 使用的便是动态代理模式，spring aop 有两种实现方式，一种是jdk动态代理（要求委托对象实现接口）；另一种是字节码增强，委托对象可以不实现接口，具体实现如 cglib。\n\n\n# 参考资料\n<a href=\"http://www.jianshu.com/p/6f6bb2f0ece9\" target=\"_blank\">代理模式及Java实现动态代理</a>\n\n《大话设计模式》\n\n","slug":"设计模式——代理模式","published":1,"updated":"2019-05-24T17:05:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1jnu27s00106c9kslrg1pl6","content":"<h1 id=\"设计模式——代理模式\"><a href=\"#设计模式——代理模式\" class=\"headerlink\" title=\"设计模式——代理模式\"></a>设计模式——代理模式</h1><h1 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h1><p>代理模式：为其他对象提供一种代理以控制对这个对象的访问。<br>代理模式(Proxy)是一种结构型设计模式,主要解决的问题是：在直接访问对象时带来的问题. </p>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><ul>\n<li><p>静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的 class 文件。</p>\n</li>\n<li><p>动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。</p>\n</li>\n</ul>\n<h1 id=\"静态代理模式结构\"><a href=\"#静态代理模式结构\" class=\"headerlink\" title=\"静态代理模式结构\"></a>静态代理模式结构</h1><h2 id=\"模式涉及角色\"><a href=\"#模式涉及角色\" class=\"headerlink\" title=\"模式涉及角色\"></a>模式涉及角色</h2><p>RealSubject 是原对象（或称委托对象），ProxyObject是代理对象。<br>Subject 是委托对象和代理对象都共同实现的接口。<br>leave() 是委托对象和代理对象共同拥有的方法。</p>\n<h2 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h2><h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>比如某人要请假，因为有事不能直接去请假，可以找个同事（代理对象）帮他请假。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * ClassName: ProxyPattern &lt;br/&gt;</div><div class=\"line\"> * Function: 静态代理和动态代理&lt;br/&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> gary.liu</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/23</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 静态代理测试</div><div class=\"line\">         */</div><div class=\"line\">        RealSubject realSubject = <span class=\"keyword\">new</span> RealSubject();  <span class=\"comment\">//委托对象</span></div><div class=\"line\">        ProxyObject proxyObject = <span class=\"keyword\">new</span> ProxyObject(realSubject);  <span class=\"comment\">//代理对象</span></div><div class=\"line\"></div><div class=\"line\">        proxyObject.leave();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 请假接口</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"RealSubject leave request\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyObject</span><span class=\"params\">(Subject subject)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"真正对象告诉代理帮他请假\"</span>);</div><div class=\"line\">        subject.leave();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"代理告诉真正对象请假成功\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><p>动态代理的思维模式与之前的一般模式是一样的，也是面向接口进行编码，创建代理类将具体类隐藏解耦，不同之处在于代理类的创建时机不同，动态代理需要在运行时因需实时创建.</p>\n<h1 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h1><p>和上面类似，需要一个接口和实现了这个接口的真实对象类，然后还要自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类。</p>\n<h2 id=\"结构图-1\"><a href=\"#结构图-1\" class=\"headerlink\" title=\"结构图\"></a>结构图</h2><h1 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>用动态代理实现上面的场景，需要自定义一个调用处理器类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 动态代理测试</div><div class=\"line\">         */</div><div class=\"line\">        ProxyHandler proxyHandler = <span class=\"keyword\">new</span> ProxyHandler(realSubject);</div><div class=\"line\">        <span class=\"comment\">//动态生成代理对象</span></div><div class=\"line\">        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject.class.getClassLoader(), RealSubject.class.getInterfaces(),</div><div class=\"line\">                proxyHandler);</div><div class=\"line\">        proxySubject.leave();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 动态代理实现上面的例子</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyHandler</span><span class=\"params\">(Subject subject)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Object result = <span class=\"keyword\">null</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"真正对象告诉代理帮他请假\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            result = method.invoke(subject, args);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"代理告诉真正对象请假成功\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"jdk动态代理为什么要求委托对象实现接口\"><a href=\"#jdk动态代理为什么要求委托对象实现接口\" class=\"headerlink\" title=\"jdk动态代理为什么要求委托对象实现接口\"></a>jdk动态代理为什么要求委托对象实现接口</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建代理对象  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></div></pre></td></tr></table></figure>\n<p>第二个参数是接口，表明这个代理类需要实现哪些接口。<br>因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。</p>\n<p>生成的代理类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>代理模式用到的地方很多，比如 spring aop 使用的便是动态代理模式，spring aop 有两种实现方式，一种是jdk动态代理（要求委托对象实现接口）；另一种是字节码增强，委托对象可以不实现接口，具体实现如 cglib。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.jianshu.com/p/6f6bb2f0ece9\" target=\"_blank\">代理模式及Java实现动态代理</a></p>\n<p>《大话设计模式》</p>\n","excerpt":"","more":"<h1 id=\"设计模式——代理模式\"><a href=\"#设计模式——代理模式\" class=\"headerlink\" title=\"设计模式——代理模式\"></a>设计模式——代理模式</h1><h1 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h1><p>代理模式：为其他对象提供一种代理以控制对这个对象的访问。<br>代理模式(Proxy)是一种结构型设计模式,主要解决的问题是：在直接访问对象时带来的问题. </p>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><ul>\n<li><p>静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的 class 文件。</p>\n</li>\n<li><p>动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。</p>\n</li>\n</ul>\n<h1 id=\"静态代理模式结构\"><a href=\"#静态代理模式结构\" class=\"headerlink\" title=\"静态代理模式结构\"></a>静态代理模式结构</h1><h2 id=\"模式涉及角色\"><a href=\"#模式涉及角色\" class=\"headerlink\" title=\"模式涉及角色\"></a>模式涉及角色</h2><p>RealSubject 是原对象（或称委托对象），ProxyObject是代理对象。<br>Subject 是委托对象和代理对象都共同实现的接口。<br>leave() 是委托对象和代理对象共同拥有的方法。</p>\n<h2 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h2><h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>比如某人要请假，因为有事不能直接去请假，可以找个同事（代理对象）帮他请假。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * ClassName: ProxyPattern &lt;br/&gt;</div><div class=\"line\"> * Function: 静态代理和动态代理&lt;br/&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@author</span> gary.liu</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017/5/23</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 静态代理测试</div><div class=\"line\">         */</span></div><div class=\"line\">        RealSubject realSubject = <span class=\"keyword\">new</span> RealSubject();  <span class=\"comment\">//委托对象</span></div><div class=\"line\">        ProxyObject proxyObject = <span class=\"keyword\">new</span> ProxyObject(realSubject);  <span class=\"comment\">//代理对象</span></div><div class=\"line\"></div><div class=\"line\">        proxyObject.leave();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 请假接口</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"RealSubject leave request\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyObject</span><span class=\"params\">(Subject subject)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">leave</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"真正对象告诉代理帮他请假\"</span>);</div><div class=\"line\">        subject.leave();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"代理告诉真正对象请假成功\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><p>动态代理的思维模式与之前的一般模式是一样的，也是面向接口进行编码，创建代理类将具体类隐藏解耦，不同之处在于代理类的创建时机不同，动态代理需要在运行时因需实时创建.</p>\n<h1 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h1><p>和上面类似，需要一个接口和实现了这个接口的真实对象类，然后还要自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类。</p>\n<h2 id=\"结构图-1\"><a href=\"#结构图-1\" class=\"headerlink\" title=\"结构图\"></a>结构图</h2><h1 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>用动态代理实现上面的场景，需要自定义一个调用处理器类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPattern</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 动态代理测试</div><div class=\"line\">         */</span></div><div class=\"line\">        ProxyHandler proxyHandler = <span class=\"keyword\">new</span> ProxyHandler(realSubject);</div><div class=\"line\">        <span class=\"comment\">//动态生成代理对象</span></div><div class=\"line\">        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject.class.getClassLoader(), RealSubject.class.getInterfaces(),</div><div class=\"line\">                proxyHandler);</div><div class=\"line\">        proxySubject.leave();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 动态代理实现上面的例子</div><div class=\"line\"> *</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Subject subject;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyHandler</span><span class=\"params\">(Subject subject)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Object result = <span class=\"keyword\">null</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"真正对象告诉代理帮他请假\"</span>);</div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            result = method.invoke(subject, args);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"代理告诉真正对象请假成功\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"jdk动态代理为什么要求委托对象实现接口\"><a href=\"#jdk动态代理为什么要求委托对象实现接口\" class=\"headerlink\" title=\"jdk动态代理为什么要求委托对象实现接口\"></a>jdk动态代理为什么要求委托对象实现接口</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建代理对象  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></div></pre></td></tr></table></figure>\n<p>第二个参数是接口，表明这个代理类需要实现哪些接口。<br>因为 Java 的单继承特性（每个代理类都继承了 Proxy 类），只能针对接口创建代理类，不能针对类创建代理类。</p>\n<p>生成的代理类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy0</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span></span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>代理模式用到的地方很多，比如 spring aop 使用的便是动态代理模式，spring aop 有两种实现方式，一种是jdk动态代理（要求委托对象实现接口）；另一种是字节码增强，委托对象可以不实现接口，具体实现如 cglib。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://www.jianshu.com/p/6f6bb2f0ece9\" target=\"_blank\">代理模式及Java实现动态代理</a></p>\n<p>《大话设计模式》</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1jnu27900096c9kb7aimeu3","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27e000f6c9kswj7znlu"},{"post_id":"ck1jnu26p00026c9kakjz3ygy","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27h000j6c9k0ru271ru"},{"post_id":"ck1jnu26u00046c9kat6vc6ab","category_id":"ck1jnu27b000b6c9ksja1i1si","_id":"ck1jnu27j000n6c9kef5hdbbx"},{"post_id":"ck1jnu27200086c9kf64xnwcq","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27o000t6c9k2e0wvz30"},{"post_id":"ck1jnu27l000q6c9k7ksp3q56","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27s000y6c9koxgiiz9z"},{"post_id":"ck1jnu27b000a6c9kjich6u5x","category_id":"ck1jnu27k000o6c9kdcu09rp0","_id":"ck1jnu27u00116c9kxgx2tuak"},{"post_id":"ck1jnu27n000s6c9k9i1fhhwj","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27x00156c9ksyrgxklz"},{"post_id":"ck1jnu27r000x6c9kiwmes21e","category_id":"ck1jnu26y00056c9kh77wivcz","_id":"ck1jnu27y00176c9ksni25nh6"},{"post_id":"ck1jnu27d000e6c9kwy5rryak","category_id":"ck1jnu27q000u6c9koyk1yow7","_id":"ck1jnu27z001b6c9ko085cw8e"},{"post_id":"ck1jnu27e000g6c9kq18cud6i","category_id":"ck1jnu27v00136c9kqdvpur9x","_id":"ck1jnu280001d6c9keht47mp6"},{"post_id":"ck1jnu27i000m6c9kmg3b3c2b","category_id":"ck1jnu27y00196c9knwayg56t","_id":"ck1jnu283001h6c9kf42e79ql"},{"post_id":"ck1jnu27s00106c9kslrg1pl6","category_id":"ck1jnu282001e6c9kgz4cyta7","_id":"ck1jnu285001k6c9k5gibwm36"}],"PostTag":[{"post_id":"ck1jnu26p00026c9kakjz3ygy","tag_id":"ck1jnu27100066c9k6ukhafye","_id":"ck1jnu27c000d6c9kqnu35z4h"},{"post_id":"ck1jnu26u00046c9kat6vc6ab","tag_id":"ck1jnu27c000c6c9kz851hzei","_id":"ck1jnu27i000l6c9k01ih3s4r"},{"post_id":"ck1jnu27200086c9kf64xnwcq","tag_id":"ck1jnu27100066c9k6ukhafye","_id":"ck1jnu27m000r6c9k63ouai40"},{"post_id":"ck1jnu27l000q6c9k7ksp3q56","tag_id":"ck1jnu27100066c9k6ukhafye","_id":"ck1jnu27r000w6c9kwr7pesva"},{"post_id":"ck1jnu27900096c9kb7aimeu3","tag_id":"ck1jnu27k000p6c9krioxk4sa","_id":"ck1jnu27s000z6c9kq032rc3d"},{"post_id":"ck1jnu27n000s6c9k9i1fhhwj","tag_id":"ck1jnu27100066c9k6ukhafye","_id":"ck1jnu27u00126c9knll9rd8o"},{"post_id":"ck1jnu27r000x6c9kiwmes21e","tag_id":"ck1jnu27k000p6c9krioxk4sa","_id":"ck1jnu27x00166c9k7il0e5mc"},{"post_id":"ck1jnu27b000a6c9kjich6u5x","tag_id":"ck1jnu27q000v6c9kl7ukw777","_id":"ck1jnu27y00186c9kvxr6aa07"},{"post_id":"ck1jnu27d000e6c9kwy5rryak","tag_id":"ck1jnu27v00146c9khtbo8umu","_id":"ck1jnu27z001c6c9kj3wn09nw"},{"post_id":"ck1jnu27e000g6c9kq18cud6i","tag_id":"ck1jnu27y001a6c9kkd8zvfns","_id":"ck1jnu283001g6c9kn9vvro7x"},{"post_id":"ck1jnu27i000m6c9kmg3b3c2b","tag_id":"ck1jnu282001f6c9klqxpdrfp","_id":"ck1jnu285001j6c9kamh7aa4p"},{"post_id":"ck1jnu27s00106c9kslrg1pl6","tag_id":"ck1jnu284001i6c9k9wtpz0yc","_id":"ck1jnu287001l6c9ky9i1lvj2"}],"Tag":[{"name":"Java","_id":"ck1jnu27100066c9k6ukhafye"},{"name":"Life","_id":"ck1jnu27c000c6c9kz851hzei"},{"name":"Java多线程","_id":"ck1jnu27k000p6c9krioxk4sa"},{"name":"Nginx","_id":"ck1jnu27q000v6c9kl7ukw777"},{"name":"hexo","_id":"ck1jnu27v00146c9khtbo8umu"},{"name":"mysql","_id":"ck1jnu27y001a6c9kkd8zvfns"},{"name":"悲观锁 乐观锁","_id":"ck1jnu282001f6c9klqxpdrfp"},{"name":"Design pattern","_id":"ck1jnu284001i6c9k9wtpz0yc"}]}}